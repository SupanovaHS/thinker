
#include "terranx.h"

const char** engine_version = (const char**)0x691870;
const char** engine_date = (const char**)0x691874;
const char* last_save_path = (const char*)0x9A66C9;
BASE** current_base_ptr = (BASE**)0x90EA30;
int* current_base_id = (int*)0x689370;
int* game_preferences = (int*)0x9A6490;
int* game_more_preferences = (int*)0x9A6494;
int* game_warnings = (int*)0x9A6498;
int* game_state = (int*)0x9A64C0;
int* game_rules = (int*)0x9A649C;
int* diff_level = (int*)0x9A64C4;
int* expansion_enabled = (int*)0x9A6488;
int* multiplayer_active = (int*)0x93F660;
int* pbem_active = (int*)0x93A95C;
int* human_players = (int*)0x9A64E8;
int* current_turn = (int*)0x9A64D4;
int* active_faction = (int*)0x9A6820;
int* total_num_bases = (int*)0x9A64CC;
int* total_num_vehicles = (int*)0x9A64C8;
int* map_random_seed = (int*)0x949878;
int* map_toggle_flat = (int*)0x94988C;
int* map_area_tiles = (int*)0x949884;
int* map_area_sq_root = (int*)0x949888;
int* map_axis_x = (int*)0x949870;
int* map_axis_y = (int*)0x949874;
int* map_half_x = (int*)0x68FAF0;
int* MapSizePlanet = (int*)0x94A2A0;
int* MapOceanCoverage = (int*)0x94A2A4;
int* MapLandCoverage = (int*)0x94A2A8; // 2 - MapOceanCoverage
int* MapErosiveForces = (int*)0x94A2AC;
int* MapPlanetaryOrbit = (int*)0x94A2B0; // affects temperature
int* MapCloudCover = (int*)0x94A2B4; // affects rainfall, rivers
int* MapNativeLifeForms = (int*)0x94A2B8;
int* MapLandmarkCount = (int*)0x949890;
int* AltNaturalDefault = (int*)0x68FAF4;
int* AltNatural = (int*)0x68FB4C;
char* MapFilePath = (char*)0x94A2BC;
int* climate_future_change = (int*)0x9A67D8;
int* un_charter_repeals = (int*)0x9A6638;
int* un_charter_reinstates = (int*)0x9A663C;
int* gender_default = (int*)0x9BBFEC;
int* plurality_default = (int*)0x9BBFF0;
int* sunspot_duration = (int*)0x9A6800;
int* current_player_faction = (int*)0x939284; // MapWin->cOwner
int* diplo_second_faction = (int*)0x93F7CC;
int* diplo_third_faction = (int*)0x93F7D4;
int* diplo_tech_faction = (int*)0x93FA38;
int* reportwin_opponent_faction = (int*)0x8A4164;
int* base_find_dist = (int*)0x90EA04;
int* veh_attack_flags = (int*)0x93E904;
int* screen_width = (int*)0x9B7B1C;
int* screen_height = (int*)0x9B7B20;
char256* ParseStrBuffer = (char256*)0x9BB5E8;
int* ParseNumTable = (int*)0x9BB598;
int* ParseStrPlurality = (int*)0x9BB570;
int* ParseStrGender = (int*)0x9BB5C0;
int* GameHalted = (int*)0x68F21C;
int* ControlTurnA = (int*)0x9B2068;
int* ControlTurnB = (int*)0x93A948;
int* ControlTurnC = (int*)0x93A938;
int* ControlRedraw = (int*)0x915620;
int* ControlUpkeepA = (int*)0x93A934;
int* WorldAddTemperature = (int*)0x9B22E8;
int* WorldSkipTerritory = (int*)0x9B22EC;

int* dword_9B7AE4 = (int*)0x9B7AE4;
int* diplo_value_93FA98 = (int*)0x93FA98;
int* diplo_value_93FA24 = (int*)0x93FA24;

uint8_t* TechOwners = (uint8_t*)0x9A6670;
int* SecretProjects = (int*)0x9A6514;
int* CostRatios = (int*)0x689378;
uint8_t* FactionStatus = (uint8_t*)0x9A64E8;
// [1000][8] ? Per turn might ratings for each faction
int16_t (*FactionTurnMight)[8] = (int16_t (*)[8])(0x9A68AC);
// [8] Current relative faction ranking
int* FactionRankings = (int*)0x9A64EC;
int* RankingFactionIDUnk1 = (int*)0x9A650C;
int* RankingFactionIDUnk2 = (int*)0x9A6510;
int* FactionRankingsUnk = (int*)0x945DD8; // [8]
int* DiploFriction = (int*)0x93FA74; // not always bounded, should it be 0-20?
int* DiploFrictionFactionIDWith = (int*)0x93FABC;
int* DiploFrictionFactionID = (int*)0x93FAC0;

MFaction* MFactions = (MFaction*)0x946A50;
Faction* Factions = (Faction*)0x96C9E0;
BASE* Bases = (BASE*)0x97D040;
UNIT* Units = (UNIT*)0x9AB868;
VEH* Vehicles = (VEH*)0x952828;
VEH* Vehs = Vehicles;
MAP** MapPtr = (MAP**)0x94A30C;
Continent* Continents = (Continent*)0x9AA730; // [128]
Landmark* Landmarks = (Landmark*)0x949894; // [64]
ThinkerData* ThinkerVars = (ThinkerData*)&MFactions[0].pad_2[0];

CRules*        Rules        = (CRules*)0x949738;
CTech*         Tech         = (CTech*)0x94F358;
CSocial*       Social       = (CSocial*)0x94B000;
CFacility*     Facility     = (CFacility*)0x9A4B68;
CAbility*      Ability      = (CAbility*)0x9AB538;
CChassis*      Chassis      = (CChassis*)0x94A330;
CCitizen*      Citizen      = (CCitizen*)0x946020;
CArmor*        Armor        = (CArmor*)0x94F278;
CReactor*      Reactor      = (CReactor*)0x9527F8;
CResource*     Resource     = (CResource*)0x945F50;
CTerraform*    Terraform    = (CTerraform*)0x691878;
CWeapon*       Weapon       = (CWeapon*)0x94AE60;
CNatural*      Natural      = (CNatural*)0x94ADE0;
CWorldbuilder* WorldBuilder = (CWorldbuilder*)0x9502A8;

Fbattle_fight_1 battle_fight_1 = (Fbattle_fight_1)0x506A60;
Fpropose_proto propose_proto = (Fpropose_proto)0x580860;
Faction_airdrop action_airdrop = (Faction_airdrop)0x4CC360;
Faction_destroy action_destroy = (Faction_destroy)0x4CAA50;
Faction_gate action_gate = (Faction_gate)0x4CF380;
Fhas_abil has_abil = (Fhas_abil)0x5BF1F0;
Fparse_says parse_says = (Fparse_says)0x625EC0;
Fhex_cost hex_cost = (Fhex_cost)0x593510;
Fname_base name_base = (Fname_base)0x4E4090;
Fveh_cost veh_cost = (Fveh_cost)0x5C1850;
Fsave_daemon save_daemon = (Fsave_daemon)0x5A94F0;
Fbase_at base_at = (Fbase_at)0x4E3A50;
Fpopp popp = (Fpopp)0x48C0A0;
FX_pop X_pop = (FX_pop)0x5BF480;
Fpop_ask_number pop_ask_number = (Fpop_ask_number)0x627C30;

fp_4int veh_init = (fp_4int)0x5C03D0;
fp_1int veh_skip = (fp_1int)0x5C1D20;
fp_2int veh_at = (fp_2int)0x5BFE90;
fp_2int veh_speed = (fp_2int)0x5C1540;
fp_1int veh_kill = (fp_1int)0x5C08C0;
fp_1int veh_wake = (fp_1int)0x5C1D70;
fp_1int stack_fix = (fp_1int)0x5B8E10;
fp_2int stack_veh = (fp_2int)0x5B8EE0;
fp_3int zoc_any = (fp_3int)0x5C89F0;
fp_1int monolith = (fp_1int)0x57A050;
fp_2int action_build = (fp_2int)0x4C96E0;
fp_3int action_terraform = (fp_3int)0x4C9B00;
fp_3int terraform_cost = (fp_3int)0x4C9420;
fp_3int cost_factor = (fp_3int)0x4E4430;
fp_1int set_base = (fp_1int)0x4E39D0;
fp_1int base_compute = (fp_1int)0x4EC3B0;
fp_4int base_prod_choices = (fp_4int)0x4F81A0;
fp_void turn_upkeep = (fp_void)0x5258C0;
fp_1int faction_upkeep = (fp_1int)0x527290;
fp_1int action_staple = (fp_1int)0x4CA7F0;
fp_1int social_upkeep = (fp_1int)0x5B44D0;
fp_1int repair_phase = (fp_1int)0x526030;
fp_1int production_phase = (fp_1int)0x526E70;
fp_1int allocate_energy = (fp_1int)0x5267B0;
fp_1int enemy_diplomacy = (fp_1int)0x55F930;
fp_1int enemy_strategy = (fp_1int)0x561080;
fp_1int corner_market = (fp_1int)0x59EE50;
fp_1int call_council = (fp_1int)0x52C880;
fp_3int setup_player = (fp_3int)0x5B0E00;
fp_2int eliminate_player = (fp_2int)0x5B3380;
fp_2int can_call_council = (fp_2int)0x52C670;
fp_3int wants_to_attack = (fp_3int)0x55BC80;
fp_void do_all_non_input = (fp_void)0x5FCB20;
fp_void auto_save = (fp_void)0x5ABD20;
fp_2int parse_num = (fp_2int)0x625E30;
fp_3int capture_base = (fp_3int)0x50C510;
fp_1int base_kill = (fp_1int)0x4E5250;
fp_5int crop_yield = (fp_5int)0x4E6E50;
fp_5int mine_yield = (fp_5int)0x4E7310;
fp_5int energy_yield = (fp_5int)0x4E7750;
fp_6int base_draw = (fp_6int)0x55AF20;
fp_6int base_find3 = (fp_6int)0x4E3D50;
fp_3int draw_tile = (fp_3int)0x46AF40;
tc_2int font_width = (tc_2int)0x619280;
tc_4int buffer_box = (tc_4int)0x5E3203;
tc_3int buffer_fill3 = (tc_3int)0x5DFCD0;
tc_5int buffer_write_l = (tc_5int)0x5DCEA0;
fp_6int social_ai = (fp_6int)0x5B4790;
fp_1int social_set = (fp_1int)0x5B4600;
fp_1int pop_goal = (fp_1int)0x4EF090;
fp_1int consider_designs = (fp_1int)0x581260;
fp_3int tech_val = (fp_3int)0x5BCBE0;
fp_1int tech_rate = (fp_1int)0x5BE6B0;
fp_1int tech_selection = (fp_1int)0x5BE380;
fp_1int enemy_move = (fp_1int)0x56B5B0;
fp_3int best_defender = (fp_3int)0x5044D0;
fp_5int battle_compute = (fp_5int)0x501DA0;
fp_6int battle_kill = (fp_6int)0x505D80;
fp_7int battle_fight_2 = (fp_7int)0x506AF0;
fp_void draw_cursor = (fp_void)0x46AE00;
fp_1int draw_map = (fp_1int)0x46B190;
fp_void base_hurry = (fp_void)0x4F3FE0;
fp_void turn_timer = (fp_void)0x4E3A50;

fp_void map_wipe                 = (fp_void)0x591040;
fp_3int alt_put_detail           = (fp_3int)0x591260;
fp_3int alt_set                  = (fp_3int)0x591290;
fp_2int alt_natural              = (fp_2int)0x5918A0;
fp_3int alt_set_both             = (fp_3int)0x5918F0;
fp_2int elev_at                  = (fp_2int)0x5919C0;
fp_3int climate_set              = (fp_3int)0x591A80;
fp_3int temp_set                 = (fp_3int)0x591AD0;
fp_3int owner_set                = (fp_3int)0x591B10;
fp_3int site_set                 = (fp_3int)0x591B50;
fp_3int region_set               = (fp_3int)0x591B90;
fp_3int rocky_set                = (fp_3int)0x591BC0;
fp_3int using_set                = (fp_3int)0x591C10;
fp_3int lock_map                 = (fp_3int)0x591C90;
fp_3int unlock_map               = (fp_3int)0x591CF0;
fp_3int bit_put                  = (fp_3int)0x591D30;
fp_4int bit_set                  = (fp_4int)0x591D60;
fp_4int bit2_set                 = (fp_4int)0x591DB0;
fp_3int code_set                 = (fp_3int)0x591E00;
fp_3int synch_bit                = (fp_3int)0x591E50;
fp_2int minerals_at              = (fp_2int)0x591F00;
fp_2int bonus_at                 = (fp_2int)0x592030;
fp_2int goody_at                 = (fp_2int)0x592140;
fp_6int say_loc                  = (fp_6int)0x592250;
fp_2int site_radius              = (fp_2int)0x592400;
fp_3int find_landmark            = (fp_3int)0x592550;
fp_3int new_landmark             = (fp_3int)0x592600;
fp_3int valid_landmark           = (fp_3int)0x592650;
fp_2int kill_landmark            = (fp_2int)0x5926F0;
fp_2int delete_landmark          = (fp_2int)0x5927D0;
fp_void fixup_landmarks          = (fp_void)0x592940;
fp_void set_dirty                = (fp_void)0x592A80;

fp_4int world_alt_set            = (fp_4int)0x5C2020;
fp_2int world_raise_alt          = (fp_2int)0x5C2380;
fp_2int world_lower_alt          = (fp_2int)0x5C23E0;
fp_3int brush                    = (fp_3int)0x5C2440;
fp_4int paint_land               = (fp_4int)0x5C27F0;
fp_1int build_continent          = (fp_1int)0x5C28F0;
fp_1int build_hills              = (fp_1int)0x5C2B40;
fp_void world_erosion            = (fp_void)0x5C2CB0;
fp_void world_rocky              = (fp_void)0x5C32A0;
fp_void world_fungus             = (fp_void)0x5C3440;
fp_void world_riverbeds          = (fp_void)0x5C3680;
fp_void world_rivers             = (fp_void)0x5C38B0;
fp_void world_shorelines         = (fp_void)0x5C3F70;
fp_void world_validate           = (fp_void)0x5C40F0;
fp_void world_temperature        = (fp_void)0x5C4170;
fp_void world_rainfall           = (fp_void)0x5C4470;
fp_3int world_site               = (fp_3int)0x5C4FD0;
fp_void world_analysis           = (fp_void)0x5C55C0;
fp_void world_polar_caps         = (fp_void)0x5C58E0;
fp_void world_climate            = (fp_void)0x5C5A30;
fp_void world_linearize_contours = (fp_void)0x5C5AE0;
fp_2int near_landmark            = (fp_2int)0x5C5BD0;
fp_2int world_crater             = (fp_2int)0x5C5C70;
fp_2int world_monsoon            = (fp_2int)0x5C5EF0;
fp_2int world_sargasso           = (fp_2int)0x5C6200;
fp_2int world_ruin               = (fp_2int)0x5C64A0;
fp_2int world_dune               = (fp_2int)0x5C6740;
fp_2int world_diamond            = (fp_2int)0x5C69E0;
fp_2int world_fresh              = (fp_2int)0x5C6C40;
fp_3int world_volcano            = (fp_3int)0x5C6DB0;
fp_2int world_borehole           = (fp_2int)0x5C7020;
fp_2int world_temple             = (fp_2int)0x5C7540;
fp_2int world_unity              = (fp_2int)0x5C7750;
fp_2int world_fossil             = (fp_2int)0x5C7A80;
fp_2int world_canyon_nessus      = (fp_2int)0x5C7CB0;
fp_2int world_mesa               = (fp_2int)0x5C7F40;
fp_2int world_ridge              = (fp_2int)0x5C8150;
fp_2int world_geothermal         = (fp_2int)0x5C83B0;
fp_void world_build              = (fp_void)0x5C86E0;


