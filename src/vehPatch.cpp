#include "patch.h"
#include "engine.h"
#include <vector>
#include <cstdint>


void build_patch(int32_t targetAddr, const std::vector<uint8_t>& old_bytes, int disp_offset, uintptr_t new_ptr) {
    std::vector<uint8_t> patch_bytes = old_bytes;

    if (disp_offset >= 0 && disp_offset + 3 < (int)patch_bytes.size()) {
        uint32_t new_disp = static_cast<uint32_t>(new_ptr);
        patch_bytes[disp_offset]     =  new_disp & 0xFF;
        patch_bytes[disp_offset + 1] = (new_disp >> 8) & 0xFF;
        patch_bytes[disp_offset + 2] = (new_disp >> 16) & 0xFF;
        patch_bytes[disp_offset + 3] = (new_disp >> 24) & 0xFF;
    }

    int len = static_cast<int32_t>(old_bytes.size());
    if (len <= 0) {
        debug("ERROR no len: address: %08X\n", targetAddr);
        exit_fail(targetAddr);
    }

    bool patch = true;
    for (int i = 0; i < len; i++) {
        if (*((byte*)targetAddr + i) != old_bytes[i]) {
            debug("Already patched: address: %08X actual: %02X expected: %02X\n",
                  targetAddr + i, *((byte*)targetAddr + i), old_bytes[i]);
            patch = false;
        }
    }

    if (patch) {
        for (int i = 0; i < len; i++) {
            *((byte*)targetAddr + i) = patch_bytes[i];
        }
    }
}


// Patch instructions referring to old VEH addresses
void apply_veh_patches() {

    // patch veh_init clamp
    const byte old_veh_init_bytes[] = {0x08};
    const byte new_veh_init_bytes[] = {0x20};
    write_bytes(0x005C03DF,old_veh_init_bytes,new_veh_init_bytes,sizeof(new_veh_init_bytes));

    // patch veh_kill clamp
    const byte old_veh_kill_bytes[] = {0x08};
    const byte new_veh_kill_bytes[] = {0x20};
    write_bytes(0x005c09c9,old_veh_kill_bytes,new_veh_kill_bytes,sizeof(new_veh_kill_bytes));

    // garrison_click(int,int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0040B181, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // garrison_click(int,int,int,int) - MOV DL,byte ptr [ECX + 0x952839]
    build_patch(0x0040B202, std::vector<uint8_t>{0x8A, 0x91, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - TEST dword ptr [ECX + 0x95282c],0x8004200
    build_patch(0x0040B210, std::vector<uint8_t>{0xF7, 0x81, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x42, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0040B2BD, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0040B2C4, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // garrison_click(int,int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0040B3F2, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x0040B3F9, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x0040B405, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0040B4BF, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0040B4C6, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // garrison_click(int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0040B5D4, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // garrison_click(int,int,int,int) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x0040B5FB, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0040B605, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOV CL,byte ptr [EAX + 0x95283b]
    build_patch(0x0040B62E, std::vector<uint8_t>{0x8A, 0x88, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // garrison_click(int,int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x0040B634, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // garrison_click(int,int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x952856]
    build_patch(0x0040B739, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // garrison_click(int,int,int,int) - CMP CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x0040B784, std::vector<uint8_t>{0x3A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [ECX + 0x952856]
    build_patch(0x0040B7E9, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // garrison_click(int,int,int,int) - MOV SI,word ptr [ECX + 0x952828]
    build_patch(0x0040B7FE, std::vector<uint8_t>{0x66, 0x8B, 0xB1, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // garrison_click(int,int,int,int) - MOV DX,word ptr [ECX + 0x95282a]
    build_patch(0x0040B80D, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x0040B81E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0040B85E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // garrison_click(int,int,int,int) - MOV BL,byte ptr [EDX + 0x952836]
    build_patch(0x0040B963, std::vector<uint8_t>{0x8A, 0x9A, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // garrison_click(int,int,int,int) - MOV byte ptr [ECX*0x4 + 0x952839],0x0
    build_patch(0x0040BA2E, std::vector<uint8_t>{0xC6, 0x04, 0x8D, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0040BA61, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x0040BA68, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x0040BA74, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0040BB31, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0040BB38, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // garrison_click(int,int,int,int) - MOV word ptr [EDX + 0x952856],CX
    build_patch(0x0040BC66, std::vector<uint8_t>{0x66, 0x89, 0x8A, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952856]
    build_patch(0x0040BC87, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // garrison_click(int,int,int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x2
    build_patch(0x0040BCFC, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x02}, 3, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - MOV ESI,dword ptr [EAX + 0x95282c]
    build_patch(0x0040BD80, std::vector<uint8_t>{0x8B, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOV dword ptr [EAX + 0x95282c],ESI
    build_patch(0x0040BD8C, std::vector<uint8_t>{0x89, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // garrison_click(int,int,int,int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x0040BD92, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952856]
    build_patch(0x0040BD99, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // garrison_click(int,int,int,int) - MOV word ptr [EAX + 0x95283c],CX
    build_patch(0x0040BDB1, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952856]
    build_patch(0x0040BDB8, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // garrison_click(int,int,int,int) - MOV word ptr [EAX + 0x952844],CX
    build_patch(0x0040BDD0, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0040BE12, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0040BE19, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0040BE3E, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0040BE45, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // garrison_click(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0040BEDA, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // garrison_click(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0040BEE1, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_supported(int) - MOV EAX,0x952856
    build_patch(0x0040CB3B, std::vector<uint8_t>{0xB8, 0x56, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2E);
    // draw_supported(int) - CMP byte ptr [EAX + -0x20],DL
    build_patch(0x0040CB43, std::vector<uint8_t>{0x38, 0x50, 0xE0}, -1, new_VEH_addr + 0xE);
    // draw_supported(int) - MOVSX EBX,word ptr [EAX]
    build_patch(0x0040CB48, std::vector<uint8_t>{0x0F, 0xBF, 0x18}, -1, new_VEH_addr + 0x2E);
    // draw_supported(int) - MOV dword ptr [EBP + -0x10],0x95282c
    build_patch(0x0040CCD8, std::vector<uint8_t>{0xC7, 0x45, 0xF0, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // draw_supported(int) - MOV CL,byte ptr [EAX + 0xa]
    build_patch(0x0040CCE8, std::vector<uint8_t>{0x8A, 0x48, 0x0A}, -1, new_VEH_addr + 0xE);
    // draw_supported(int) - MOVSX ECX,word ptr [EAX + 0x2a]
    build_patch(0x0040CCF9, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x2A}, -1, new_VEH_addr + 0x2E);
    // draw_supported(int) - TEST byte ptr [ECX],0x10
    build_patch(0x0040CDB3, std::vector<uint8_t>{0xF6, 0x01, 0x10}, -1, new_VEH_addr + 0x4);
    // draw_supported(int) - MOVSX EDX,word ptr [ECX + 0x6]
    build_patch(0x0040CDDA, std::vector<uint8_t>{0x0F, 0xBF, 0x51, 0x06}, -1, new_VEH_addr + 0xA);
    // draw_supported(int) - TEST dword ptr [EAX],0x600000
    build_patch(0x0040CE19, std::vector<uint8_t>{0xF7, 0x00, 0x00, 0x00, 0x60, 0x00}, -1, new_VEH_addr + 0x4);
    // draw_supported(int) - MOVSX ECX,word ptr [EAX + 0x6]
    build_patch(0x0040CE8A, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x06}, -1, new_VEH_addr + 0xA);
    // draw_supported(int) - CMP byte ptr [EAX + 0xd],0x3
    build_patch(0x0040CE9E, std::vector<uint8_t>{0x80, 0x78, 0x0D, 0x03}, -1, new_VEH_addr + 0x11);
    // draw_supported(int) - MOVSX ECX,word ptr [EAX + -0x2]
    build_patch(0x0040CEA4, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xFE}, -1, new_VEH_addr + 0x2);
    // draw_supported(int) - MOVSX EDX,word ptr [EAX + -0x4]
    build_patch(0x0040CEA8, std::vector<uint8_t>{0x0F, 0xBF, 0x50, 0xFC}, -1, new_VEH_addr + 0x0);
    // draw_supported(int) - MOV DL,byte ptr [EAX + 0x22]
    build_patch(0x0040CF02, std::vector<uint8_t>{0x8A, 0x50, 0x22}, -1, new_VEH_addr + 0x26);
    // draw_supported(int) - MOV EAX,dword ptr [ECX]
    build_patch(0x0040CF27, std::vector<uint8_t>{0x8B, 0x01}, -1, new_VEH_addr + 0x4);
    // draw_supported(int) - MOVSX EAX,word ptr [EDI + 0x6]
    build_patch(0x0040D096, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0x06}, -1, new_VEH_addr + 0xA);
    // draw_supported(int) - CMP byte ptr [EDI + 0xd],0x3
    build_patch(0x0040D0AE, std::vector<uint8_t>{0x80, 0x7F, 0x0D, 0x03}, -1, new_VEH_addr + 0x11);
    // draw_supported(int) - MOVSX EAX,word ptr [EDI + -0x2]
    build_patch(0x0040D0B8, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xFE}, -1, new_VEH_addr + 0x2);
    // draw_supported(int) - MOVSX ECX,word ptr [EDI + -0x4]
    build_patch(0x0040D0C3, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xFC}, -1, new_VEH_addr + 0x0);
    // draw_supported(int) - MOV CL,byte ptr [EDI + 0x22]
    build_patch(0x0040D0FB, std::vector<uint8_t>{0x8A, 0x4F, 0x22}, -1, new_VEH_addr + 0x26);
    // draw_supported(int) - MOV CL,byte ptr [EDI + 0x22]
    build_patch(0x0040D13C, std::vector<uint8_t>{0x8A, 0x4F, 0x22}, -1, new_VEH_addr + 0x26);
    // draw_supported(int) - MOV dword ptr [EBP + -0x10],EDX
    build_patch(0x0040D1D7, std::vector<uint8_t>{0x89, 0x55, 0xF0}, -1, new_VEH_addr + 0x38);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040D5A9, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040D6D5, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040D6F1, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x0040D796, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040D7A3, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040D7BA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x0040D806, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_flash(int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0040D86E, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952856]
    build_patch(0x0040D885, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0040D8EF, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_flash(int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x0040D912, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x0040D9CF, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040DAB7, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x0040DB63, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_flash(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0040DB89, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x0040DBBC, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // draw_flash(int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x0040DBD0, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_flash(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0040DC0D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV AL,byte ptr [ESI + 0x95284d]
    build_patch(0x0040DC75, std::vector<uint8_t>{0x8A, 0x86, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // draw_flash(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0040DC7F, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040DCBE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x0040DCF0, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_flash(int) - MOV AL,byte ptr [ESI + 0x952838]
    build_patch(0x0040DE98, std::vector<uint8_t>{0x8A, 0x86, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040DF2C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x0040DF7A, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040DF9E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x0040DFF1, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_flash(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0040E015, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_flash(int) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x0040E092, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_flash(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0040E191, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_flash(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x0040E1F6, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // draw_production(int) - MOV byte ptr [EAX*0x4 + 0x95284c],CL
    build_patch(0x0040E72C, std::vector<uint8_t>{0x88, 0x0C, 0x85, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // draw_garrison(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x00410528, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_garrison(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x0041053E, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_garrison(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x00410556, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // draw_garrison(int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x00410603, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_garrison(int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x00410619, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_garrison(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004106A5, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_garrison(int) - MOVSX ESI,word ptr [EAX + 0x952858]
    build_patch(0x004107E9, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // production(int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x00417D42, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // production(int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x00417D4C, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // production(int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x00417D69, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // production(int,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x00417D70, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // production(int,int) - MOV dword ptr [ESI + 0x95282c],ECX
    build_patch(0x00417D7B, std::vector<uint8_t>{0x89, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // production(int,int) - MOVSX EDI,word ptr [ESI + 0x952858]
    build_patch(0x00417D90, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // exit(void) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0041A53A, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // exit(void) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0041A541, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // base_killed(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0041A6CB, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // base_killed(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0041A6D2, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check_veh(int) - MOV DI,word ptr [ECX + 0x952828]
    build_patch(0x0041A8D5, std::vector<uint8_t>{0x66, 0x8B, 0xB9, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check_veh(int) - MOV DI,word ptr [ECX + 0x95282a]
    build_patch(0x0041A8E8, std::vector<uint8_t>{0x66, 0x8B, 0xB9, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check_veh(int) - MOVSX ECX,word ptr [ECX + 0x952856]
    build_patch(0x0041A8F8, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // zoom(int,int) - CMP dword ptr [EAX*0x4 + 0x96da3c],EDI
    build_patch(0x0041AA73, std::vector<uint8_t>{0x39, 0x3C, 0x85, 0x3C, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x19148);
    // base_editor(void) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0041CCF6, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // base_editor(void) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0041CCFD, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_button_clicked(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0041D681, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // on_button_clicked(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0041D688, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_button_clicked(int) - MOV AX,word ptr [EAX + 0x952858]
    build_patch(0x0041D9F7, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // on_button_clicked(int) - MOV AX,word ptr [EAX + 0x952858]
    build_patch(0x0041DA0B, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00421D2A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00421D53, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00421D9E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00421DC5, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00421DDF, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00421E02, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00421E96, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00421FC9, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0042218D, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x004221D0, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00422227, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x00422252, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004222E7, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00422339, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x00422358, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004223A1, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00422513, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0042258A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004225AF, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004225D0, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00422644, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00422678, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004226C9, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004226FE, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0042274E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00422ABA, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_report(int,int,int,int,int) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x00422B01, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // init(int,int) - MOV ECX,dword ptr [EAX + 0x96c9e8]
    build_patch(0x00427DB7, std::vector<uint8_t>{0x8B, 0x88, 0xE8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F4);
    // init(int,int) - MOV EDX,dword ptr [EAX + 0x96cc00]
    build_patch(0x004282C1, std::vector<uint8_t>{0x8B, 0x90, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // init(int,int) - MOV dword ptr [EAX + 0x96cc00],EDX
    build_patch(0x004282CE, std::vector<uint8_t>{0x89, 0x90, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // council(int,int,int) - MOV EAX,dword ptr [ECX*0x4 + 0x96c9e0]
    build_patch(0x00428518, std::vector<uint8_t>{0x8B, 0x04, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // council(int,int,int) - MOV dword ptr [ECX*0x4 + 0x96c9e0],EAX
    build_patch(0x00428529, std::vector<uint8_t>{0x89, 0x04, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // draw_unit(void) - MOV byte ptr [ECX*0x4 + 0x95284c],0x4
    build_patch(0x0042CA86, std::vector<uint8_t>{0xC6, 0x04, 0x8D, 0x4C, 0x28, 0x95, 0x00, 0x04}, 3, new_VEH_addr + 0x24);
    // draw_reactor(int,RECT_*,int) - CMP EAX,0x952830
    build_patch(0x00433554, std::vector<uint8_t>{0x3D, 0x30, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x8);
    // exec(int,int,int,int,int,int,int,int,int,int,uchar_*) - CMP EAX,0x952830
    build_patch(0x00434204, std::vector<uint8_t>{0x3D, 0x30, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x8);
    // select_reactor(void) - CMP EAX,0x952830
    build_patch(0x0043AA51, std::vector<uint8_t>{0x3D, 0x30, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x8);
    // select_reactor(void) - CMP ECX,0x952830
    build_patch(0x0043AACA, std::vector<uint8_t>{0x81, 0xF9, 0x30, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x8);
    // draw_stack(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0043DBF9, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // draw_flash(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0043E092, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // draw_flash(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0043E19A, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // draw_flash(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0043E1C1, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // ambience_veh(int) - MOV AL,byte ptr [ECX + 0x952839]
    build_patch(0x00446D66, std::vector<uint8_t>{0x8A, 0x81, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // ambience_veh(int) - MOV DI,word ptr [ECX + 0x952832]
    build_patch(0x00446D74, std::vector<uint8_t>{0x66, 0x8B, 0xB9, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // ambience_veh(int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00446D94, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // ambience_veh(int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00446E02, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // try_to_add_me(void) - MOV EAX,dword ptr [EDX*0x4 + 0x96cc00]
    build_patch(0x0044A77E, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // try_to_add_me(void) - MOV CL,byte ptr [EAX*0x4 + 0x96c9e8]
    build_patch(0x0044A90B, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0xE8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F4);
    // help_tech_info(void_(*)(char_*),int,int,int) - CMP ESI,0x952828
    build_patch(0x0044BAD6, std::vector<uint8_t>{0x81, 0xFE, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // setup_text(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00456592, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // setup_text(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x004565F8, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // setup_text(void) - MOV ECX,dword ptr [EBX + 0x96cd04]
    build_patch(0x00456685, std::vector<uint8_t>{0x8B, 0x8B, 0x04, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18410);
    // setup_text(void) - MOV EDX,dword ptr [EBX + 0x96cd08]
    build_patch(0x00456694, std::vector<uint8_t>{0x8B, 0x93, 0x08, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18414);
    // setup_text(void) - MOV EAX,dword ptr [EBX + 0x96cd04]
    build_patch(0x004567DC, std::vector<uint8_t>{0x8B, 0x83, 0x04, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18410);
    // setup_text(void) - MOV EBX,dword ptr [EBX + 0x96cd08]
    build_patch(0x00456876, std::vector<uint8_t>{0x8B, 0x9B, 0x08, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18414);
    // setup_text(void) - MOV EDX,dword ptr [EBX + 0x96cce4]
    build_patch(0x004569F7, std::vector<uint8_t>{0x8B, 0x93, 0xE4, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x183F0);
    // setup_text(void) - MOV ECX,dword ptr [EBX + 0x96cce8]
    build_patch(0x00456A86, std::vector<uint8_t>{0x8B, 0x8B, 0xE8, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x183F4);
    // setup_text(void) - MOV EAX,dword ptr [EAX*0x4 + 0x96c9f8]
    build_patch(0x00456E5E, std::vector<uint8_t>{0x8B, 0x04, 0x85, 0xF8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18100);
    // setup_text(void) - MOV EAX,dword ptr [EAX + 0x96cb04]
    build_patch(0x00457049, std::vector<uint8_t>{0x8B, 0x80, 0x04, 0xCB, 0x96, 0x00}, -1, new_VEH_addr + 0x18210);
    // setup_text(void) - MOV EAX,dword ptr [ECX + 0x96c9e4]
    build_patch(0x004570EF, std::vector<uint8_t>{0x8B, 0x81, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // state_valid(int) - CMP dword ptr [EDX*0x4 + 0x96c9e8],0x2
    build_patch(0x00458E10, std::vector<uint8_t>{0x83, 0x3C, 0x95, 0xE8, 0xC9, 0x96, 0x00, 0x02}, -1, new_VEH_addr + 0x180F4);
    // state_valid(int) - CMP dword ptr [EDX*0x4 + 0x96c9e8],0x2
    build_patch(0x00458E54, std::vector<uint8_t>{0x83, 0x3C, 0x95, 0xE8, 0xC9, 0x96, 0x00, 0x02}, -1, new_VEH_addr + 0x180F4);
    // state_valid(int) - TEST byte ptr [ESI*0x4 + 0x96c9f8],DL
    build_patch(0x00458E7F, std::vector<uint8_t>{0x84, 0x14, 0xB5, 0xF8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18108);
    // set_date(char_*) - MOV ECX,dword ptr [EAX + 0x96cc00]
    build_patch(0x0045C052, std::vector<uint8_t>{0x8B, 0x88, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // set_date(char_*) - MOV EDX,dword ptr [EAX + 0x96cc04]
    build_patch(0x0045C058, std::vector<uint8_t>{0x8B, 0x90, 0x04, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x18310);
    // on_iface_button_clicked(int) - MOV CX,word ptr [ECX*0x4 + 0x952858]
    build_patch(0x0045D1D4, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // on_iface_button_clicked(int) - MOV CX,word ptr [ECX*0x4 + 0x952858]
    build_patch(0x0045D1EA, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004611FB, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x00461224, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x0046122B, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOV CX,word ptr [EDI + 0x952832]
    build_patch(0x00461275, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004612C5, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x00461319, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x00461320, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x0046139A, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004613D1, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00461447, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00461472, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004614BA, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x004614FC, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x0046150A, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004615B4, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x004615D9, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x004615E7, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x00461617, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0046167D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004616D1, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004616F1, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x0046171D, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x0046172B, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004618CE, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x00461900, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX EBX,word ptr [ECX + 0x952828]
    build_patch(0x0046190E, std::vector<uint8_t>{0x0F, 0xBF, 0x99, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x00461941, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x0046194F, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00461A17, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x00461A61, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x00461A6F, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x00461BD0, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x00461BDE, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x00461C29, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x00461C37, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // check(int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00461DCF, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // check(int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00461DDD, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00463788, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x004637DF, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x004637F1, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV DL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00463896, std::vector<uint8_t>{0x8A, 0x14, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOVSX ECX,word ptr [ESI*0x4 + 0x952832]
    build_patch(0x004638A9, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0xB5, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOVSX EAX,word ptr [ESI*0x4 + 0x952832]
    build_patch(0x004638BE, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0xB5, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV AL,byte ptr [EDX + 0x94a379]
    build_patch(0x004638DD, std::vector<uint8_t>{0x8A, 0x82, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x0046396C, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x00463982, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004639A3, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004639AD, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004639C3, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOVSX EDI,word ptr [ESI + 0x952858]
    build_patch(0x004639FD, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV EAX,dword ptr [EDX*0x4 + 0x96c9e0]
    build_patch(0x0046404F, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x0046510C, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // draw_vehicles(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x00466DA1, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_vehicles(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x00466DAC, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_vehicles(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x00466DD5, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_vehicles(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x00466DE0, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_vehicles(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00466DF6, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_vehicles(int,int,int,int,int) - MOVSX ESI,word ptr [EAX + 0x952858]
    build_patch(0x00466E15, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // draw_vehicles(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x00466E35, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_vehicles(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x00466E40, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_vehicles(int,int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x00466EB7, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_vehicles(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00466EC6, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_vehicles(int,int,int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x00466ED5, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_vehicles(int,int,int,int,int) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x00466F0A, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // draw_vehicles(int,int,int,int,int) - MOV AL,byte ptr [EDX + 0x952839]
    build_patch(0x00466F47, std::vector<uint8_t>{0x8A, 0x82, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // draw_vehicles(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00466FC2, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_vehicles(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x00466FC9, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_vehicles(int,int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952856]
    build_patch(0x00467076, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // draw_vehicles(int,int,int,int,int) - MOVSX ESI,word ptr [EAX + 0x952858]
    build_patch(0x00467081, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // draw_vehicles(int,int,int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004670B3, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_vehicles(int,int,int,int,int) - MOV DX,word ptr [EAX + 0x952830]
    build_patch(0x004670BD, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // draw_vehicles(int,int,int,int,int) - TEST byte ptr [EAX + 0x95284f],DL
    build_patch(0x004670DA, std::vector<uint8_t>{0x84, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // draw_vehicles(int,int,int,int,int) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x0046713C, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // draw_base_dest(int) - MOV ESI,0x95282c
    build_patch(0x00467BA4, std::vector<uint8_t>{0xBE, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // draw_base_dest(int) - MOV AL,byte ptr [ESI + 0xa]
    build_patch(0x00467BB1, std::vector<uint8_t>{0x8A, 0x46, 0x0A}, -1, new_VEH_addr + 0xE);
    // draw_base_dest(int) - MOV ECX,dword ptr [ESI]
    build_patch(0x00467BBF, std::vector<uint8_t>{0x8B, 0x0E}, -1, new_VEH_addr + 0x4);
    // draw_base_dest(int) - CMP byte ptr [ESI + 0xd],0x18
    build_patch(0x00467BDB, std::vector<uint8_t>{0x80, 0x7E, 0x0D, 0x18}, -1, new_VEH_addr + 0x11);
    // draw_base_dest(int) - MOVSX EAX,word ptr [ESI + 0x6]
    build_patch(0x00467BF5, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x06}, -1, new_VEH_addr + 0xA);
    // draw_base_dest(int) - MOV BL,byte ptr [EDX + 0x94a379]
    build_patch(0x00467C16, std::vector<uint8_t>{0x8A, 0x9A, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // draw_base_dest(int) - MOV CL,byte ptr [ESI + 0xe]
    build_patch(0x00467C37, std::vector<uint8_t>{0x8A, 0x4E, 0x0E}, -1, new_VEH_addr + 0x12);
    // draw_base_dest(int) - MOV EAX,dword ptr [ESI]
    build_patch(0x00467C80, std::vector<uint8_t>{0x8B, 0x06}, -1, new_VEH_addr + 0x4);
    // draw_base_dest(int) - MOV AL,byte ptr [ESI + 0xa]
    build_patch(0x00467C98, std::vector<uint8_t>{0x8A, 0x46, 0x0A}, -1, new_VEH_addr + 0xE);
    // draw_base_dest(int) - MOVSX EAX,word ptr [ESI + 0x6]
    build_patch(0x00467C9C, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x06}, -1, new_VEH_addr + 0xA);
    // draw_base_dest(int) - MOVSX EAX,word ptr [ECX + 0x952844]
    build_patch(0x00467CA1, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // draw_base_dest(int) - MOVSX ECX,word ptr [ECX + 0x95283c]
    build_patch(0x00467CA8, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // draw_base_dest(int) - MOVSX EAX,word ptr [EDX + 0x952844]
    build_patch(0x00467CB1, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // draw_base_dest(int) - MOVSX ECX,word ptr [EDX + 0x95283c]
    build_patch(0x00467CB8, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // draw_base_dest(int) - MOV CL,byte ptr [ESI + 0xe]
    build_patch(0x00467CC8, std::vector<uint8_t>{0x8A, 0x4E, 0x0E}, -1, new_VEH_addr + 0x12);
    // draw_base_dest(int) - MOVSX ECX,word ptr [ESI + 0x10]
    build_patch(0x00467D02, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0x10}, -1, new_VEH_addr + 0x14);
    // draw_base_dest(int) - MOVSX EAX,word ptr [ESI + 0x18]
    build_patch(0x00467D08, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x18}, -1, new_VEH_addr + 0x1C);
    // draw_base_dest(int) - MOVSX EDX,word ptr [ESI + -0x2]
    build_patch(0x00467D0C, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xFE}, -1, new_VEH_addr + 0x2);
    // draw_base_dest(int) - MOVSX EAX,word ptr [ESI + -0x4]
    build_patch(0x00467D12, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xFC}, -1, new_VEH_addr + 0x0);
    // draw_base_dest(int) - TEST dword ptr [ESI],0x2000000
    build_patch(0x00467D1F, std::vector<uint8_t>{0xF7, 0x06, 0x00, 0x00, 0x00, 0x02}, -1, new_VEH_addr + 0x4);
    // draw_base_dest(int) - MOV AL,byte ptr [ESI + 0xe]
    build_patch(0x00467D27, std::vector<uint8_t>{0x8A, 0x46, 0x0E}, -1, new_VEH_addr + 0x12);
    // draw_base_dest(int) - LEA EBX,[ESI + 0x12]
    build_patch(0x00467D35, std::vector<uint8_t>{0x8D, 0x5E, 0x12}, -1, new_VEH_addr + 0x16);
    // draw_base_dest(int) - MOV ECX,dword ptr [ESI]
    build_patch(0x00467D38, std::vector<uint8_t>{0x8B, 0x0E}, -1, new_VEH_addr + 0x4);
    // draw_base_dest(int) - MOVSX EDX,word ptr [ESI + 0x6]
    build_patch(0x00467D57, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0x06}, -1, new_VEH_addr + 0xA);
    // draw_base_dest(int) - MOV CL,byte ptr [ESI + 0xa]
    build_patch(0x00467D5B, std::vector<uint8_t>{0x8A, 0x4E, 0x0A}, -1, new_VEH_addr + 0xE);
    // draw_base_dest(int) - MOVSX EAX,word ptr [EBX + 0x8]
    build_patch(0x00467D5F, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0x08}, -1, new_VEH_addr + 0x1E);
    // draw_base_dest(int) - MOVSX ECX,word ptr [EBX]
    build_patch(0x00467D65, std::vector<uint8_t>{0x0F, 0xBF, 0x0B}, -1, new_VEH_addr + 0x16);
    // draw_base_dest(int) - MOVSX EDX,word ptr [EBX + 0x6]
    build_patch(0x00467D68, std::vector<uint8_t>{0x0F, 0xBF, 0x53, 0x06}, -1, new_VEH_addr + 0x1C);
    // draw_base_dest(int) - MOVSX EAX,word ptr [EBX + -0x2]
    build_patch(0x00467D6E, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0xFE}, -1, new_VEH_addr + 0x14);
    // draw_base_dest(int) - MOV CL,byte ptr [ESI + 0xe]
    build_patch(0x00467D80, std::vector<uint8_t>{0x8A, 0x4E, 0x0E}, -1, new_VEH_addr + 0x12);
    // draw_base_names(void) - MOV EBX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x00468740, std::vector<uint8_t>{0x8B, 0x1C, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // set_center(int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x0046B279, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // editor(int,int,int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x0046B9F8, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // editor(int,int,int) - MOV EAX,dword ptr [EDX*0x4 + 0x96c9e0]
    build_patch(0x0046BAAB, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // right_menu(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0046C437, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // right_menu(int,int,int,int) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x0046C454, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // right_menu(int,int,int,int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x0046C917, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // right_menu(int,int,int,int) - MOVSX ECX,word ptr [ECX + 0x95282a]
    build_patch(0x0046C922, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // right_menu(int,int,int,int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0046C96F, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // right_menu(int,int,int,int) - CMP byte ptr [EDX + 0x94a379],0x2
    build_patch(0x0046C98E, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // right_menu(int,int,int,int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0046C9DB, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // right_menu(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0046CA20, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // right_menu(int,int,int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x0046CA47, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // right_menu(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0046CA4E, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // right_menu(int,int,int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x0046CACC, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // right_menu(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0046CAD3, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // right_menu(int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0046CB48, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // right_menu(int,int,int,int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x0046CFE3, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // right_menu(int,int,int,int) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x0046CFEA, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // right_menu(int,int,int,int) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x0046CFF5, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // right_menu(int,int,int,int) - MOV ESI,dword ptr [EAX + 0x95282c]
    build_patch(0x0046CFFC, std::vector<uint8_t>{0x8B, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // right_menu(int,int,int,int) - MOV dword ptr [EAX + 0x95282c],ESI
    build_patch(0x0046D008, std::vector<uint8_t>{0x89, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // right_menu(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0046D0A4, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // right_menu(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0046D0AB, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // click(int,int,int) - MOV word ptr [ECX + 0x952828],DX
    build_patch(0x0046DDDD, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // click(int,int,int) - MOV word ptr [ECX + 0x95282a],SI
    build_patch(0x0046DDE4, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // click(int,int,int) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x0046DDEB, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // click(int,int,int) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x0046DDF2, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // click(int,int,int) - MOV word ptr [ECX + 0x952844],SI
    build_patch(0x0046DDF9, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // click(int,int,int) - MOV dword ptr [ECX + 0x95282c],0x0
    build_patch(0x0046DE00, std::vector<uint8_t>{0xC7, 0x81, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0046DFB9, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x0046DFBF, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // click(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0046DFCE, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x0046DFE0, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x0046DFEB, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // click(int,int,int) - MOV word ptr [EDX*0x2 + 0x95283c],BX
    build_patch(0x0046DFF3, std::vector<uint8_t>{0x66, 0x89, 0x1C, 0x55, 0x3C, 0x28, 0x95, 0x00}, -1, new_VEH_addr + 0x1DE);
    // click(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x0046DFFD, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // click(int,int,int) - MOV word ptr [EDX*0x2 + 0x952844],CX
    build_patch(0x0046E009, std::vector<uint8_t>{0x66, 0x89, 0x0C, 0x55, 0x44, 0x28, 0x95, 0x00}, -1, new_VEH_addr + 0x1E6);
    // click(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0046E011, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x0046E01D, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x0046E02D, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // click(int,int,int) - MOV word ptr [EAX + 0x952844],CX
    build_patch(0x0046E034, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // click(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0046E03B, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x0046E047, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // click(int,int,int) - MOV byte ptr [EAX + 0x95283a],0x0
    build_patch(0x0046E04D, std::vector<uint8_t>{0xC6, 0x80, 0x3A, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x12);
    // click(int,int,int) - MOV byte ptr [EAX + 0x95283b],0x0
    build_patch(0x0046E054, std::vector<uint8_t>{0xC6, 0x80, 0x3B, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x13);
    // click(int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x0046E907, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // on_mouse_move(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0046F157, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // on_mouse_move(int,int) - MOV CL,byte ptr [EAX + 0x95283a]
    build_patch(0x0046F182, std::vector<uint8_t>{0x8A, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV word ptr [ECX*0x2 + 0x95283c],DX
    build_patch(0x0046F18C, std::vector<uint8_t>{0x66, 0x89, 0x14, 0x4D, 0x3C, 0x28, 0x95, 0x00}, -1, new_VEH_addr + 0x1DE);
    // on_mouse_move(int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x0046F19A, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV word ptr [EDX*0x2 + 0x952844],CX
    build_patch(0x0046F1A2, std::vector<uint8_t>{0x66, 0x89, 0x0C, 0x55, 0x44, 0x28, 0x95, 0x00}, -1, new_VEH_addr + 0x1E6);
    // on_mouse_move(int,int) - TEST dword ptr [EAX + 0x95282c],0x2000000
    build_patch(0x0046F1B5, std::vector<uint8_t>{0xF7, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x02}, 2, new_VEH_addr + 0x4);
    // on_mouse_move(int,int) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x0046F1C1, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // on_mouse_move(int,int) - MOV word ptr [EAX + 0x952844],DI
    build_patch(0x0046F1C8, std::vector<uint8_t>{0x66, 0x89, 0xB8, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // on_mouse_move(int,int) - MOV byte ptr [EAX + 0x95283a],0x0
    build_patch(0x0046F1CF, std::vector<uint8_t>{0xC6, 0x80, 0x3A, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0046F1D6, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // on_mouse_move(int,int) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x0046F1F8, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // on_mouse_move(int,int) - MOV CL,byte ptr [EAX + 0x95283a]
    build_patch(0x0046F20E, std::vector<uint8_t>{0x8A, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x0046F223, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV AX,word ptr [EAX*0x2 + 0x95283a]
    build_patch(0x0046F251, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x45, 0x3A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV AX,word ptr [ECX + 0x952828]
    build_patch(0x0046F25E, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_mouse_move(int,int) - MOV AX,word ptr [EAX*0x2 + 0x952842]
    build_patch(0x0046F278, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x45, 0x42, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1A);
    // on_mouse_move(int,int) - MOV AX,word ptr [ECX + 0x95282a]
    build_patch(0x0046F282, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // on_mouse_move(int,int) - MOV DL,byte ptr [ECX + 0x95283a]
    build_patch(0x0046F291, std::vector<uint8_t>{0x8A, 0x91, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV AX,word ptr [EAX*0x2 + 0x95283a]
    build_patch(0x0046F2B2, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x45, 0x3A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x12);
    // on_mouse_move(int,int) - MOV AX,word ptr [ECX + 0x952828]
    build_patch(0x0046F2BF, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_mouse_move(int,int) - MOV AX,word ptr [EDX*0x2 + 0x952842]
    build_patch(0x0046F2D6, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x55, 0x42, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1A);
    // on_mouse_move(int,int) - MOV AX,word ptr [EAX + 0x95282a]
    build_patch(0x0046F2E3, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // on_selected(int,int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x00471B07, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // draw(int) - TEST byte ptr [ECX*0x4 + 0x96c9f8],0x8
    build_patch(0x00479590, std::vector<uint8_t>{0xF6, 0x04, 0x8D, 0xF8, 0xC9, 0x96, 0x00, 0x08}, -1, new_VEH_addr + 0x18108);
    // prepare_game(void) - MOV dword ptr [ESI*0x4 + 0x96c9e8],EDX
    build_patch(0x004830AF, std::vector<uint8_t>{0x89, 0x14, 0xB5, 0xE8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F4);
    // on_redraw(void) - MOV EAX,dword ptr [EDX*0x4 + 0x96cd48]
    build_patch(0x00483D75, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x48, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18454);
    // draw_tech(int,RECT_*,int) - CMP EDI,0x952828
    build_patch(0x00485DF1, std::vector<uint8_t>{0x81, 0xFF, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // pick(int,int,int,char_*) - CMP EDI,0x952828
    build_patch(0x00486D72, std::vector<uint8_t>{0x81, 0xFF, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // on_redraw(void) - MOV EAX,dword ptr [ECX*0x4 + 0x96c9e0]
    build_patch(0x0048AFCB, std::vector<uint8_t>{0x8B, 0x04, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // on_redraw(void) - MOV EAX,dword ptr [ECX*0x4 + 0x96c9e0]
    build_patch(0x0048B189, std::vector<uint8_t>{0x8B, 0x04, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // veh_sprite_click(int) - MOV DL,byte ptr [EAX + 0x952839]
    build_patch(0x0048CF78, std::vector<uint8_t>{0x8A, 0x90, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_sprite_click(int) - TEST dword ptr [EAX + 0x95282c],0x8004200
    build_patch(0x0048CF82, std::vector<uint8_t>{0xF7, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x42, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // veh_sprite_double_click(int) - MOV DL,byte ptr [EAX + 0x952839]
    build_patch(0x0048D038, std::vector<uint8_t>{0x8A, 0x90, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_sprite_double_click(int) - TEST dword ptr [EAX + 0x95282c],0x8004200
    build_patch(0x0048D042, std::vector<uint8_t>{0xF7, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x42, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // veh_pick(int,char_*,int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x0048D181, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_pick(int,char_*,int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x0048D197, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_pick(int,char_*,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0048D1D1, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_pick(int,char_*,int) - MOVSX ESI,word ptr [EDI + 0x952858]
    build_patch(0x0048D21F, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // on_left_click(int,int) - MOV EAX,dword ptr [EDX*0x4 + 0x96cdac]
    build_patch(0x00496EBB, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // on_left_click(int,int) - MOV CL,byte ptr [ECX + 0x94a379]
    build_patch(0x00497644, std::vector<uint8_t>{0x8A, 0x89, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // on_left_click(int,int) - MOV CL,byte ptr [ECX + 0x94a379]
    build_patch(0x004978C4, std::vector<uint8_t>{0x8A, 0x89, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // draw_labs(void) - MOV ECX,dword ptr [EBX + 0x96cda8]
    build_patch(0x00498D64, std::vector<uint8_t>{0x8B, 0x8B, 0xA8, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B4);
    // draw_labs(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00498DFC, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV ECX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00498E2D, std::vector<uint8_t>{0x8B, 0x8B, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV ECX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00498F0F, std::vector<uint8_t>{0x8B, 0x8B, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00498F30, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EAX,dword ptr [EBX + 0x96cd48]
    build_patch(0x00498F4A, std::vector<uint8_t>{0x8B, 0x83, 0x48, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18454);
    // draw_labs(void) - MOV ECX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00498FD1, std::vector<uint8_t>{0x8B, 0x8B, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EDX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00499010, std::vector<uint8_t>{0x8B, 0x93, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x0049904B, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00499182, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EDX,dword ptr [EBX + 0x96cdac]
    build_patch(0x00499204, std::vector<uint8_t>{0x8B, 0x93, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV EAX,dword ptr [EBX + 0x96cdac]
    build_patch(0x004992DF, std::vector<uint8_t>{0x8B, 0x83, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - MOV ECX,dword ptr [EBX + 0x96cdac]
    build_patch(0x004993A4, std::vector<uint8_t>{0x8B, 0x8B, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_labs(void) - CMP EDI,0x952828
    build_patch(0x0049A48D, std::vector<uint8_t>{0x81, 0xFF, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // draw_energy(void) - MOV EAX,dword ptr [EAX + 0x96cc00]
    build_patch(0x0049C09E, std::vector<uint8_t>{0x8B, 0x80, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // draw_energy(void) - MOV ECX,dword ptr [EAX + 0x96caa0]
    build_patch(0x0049C4FA, std::vector<uint8_t>{0x8B, 0x88, 0xA0, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181AC);
    // draw_energy(void) - MOV EDX,dword ptr [ECX + 0x96caa0]
    build_patch(0x0049C5FB, std::vector<uint8_t>{0x8B, 0x91, 0xA0, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181AC);
    // draw_energy(void) - MOV EDX,dword ptr [ECX + 0x96caa4]
    build_patch(0x0049C7F7, std::vector<uint8_t>{0x8B, 0x91, 0xA4, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181B4);
    // draw_energy(void) - MOV AL,byte ptr [ECX + 0x96c9f8]
    build_patch(0x0049C840, std::vector<uint8_t>{0x8A, 0x81, 0xF8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18108);
    // draw_energy(void) - MOV EAX,dword ptr [ECX + 0x96caa4]
    build_patch(0x0049C871, std::vector<uint8_t>{0x8B, 0x81, 0xA4, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181B4);
    // draw_energy(void) - MOV EAX,dword ptr [ECX + 0x96caa0]
    build_patch(0x0049C88E, std::vector<uint8_t>{0x8B, 0x81, 0xA0, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181AC);
    // draw_energy(void) - MOV EAX,dword ptr [ECX + 0x96caa4]
    build_patch(0x0049C95F, std::vector<uint8_t>{0x8B, 0x81, 0xA4, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181B4);
    // draw_energy(void) - MOV EAX,dword ptr [ECX + 0x96caa4]
    build_patch(0x0049C97C, std::vector<uint8_t>{0x8B, 0x81, 0xA4, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181B4);
    // draw_energy(void) - MOV EAX,dword ptr [EDX + 0x96cac4]
    build_patch(0x0049C988, std::vector<uint8_t>{0x8B, 0x82, 0xC4, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181D4);
    // draw_energy(void) - MOV ECX,dword ptr [EAX + 0x96caa4]
    build_patch(0x0049C9A5, std::vector<uint8_t>{0x8B, 0x88, 0xA4, 0xCA, 0x96, 0x00}, -1, new_VEH_addr + 0x181B4);
    // draw_ops(void) - MOV EDX,dword ptr [EAX*0x4 + 0x96da3c]
    build_patch(0x0049D6E8, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0x3C, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - LEA EAX,[EAX*0x4 + 0x96da3c]
    build_patch(0x0049D6F1, std::vector<uint8_t>{0x8D, 0x04, 0x85, 0x3C, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - MOV dword ptr [EBP + -0x20],EAX
    build_patch(0x0049D6F8, std::vector<uint8_t>{0x89, 0x45, 0xE0}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - MOV ECX,dword ptr [EAX*0x4 + 0x96da3c]
    build_patch(0x0049D71C, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0x3C, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - LEA EAX,[EAX*0x4 + 0x96da3c]
    build_patch(0x0049D725, std::vector<uint8_t>{0x8D, 0x04, 0x85, 0x3C, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - MOV dword ptr [EBP + -0x20],EAX
    build_patch(0x0049D72C, std::vector<uint8_t>{0x89, 0x45, 0xE0}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - MOV EAX,dword ptr [ECX]
    build_patch(0x0049D75A, std::vector<uint8_t>{0x8B, 0x01}, -1, new_VEH_addr + 0x19148);
    // draw_ops(void) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x0049EA1E, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // draw_ops(void) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x0049EA32, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // draw_ops(void) - MOVSX EDI,word ptr [EDI + 0x952858]
    build_patch(0x0049EAAB, std::vector<uint8_t>{0x0F, 0xBF, 0xBF, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // draw_security(void) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x004A0AB1, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // draw_security(void) - CMP BL,byte ptr [ECX + EAX*0x1 + 0x96d438]
    build_patch(0x004A0B19, std::vector<uint8_t>{0x3A, 0x9C, 0x01, 0x38, 0xD4, 0x96, 0x00}, -1, new_VEH_addr + 0x18B44);
    // draw_security(void) - MOVSX EDX,word ptr [EDX*0x2 + 0x96d638]
    build_patch(0x004A0B25, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x55, 0x38, 0xD6, 0x96, 0x00}, -1, new_VEH_addr + 0x18D44);
    // draw_security(void) - CMP BL,byte ptr [ECX + EAX*0x1 + 0x96d238]
    build_patch(0x004A0B33, std::vector<uint8_t>{0x3A, 0x9C, 0x01, 0x38, 0xD2, 0x96, 0x00}, -1, new_VEH_addr + 0x18944);
    // draw_security(void) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x004A0C68, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // draw_security(void) - CMP AL,byte ptr [EBX + ECX*0x1 + 0x96d438]
    build_patch(0x004A0CE1, std::vector<uint8_t>{0x3A, 0x84, 0x0B, 0x38, 0xD4, 0x96, 0x00}, -1, new_VEH_addr + 0x18B44);
    // draw_security(void) - CMP AL,byte ptr [EBX + ECX*0x1 + 0x96d238]
    build_patch(0x004A0CEC, std::vector<uint8_t>{0x3A, 0x84, 0x0B, 0x38, 0xD2, 0x96, 0x00}, -1, new_VEH_addr + 0x18944);
    // draw_security(void) - MOV AL,byte ptr [EDX + EAX*0x1 + 0x96d238]
    build_patch(0x004A0F57, std::vector<uint8_t>{0x8A, 0x84, 0x02, 0x38, 0xD2, 0x96, 0x00}, -1, new_VEH_addr + 0x18944);
    // draw_security(void) - MOV AL,byte ptr [ECX + EDX*0x1 + 0x96d438]
    build_patch(0x004A0FE5, std::vector<uint8_t>{0x8A, 0x84, 0x11, 0x38, 0xD4, 0x96, 0x00}, -1, new_VEH_addr + 0x18B44);
    // draw_score(void) - TEST dword ptr [EDX*0x4 + 0x96c9e0],0x100000
    build_patch(0x004A15D8, std::vector<uint8_t>{0xF7, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00, 0x00, 0x00, 0x10, 0x00}, -1, new_VEH_addr + 0x180EC);
    // draw_intel(void) - TEST byte ptr [EAX*0x4 + 0x96c9f8],0x1
    build_patch(0x004A23DA, std::vector<uint8_t>{0xF6, 0x04, 0x85, 0xF8, 0xC9, 0x96, 0x00, 0x01}, -1, new_VEH_addr + 0x18100);
    // draw_intel(void) - MOV EAX,dword ptr [EDX*0x4 + 0x96c9f8]
    build_patch(0x004A261A, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xF8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18100);
    // draw_intel(void) - MOV EAX,dword ptr [EDI + 0x96cdbc]
    build_patch(0x004A2856, std::vector<uint8_t>{0x8B, 0x87, 0xBC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184C8);
    // draw_intel(void) - MOV EAX,dword ptr [EDI + 0x96cdc0]
    build_patch(0x004A297A, std::vector<uint8_t>{0x8B, 0x87, 0xC0, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184CC);
    // draw_intel(void) - MOV EAX,dword ptr [EDI + 0x96cdc4]
    build_patch(0x004A29B9, std::vector<uint8_t>{0x8B, 0x87, 0xC4, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D0);
    // draw_intel(void) - MOV EAX,dword ptr [EDI + 0x96cdc8]
    build_patch(0x004A2A08, std::vector<uint8_t>{0x8B, 0x87, 0xC8, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D4);
    // draw_intel(void) - MOV EAX,dword ptr [EDI + 0x96cdcc]
    build_patch(0x004A2A57, std::vector<uint8_t>{0x8B, 0x87, 0xCC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D8);
    // draw_intel(void) - MOV EAX,dword ptr [EDX + 0x96cc00]
    build_patch(0x004A2E06, std::vector<uint8_t>{0x8B, 0x82, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // draw_intel(void) - MOV EAX,dword ptr [EDX + 0x96cdac]
    build_patch(0x004A2EEA, std::vector<uint8_t>{0x8B, 0x82, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // draw_intel(void) - LEA ECX,[EAX + 0x96cc08]
    build_patch(0x004A3059, std::vector<uint8_t>{0x8D, 0x88, 0x08, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x18314);
    // draw_intel(void) - MOV dword ptr [EBP + -0x8],ECX
    build_patch(0x004A305F, std::vector<uint8_t>{0x89, 0x4D, 0xF8}, -1, new_VEH_addr + 0x18314);
    // draw_intel(void) - MOV EDI,dword ptr [ECX]
    build_patch(0x004A30DB, std::vector<uint8_t>{0x8B, 0x39}, -1, new_VEH_addr + 0x18314);
    // draw_intel(void) - MOV dword ptr [EBP + -0x8],EBX
    build_patch(0x004A316A, std::vector<uint8_t>{0x89, 0x5D, 0xF8}, -1, new_VEH_addr + 0x18318);
    // draw_intel(void) - LEA EDX,[EAX + 0x96c9fc]
    build_patch(0x004A3189, std::vector<uint8_t>{0x8D, 0x90, 0xFC, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18108);
    // draw_intel(void) - MOV dword ptr [EBP + -0x14],EDX
    build_patch(0x004A3192, std::vector<uint8_t>{0x89, 0x55, 0xEC}, -1, new_VEH_addr + 0x18108);
    // draw_intel(void) - LEA EDX,[EAX*0x4 + 0x96c9fc]
    build_patch(0x004A31A5, std::vector<uint8_t>{0x8D, 0x14, 0x85, 0xFC, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18108);
    // draw_intel(void) - MOV dword ptr [EBP + -0x4],EDX
    build_patch(0x004A31AC, std::vector<uint8_t>{0x89, 0x55, 0xFC}, -1, new_VEH_addr + 0x18108);
    // draw_intel(void) - MOV EAX,dword ptr [EAX]
    build_patch(0x004A31BB, std::vector<uint8_t>{0x8B, 0x00}, -1, new_VEH_addr + 0x18108);
    // draw_intel(void) - TEST byte ptr [EDX],0x1
    build_patch(0x004A31E9, std::vector<uint8_t>{0xF6, 0x02, 0x01}, -1, new_VEH_addr + 0x18108);
    // draw_intel(void) - MOV dword ptr [EBP + -0x4],EDX
    build_patch(0x004A344C, std::vector<uint8_t>{0x89, 0x55, 0xFC}, -1, new_VEH_addr + 0x1810C);
    // draw_intel(void) - MOV dword ptr [EBP + -0x14],EBX
    build_patch(0x004A344F, std::vector<uint8_t>{0x89, 0x5D, 0xEC}, -1, new_VEH_addr + 0x1810C);
    // on_status(int) - MOV EAX,dword ptr [EDX*0x4 + 0x96cdac]
    build_patch(0x004A427B, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xAC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184B8);
    // on_iface_selected(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004A6174, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // on_iface_selected(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004A618A, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // on_iface_selected(int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x004A61A6, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // on_iface_button_clicked(int) - MOV CL,byte ptr [ESI + 0x94a379]
    build_patch(0x004A680E, std::vector<uint8_t>{0x8A, 0x8E, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // on_iface_button_clicked(int) - MOV ESI,0x95282c
    build_patch(0x004A68AE, std::vector<uint8_t>{0xBE, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV AL,byte ptr [ESI + 0xa]
    build_patch(0x004A68B8, std::vector<uint8_t>{0x8A, 0x46, 0x0A}, -1, new_VEH_addr + 0xE);
    // on_iface_button_clicked(int) - MOVSX EDX,word ptr [ESI + 0x6]
    build_patch(0x004A68C3, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0x06}, -1, new_VEH_addr + 0xA);
    // on_iface_button_clicked(int) - MOV byte ptr [ESI + 0xd],AL
    build_patch(0x004A68D8, std::vector<uint8_t>{0x88, 0x46, 0x0D}, -1, new_VEH_addr + 0x11);
    // on_iface_button_clicked(int) - MOV EAX,dword ptr [ESI]
    build_patch(0x004A68DB, std::vector<uint8_t>{0x8B, 0x06}, -1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV dword ptr [ESI],EAX
    build_patch(0x004A68E3, std::vector<uint8_t>{0x89, 0x06}, -1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV byte ptr [ESI + 0x22],0x0
    build_patch(0x004A68E5, std::vector<uint8_t>{0xC6, 0x46, 0x22, 0x00}, -1, new_VEH_addr + 0x26);
    // on_iface_button_clicked(int) - MOV EDX,dword ptr [ESI]
    build_patch(0x004A68E9, std::vector<uint8_t>{0x8B, 0x16}, -1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV dword ptr [ESI],EDX
    build_patch(0x004A68EE, std::vector<uint8_t>{0x89, 0x16}, -1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV byte ptr [ESI + 0xe],0x0
    build_patch(0x004A68F0, std::vector<uint8_t>{0xC6, 0x46, 0x0E, 0x00}, -1, new_VEH_addr + 0x12);
    // on_iface_button_clicked(int) - MOV CL,byte ptr [ESI + 0x94a379]
    build_patch(0x004A6964, std::vector<uint8_t>{0x8A, 0x8E, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // on_iface_button_clicked(int) - MOV ESI,0x952832
    build_patch(0x004A6A00, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // on_iface_button_clicked(int) - MOV AL,byte ptr [ESI + 0x4]
    build_patch(0x004A6A0A, std::vector<uint8_t>{0x8A, 0x46, 0x04}, -1, new_VEH_addr + 0xE);
    // on_iface_button_clicked(int) - MOVSX EDX,word ptr [ESI]
    build_patch(0x004A6A15, std::vector<uint8_t>{0x0F, 0xBF, 0x16}, -1, new_VEH_addr + 0xA);
    // on_iface_button_clicked(int) - MOV byte ptr [ESI + 0x7],AL
    build_patch(0x004A6A29, std::vector<uint8_t>{0x88, 0x46, 0x07}, -1, new_VEH_addr + 0x11);
    // on_iface_button_clicked(int) - MOV EDX,dword ptr [ESI + -0x6]
    build_patch(0x004A6A2C, std::vector<uint8_t>{0x8B, 0x56, 0xFA}, -1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV dword ptr [ESI + -0x6],EDX
    build_patch(0x004A6A36, std::vector<uint8_t>{0x89, 0x56, 0xFA}, -1, new_VEH_addr + 0x4);
    // on_iface_button_clicked(int) - MOV byte ptr [ESI + 0x8],AL
    build_patch(0x004A6A39, std::vector<uint8_t>{0x88, 0x46, 0x08}, -1, new_VEH_addr + 0x12);
    // on_iface_button_clicked(int) - MOV BL,byte ptr [ECX + 0x94a379]
    build_patch(0x004A6AAF, std::vector<uint8_t>{0x8A, 0x99, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // draw_ops(void) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004A9873, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_ops(void) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004A9889, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_ops(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x004A98A4, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // draw_sat(void) - MOV EAX,dword ptr [EDX*0x4 + 0x96d0e4]
    build_patch(0x004AB4E2, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xE4, 0xD0, 0x96, 0x00}, -1, new_VEH_addr + 0x187EC);
    // draw_security(void) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x004AB83F, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // say_morale(char_*,int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x004B3FFB, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // say_morale(char_*,int,int) - MOV AX,word ptr [EBX + 0x952832]
    build_patch(0x004B4003, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // say_morale(char_*,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004B4069, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // say_morale(char_*,int,int) - MOVSX EAX,word ptr [EBX + 0x952856]
    build_patch(0x004B4087, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // say_morale(char_*,int,int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x004B40DE, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // say_morale(char_*,int,int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x004B40E5, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // say_morale(char_*,int,int) - MOV CX,word ptr [EBX + 0x952832]
    build_patch(0x004B41D5, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // say_morale(char_*,int,int) - MOV CX,word ptr [EBX + 0x952832]
    build_patch(0x004B4268, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // say_morale(char_*,int,int) - MOV AL,byte ptr [EBX + 0x95282c]
    build_patch(0x004B4398, std::vector<uint8_t>{0x8A, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // say_orders(char_*,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x004B43FB, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x95283b]
    build_patch(0x004B442A, std::vector<uint8_t>{0x8A, 0x86, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // say_orders(char_*,int) - MOV CL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B4430, std::vector<uint8_t>{0x8A, 0x8E, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x95284e]
    build_patch(0x004B4449, std::vector<uint8_t>{0x8A, 0x86, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [ESI + 0x952846]
    build_patch(0x004B447F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // say_orders(char_*,int) - MOVSX ECX,word ptr [ESI + 0x95283e]
    build_patch(0x004B4486, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // say_orders(char_*,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004B44EF, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // say_orders(char_*,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x004B4557, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // say_orders(char_*,int) - MOV DL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B45C1, std::vector<uint8_t>{0x8A, 0x96, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - LEA EBX,[ESI + 0x95283c]
    build_patch(0x004B45D7, std::vector<uint8_t>{0x8D, 0x9E, 0x3C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x14);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [EBX + 0x8]
    build_patch(0x004B45DD, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0x08}, -1, new_VEH_addr + 0x1C);
    // say_orders(char_*,int) - MOVSX ECX,word ptr [EBX]
    build_patch(0x004B45E1, std::vector<uint8_t>{0x0F, 0xBF, 0x0B}, -1, new_VEH_addr + 0x14);
    // say_orders(char_*,int) - MOV DL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B45F7, std::vector<uint8_t>{0x8A, 0x96, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - MOV CL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B4642, std::vector<uint8_t>{0x8A, 0x8E, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004B465B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // say_orders(char_*,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004B4669, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x004B4691, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x004B46B6, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // say_orders(char_*,int) - MOV CL,byte ptr [ESI + 0x95284e]
    build_patch(0x004B46D7, std::vector<uint8_t>{0x8A, 0x8E, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // say_orders(char_*,int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x004B46F6, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x004B46FD, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // say_orders(char_*,int) - MOVSX EDX,word ptr [ESI + 0x952856]
    build_patch(0x004B4749, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004B4767, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // say_orders(char_*,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004B476E, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // say_orders(char_*,int) - MOVSX EDX,word ptr [ESI + 0x952856]
    build_patch(0x004B4775, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004B4782, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // say_orders(char_*,int) - MOV CL,byte ptr [ESI + 0x95284e]
    build_patch(0x004B4788, std::vector<uint8_t>{0x8A, 0x8E, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // say_orders(char_*,int) - MOV DL,byte ptr [ESI + 0x952839]
    build_patch(0x004B47EC, std::vector<uint8_t>{0x8A, 0x96, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // say_orders(char_*,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x004B4809, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // say_orders(char_*,int) - MOV CL,byte ptr [ESI + 0x95283b]
    build_patch(0x004B481E, std::vector<uint8_t>{0x8A, 0x8E, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B4824, std::vector<uint8_t>{0x8A, 0x86, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - MOVSX EDX,word ptr [ESI + 0x952844]
    build_patch(0x004B4838, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [ESI + 0x95283c]
    build_patch(0x004B4842, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // say_orders(char_*,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x004B4853, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B486E, std::vector<uint8_t>{0x8A, 0x86, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - MOV CL,byte ptr [ESI + 0x95283b]
    build_patch(0x004B4874, std::vector<uint8_t>{0x8A, 0x8E, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // say_orders(char_*,int) - LEA EBX,[ESI + 0x95283e]
    build_patch(0x004B4889, std::vector<uint8_t>{0x8D, 0x9E, 0x3E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x16);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [EBX + 0x8]
    build_patch(0x004B48C6, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0x08}, -1, new_VEH_addr + 0x1E);
    // say_orders(char_*,int) - MOVSX ECX,word ptr [EBX]
    build_patch(0x004B48CA, std::vector<uint8_t>{0x0F, 0xBF, 0x0B}, -1, new_VEH_addr + 0x16);
    // say_orders(char_*,int) - MOV DL,byte ptr [ESI + 0x95283a]
    build_patch(0x004B48E0, std::vector<uint8_t>{0x8A, 0x96, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // say_orders(char_*,int) - CMP byte ptr [ESI + 0x952839],0x19
    build_patch(0x004B48F4, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x19}, 2, new_VEH_addr + 0x11);
    // say_orders(char_*,int) - MOVSX EAX,word ptr [ESI + 0x95283c]
    build_patch(0x004B4908, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // say_orders(char_*,int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x004B492E, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // say_orders(char_*,int) - MOVSX ECX,word ptr [ESI + 0x952844]
    build_patch(0x004B4947, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // say_orders(char_*,int) - MOVSX EDX,word ptr [ESI + 0x95283c]
    build_patch(0x004B494E, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // set_title(int) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x004B4B71, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // set_title(int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x004B4B78, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_title(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004B4B7F, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_my_dest(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004B4C1C, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_my_dest(int) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x004B4C33, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // draw_my_dest(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B4C4C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_my_dest(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004B4C7C, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_my_dest(int) - MOVSX EDX,word ptr [ESI + 0x952844]
    build_patch(0x004B4C83, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // draw_my_dest(int) - MOVSX EAX,word ptr [ESI + 0x95283c]
    build_patch(0x004B4C8C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // draw_my_dest(int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x004B4C93, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_my_dest(int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004B4C9C, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B4EC2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004B4F88, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004B4FED, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004B5075, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV AL,byte ptr [ESI + 0x95282c]
    build_patch(0x004B5087, std::vector<uint8_t>{0x8A, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B50AD, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004B5152, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B515F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B5176, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004B51CB, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x004B5233, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952856]
    build_patch(0x004B524A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004B52B4, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x004B52D7, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x004B5394, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B5468, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x004B5514, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_active(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004B553A, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x004B556D, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x004B557E, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_active(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004B55B8, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV AL,byte ptr [ESI + 0x95284d]
    build_patch(0x004B561A, std::vector<uint8_t>{0x8A, 0x86, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // draw_active(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004B5624, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B5663, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x004B5695, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x004B5836, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B58CA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x004B5918, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B593C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x004B598F, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_active(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004B59B3, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x004B5A2E, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // draw_active(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004B5A3E, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x004B5B1E, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - TEST byte ptr [ESI + 0x95282c],0x80
    build_patch(0x004B5B4F, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x80}, 2, new_VEH_addr + 0x4);
    // draw_active(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004B5BE4, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x004B5C4E, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // draw_active(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x004B5D69, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_active(int,int,int) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x004B5D7C, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // draw_status(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x004B667D, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_status(int,int,int,int,int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x004B6688, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_status(int,int,int,int,int) - MOV CX,word ptr [EDX + 0x95285a]
    build_patch(0x004B66E3, std::vector<uint8_t>{0x66, 0x8B, 0x8A, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // draw_status(int,int,int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004B66F8, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_status(int,int,int,int,int) - MOV CL,byte ptr [EDX + 0x952836]
    build_patch(0x004B6715, std::vector<uint8_t>{0x8A, 0x8A, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_status(int,int,int,int,int) - MOV EDX,dword ptr [ECX*0x4 + 0x96c9e0]
    build_patch(0x004B6740, std::vector<uint8_t>{0x8B, 0x14, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // draw_status(int,int,int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004B68E1, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_status(int,int,int,int,int) - MOV DX,word ptr [EAX + 0x952830]
    build_patch(0x004B68EB, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // draw_status(int,int,int,int,int) - TEST byte ptr [EAX + 0x95284f],DL
    build_patch(0x004B6908, std::vector<uint8_t>{0x84, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // draw_status(int,int,int,int,int) - MOVSX ESI,word ptr [EDX + 0x952828]
    build_patch(0x004B6933, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // draw_status(int,int,int,int,int) - MOVSX EDX,word ptr [EDX + 0x95282a]
    build_patch(0x004B693F, std::vector<uint8_t>{0x0F, 0xBF, 0x92, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // draw_status(int,int,int,int,int) - TEST dword ptr [EAX*0x4 + 0x96c9e0],0x200
    build_patch(0x004B6AB8, std::vector<uint8_t>{0xF7, 0x04, 0x85, 0xE0, 0xC9, 0x96, 0x00, 0x00, 0x02, 0x00, 0x00}, -1, new_VEH_addr + 0x180EC);
    // draw_status(int,int,int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004B81E2, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_status(int,int,int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004B81F8, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_status(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x004B8216, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // draw_status(int,int,int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004B8448, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_status(int,int,int,int,int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004B845E, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // draw_status(int,int,int,int,int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x004B8549, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // draw_status(int,int,int,int,int) - MOV CL,byte ptr [EDI + 0x952836]
    build_patch(0x004B8566, std::vector<uint8_t>{0x8A, 0x8F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // draw_status(int,int,int,int,int) - MOVSX ECX,byte ptr [EDI + 0x952839]
    build_patch(0x004B8599, std::vector<uint8_t>{0x0F, 0xBE, 0x8F, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // draw_status(int,int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004B862D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // draw_status(int,int,int,int,int) - MOV AL,byte ptr [EDI + 0x95282c]
    build_patch(0x004B863F, std::vector<uint8_t>{0x8A, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // draw_status(int,int,int,int,int) - MOVSX ESI,word ptr [EDI + 0x952858]
    build_patch(0x004B87DC, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // arrow_left(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004B89DF, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // arrow_right(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x004B8D09, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // tour(void) - MOV AX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004BC9A4, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // tour(void) - CMP word ptr [EDX*0x4 + 0x952832],0x1
    build_patch(0x004BCB18, std::vector<uint8_t>{0x66, 0x83, 0x3C, 0x95, 0x32, 0x28, 0x95, 0x00, 0x01}, 4, new_VEH_addr + 0xA);
    // tour(void) - MOV ECX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x004BCDCC, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // vehdraw_turn_start(int,int,int,int) - MOVSX EAX,byte ptr [ECX + 0x952851]
    build_patch(0x004BF938, std::vector<uint8_t>{0x0F, 0xBE, 0x81, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // vehdraw_turn_start(int,int,int,int) - MOV byte ptr [ECX + 0x952851],DL
    build_patch(0x004BF959, std::vector<uint8_t>{0x88, 0x91, 0x51, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x29);
    // vehdraw_turn_start(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004BF982, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_turn(Buffer_*,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004BFD7C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_turn(Buffer_*,int,int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004BFDBB, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // vehdraw_scoot_start(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004BFF35, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // vehdraw_scoot_start(int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004C00F9, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // vehdraw_scoot_start(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004C027E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // vehdraw_scoot(Buffer_*,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004C1214, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_scoot(Buffer_*,int,int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004C1253, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // vehdraw_draw(Buffer_*,int,int,int,int,int,int) - MOVSX ESI,word ptr [ECX + 0x952828]
    build_patch(0x004C1321, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // vehdraw_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EDI,word ptr [ECX + 0x95282a]
    build_patch(0x004C1328, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // vehdraw_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,byte ptr [EAX + 0x952851]
    build_patch(0x004C133B, std::vector<uint8_t>{0x0F, 0xBE, 0x80, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // vehdraw_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004C138A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004C16AB, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_draw(Buffer_*,int,int,int,int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004C16EA, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // vehdraw_unk1 - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x004C1794, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // vehdraw_unk1 - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x004C179B, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // vehdraw_unk1 - MOVSX EAX,byte ptr [EAX + 0x952851]
    build_patch(0x004C17A2, std::vector<uint8_t>{0x0F, 0xBE, 0x80, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // vehdraw_unk1 - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004C1A7E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_unk1 - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004C1ABD, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // vehdraw_construct_vehicle(int,Caviar_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004C1D42, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_construct_vehicle(int,Caviar_*) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x004C1D9F, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // vehdraw_construct_vehicle(int,Caviar_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004C1DCA, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // vehdraw_construct_vehicle(int,Caviar_*) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x004C1E28, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_build(int,char_*) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x004C96F7, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_build(int,char_*) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x004C96FD, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_build(int,char_*) - MOVSX EDI,word ptr [EBX + 0x952828]
    build_patch(0x004C9704, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_build(int,char_*) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x004C977C, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_build(int,char_*) - MOV AX,word ptr [EBX + 0x952830]
    build_patch(0x004C9786, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // action_build(int,char_*) - MOV AL,byte ptr [EBX + 0x95284f]
    build_patch(0x004C9798, std::vector<uint8_t>{0x8A, 0x83, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // action_build(int,char_*) - MOVSX EAX,word ptr [EBX + 0x952856]
    build_patch(0x004C98A5, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // action_build(int,char_*) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x004C98D0, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // contribution(int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004C9A6A, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // contribution(int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004C9A70, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_terraform(int,int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x004C9B20, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_terraform(int,int,int) - MOVSX EBX,word ptr [EAX + 0x952828]
    build_patch(0x004C9B27, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_terraform(int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004C9B2E, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_terraform(int,int,int) - MOV byte ptr [EDI + 0x952839],AL
    build_patch(0x004C9BED, std::vector<uint8_t>{0x88, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // action_terraform(int,int,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x004C9C79, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_terraform(int,int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x004C9D01, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // action_terraform(int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004C9D16, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // action_terraform(int,int,int) - MOVSX EAX,byte ptr [EDI + 0x952839]
    build_patch(0x004C9D4C, std::vector<uint8_t>{0x0F, 0xBE, 0x87, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // action_terraform(int,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x004C9D66, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_terraform(int,int,int) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x004C9D71, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_terraform(int,int,int) - MOV AL,byte ptr [EDI + 0x95284d]
    build_patch(0x004C9E1D, std::vector<uint8_t>{0x8A, 0x87, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOV DL,byte ptr [EDI + 0x95284d]
    build_patch(0x004C9E38, std::vector<uint8_t>{0x8A, 0x97, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - ADD byte ptr [EAX + 0x95284d],DL
    build_patch(0x004C9E3E, std::vector<uint8_t>{0x00, 0x90, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOV byte ptr [EDI + 0x95284d],0x0
    build_patch(0x004C9E44, std::vector<uint8_t>{0xC6, 0x87, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952858]
    build_patch(0x004C9E51, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // action_terraform(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004C9E72, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_terraform(int,int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x004C9E79, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_terraform(int,int,int) - MOV AL,byte ptr [EDI + 0x95284d]
    build_patch(0x004C9F1C, std::vector<uint8_t>{0x8A, 0x87, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOV DL,byte ptr [EDI + 0x952850]
    build_patch(0x004C9F46, std::vector<uint8_t>{0x8A, 0x97, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // action_terraform(int,int,int) - MOV DL,byte ptr [EDI + 0x95284d]
    build_patch(0x004C9FB7, std::vector<uint8_t>{0x8A, 0x97, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOV byte ptr [EDI + 0x95284d],DL
    build_patch(0x004C9FC7, std::vector<uint8_t>{0x88, 0x97, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x004C9FFB, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_terraform(int,int,int) - MOV byte ptr [EDI + 0x95284d],0x0
    build_patch(0x004CA03D, std::vector<uint8_t>{0xC6, 0x87, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // action_terraform(int,int,int) - MOV DX,word ptr [EDI + 0x95285a]
    build_patch(0x004CA048, std::vector<uint8_t>{0x66, 0x8B, 0x97, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // action_terraform(int,int,int) - MOV DX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004CA05D, std::vector<uint8_t>{0x66, 0x8B, 0x14, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // action_terraform(int,int,int) - MOVSX EDI,byte ptr [EAX + 0x952839]
    build_patch(0x004CA07D, std::vector<uint8_t>{0x0F, 0xBE, 0xB8, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // action_terraform(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004CA088, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_terraform(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x004CA08F, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // action_terraform(int,int,int) - MOVSX EDI,word ptr [EDX + 0x952856]
    build_patch(0x004CA29C, std::vector<uint8_t>{0x0F, 0xBF, 0xBA, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // action_terraform(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x004CA547, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_terraform(int,int,int) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x004CA723, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // action_terraform(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x004CA72D, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_destroy(int,int,int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x004CAA73, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_destroy(int,int,int,int) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x004CAA81, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_destroy(int,int,int,int) - MOV dword ptr [EDI + 0x95282c],ECX
    build_patch(0x004CAA92, std::vector<uint8_t>{0x89, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_destroy(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x004CABA0, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_destroy(int,int,int,int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x004CABA7, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_destroy(int,int,int,int) - MOVSX EBX,word ptr [EDX + 0x952828]
    build_patch(0x004CAC03, std::vector<uint8_t>{0x0F, 0xBF, 0x9A, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_destroy(int,int,int,int) - MOVSX EDX,word ptr [EDX + 0x95282a]
    build_patch(0x004CAC2E, std::vector<uint8_t>{0x0F, 0xBF, 0x92, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_destroy(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x004CAD0C, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_destroy(int,int,int,int) - MOVSX ESI,word ptr [EDI + 0x95282a]
    build_patch(0x004CAD13, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_destroy(int,int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004CAD20, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destroy(int,int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004CADF6, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destroy(int,int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004CAEF9, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destroy(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004CAF97, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destroy(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004CB0CE, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_destroy(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x004CB0D5, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_destroy(int,int,int,int) - MOV EAX,dword ptr [EDX*0x4 + 0x96c9e0]
    build_patch(0x004CB1AA, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // action_destroy(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004CB23F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destroy(int,int,int,int) - CMP word ptr [EDI + 0x952832],0xf
    build_patch(0x004CB276, std::vector<uint8_t>{0x66, 0x83, 0xBF, 0x32, 0x28, 0x95, 0x00, 0x0F}, 3, new_VEH_addr + 0xA);
    // action_destroy(int,int,int,int) - CMP word ptr [EDI + 0x952832],0xf
    build_patch(0x004CB2AD, std::vector<uint8_t>{0x66, 0x83, 0xBF, 0x32, 0x28, 0x95, 0x00, 0x0F}, 3, new_VEH_addr + 0xA);
    // action_go_to(int) - MOV DL,byte ptr [EAX + 0x952839]
    build_patch(0x004CB33D, std::vector<uint8_t>{0x8A, 0x90, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // action_go_to(int) - MOVSX EAX,word ptr [EAX + 0x95283c]
    build_patch(0x004CB348, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // action_go_to(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004CB35D, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_go_to(int) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x004CB3D6, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // action_go_to(int) - MOV CX,word ptr [EAX + 0x952828]
    build_patch(0x004CB3E1, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_go_to(int) - CMP CX,word ptr [EAX + 0x95283e]
    build_patch(0x004CB3E8, std::vector<uint8_t>{0x66, 0x3B, 0x88, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // action_go_to(int) - MOV DX,word ptr [EAX + 0x95282a]
    build_patch(0x004CB3F5, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_go_to(int) - CMP DX,word ptr [EAX + 0x952846]
    build_patch(0x004CB3FC, std::vector<uint8_t>{0x66, 0x3B, 0x90, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // action_go_to(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004CB40A, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_go_to(int) - MOV DX,word ptr [EAX + 0x952828]
    build_patch(0x004CB41D, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_go_to(int) - LEA ECX,[EAX + 0x95283c]
    build_patch(0x004CB424, std::vector<uint8_t>{0x8D, 0x88, 0x3C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x14);
    // action_go_to(int) - CMP DX,word ptr [ECX]
    build_patch(0x004CB42A, std::vector<uint8_t>{0x66, 0x3B, 0x11}, -1, new_VEH_addr + 0x14);
    // action_go_to(int) - MOV DX,word ptr [EAX + 0x95282a]
    build_patch(0x004CB433, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_go_to(int) - CMP DX,word ptr [EAX + 0x952844]
    build_patch(0x004CB43A, std::vector<uint8_t>{0x66, 0x3B, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // action_go_to(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004CB447, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_go_to(int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x004CB44E, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_go_to(int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CB462, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_go_to(int) - CMP byte ptr [EAX + 0x95283b],DL
    build_patch(0x004CB468, std::vector<uint8_t>{0x38, 0x90, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // action_go_to(int) - MOV DX,word ptr [ECX + 0x2]
    build_patch(0x004CB476, std::vector<uint8_t>{0x66, 0x8B, 0x51, 0x02}, -1, new_VEH_addr + 0x16);
    // action_go_to(int) - MOV word ptr [ECX],DX
    build_patch(0x004CB47B, std::vector<uint8_t>{0x66, 0x89, 0x11}, -1, new_VEH_addr + 0x14);
    // action_go_to(int) - MOV DX,word ptr [ECX + 0xa]
    build_patch(0x004CB47E, std::vector<uint8_t>{0x66, 0x8B, 0x51, 0x0A}, -1, new_VEH_addr + 0x1E);
    // action_go_to(int) - MOV word ptr [ECX + 0x8],DX
    build_patch(0x004CB482, std::vector<uint8_t>{0x66, 0x89, 0x51, 0x08}, -1, new_VEH_addr + 0x1C);
    // action_go_to(int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CB488, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_go_to(int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x004CB495, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // action_go_to(int) - MOV CL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CB49C, std::vector<uint8_t>{0x8A, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_go_to(int) - MOV byte ptr [EAX + 0x95283a],CL
    build_patch(0x004CB4A4, std::vector<uint8_t>{0x88, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_go_to(int) - AND dword ptr [EAX + 0x95282c],0xfdfefdff
    build_patch(0x004CB4AC, std::vector<uint8_t>{0x81, 0xA0, 0x2C, 0x28, 0x95, 0x00, 0xFF, 0xFD, 0xFE, 0xFD}, 2, new_VEH_addr + 0x4);
    // action_go_to(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004CB4B6, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_go_to(int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x004CB4CF, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_go_to(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004CB4FB, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_go_to(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x004CB509, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_go_to(int) - MOV byte ptr [EDX*0x4 + 0x952839],0x0
    build_patch(0x004CB550, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004CB5B7, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_road_to(int) - MOVSX ECX,word ptr [EAX + 0x95283c]
    build_patch(0x004CB5C0, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // action_road_to(int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x004CB5C7, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_road_to(int) - MOVSX ECX,word ptr [EAX + 0x952844]
    build_patch(0x004CB5D4, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // action_road_to(int) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x004CB5DB, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_road_to(int) - MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x004CB6E3, std::vector<uint8_t>{0x0F, 0xBE, 0x0C, 0x95, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // action_road_to(int) - MOVSX EBX,byte ptr [ECX*0x4 + 0x952839]
    build_patch(0x004CB702, std::vector<uint8_t>{0x0F, 0xBE, 0x1C, 0x8D, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV byte ptr [EAX*0x4 + 0x952839],BL
    build_patch(0x004CB71D, std::vector<uint8_t>{0x88, 0x1C, 0x85, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - MOVSX EAX,byte ptr [ECX*0x4 + 0x952839]
    build_patch(0x004CB7CE, std::vector<uint8_t>{0x0F, 0xBE, 0x04, 0x8D, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // action_road_to(int) - MOVSX EBX,byte ptr [EAX*0x4 + 0x952839]
    build_patch(0x004CB7F2, std::vector<uint8_t>{0x0F, 0xBE, 0x1C, 0x85, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV byte ptr [EDX*0x4 + 0x952839],BL
    build_patch(0x004CB80D, std::vector<uint8_t>{0x88, 0x1C, 0x95, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - CMP byte ptr [ECX*0x4 + 0x952839],0x1c
    build_patch(0x004CB81F, std::vector<uint8_t>{0x80, 0x3C, 0x8D, 0x39, 0x28, 0x95, 0x00, 0x1C}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV byte ptr [EDX*0x4 + 0x952839],0x1c
    build_patch(0x004CB8A1, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x1C}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - MOVSX EDI,byte ptr [EAX*0x4 + 0x952839]
    build_patch(0x004CB8CF, std::vector<uint8_t>{0x0F, 0xBE, 0x3C, 0x85, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV byte ptr [EAX*0x4 + 0x952839],0x0
    build_patch(0x004CB8D7, std::vector<uint8_t>{0xC6, 0x04, 0x85, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV EAX,dword ptr [EDX*0x4 + 0x95282c]
    build_patch(0x004CB917, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // action_road_to(int) - MOV byte ptr [EDX*0x4 + 0x952839],0x0
    build_patch(0x004CBA44, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // action_road_to(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004CBA5B, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_home(int,int) - MOVSX ESI,word ptr [EBX + 0x95282a]
    build_patch(0x004CBAC9, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_home(int,int) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x004CBAD0, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_home(int,int) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x004CBADF, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_home(int,int) - MOV CL,byte ptr [EBX + 0x952850]
    build_patch(0x004CBB15, std::vector<uint8_t>{0x8A, 0x8B, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // action_home(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004CBB3B, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_home(int,int) - MOV AL,byte ptr [EBX + 0x95284d]
    build_patch(0x004CBB71, std::vector<uint8_t>{0x8A, 0x83, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // action_home(int,int) - MOV CL,byte ptr [EBX + 0x952838]
    build_patch(0x004CBBCF, std::vector<uint8_t>{0x8A, 0x8B, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_home(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004CBBFD, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_home(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004CBC75, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_home(int,int) - MOV ECX,dword ptr [EBX + 0x95282c]
    build_patch(0x004CBD55, std::vector<uint8_t>{0x8B, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_home(int,int) - CMP byte ptr [EBX + 0x95284e],0xb
    build_patch(0x004CBD67, std::vector<uint8_t>{0x80, 0xBB, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // action_home(int,int) - CMP CX,word ptr [EBX + 0x95283e]
    build_patch(0x004CBD73, std::vector<uint8_t>{0x66, 0x3B, 0x8B, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // action_home(int,int) - CMP DX,word ptr [EBX + 0x952846]
    build_patch(0x004CBD80, std::vector<uint8_t>{0x66, 0x3B, 0x93, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // action_home(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004CBDC2, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_home(int,int) - MOV ESI,0x952832
    build_patch(0x004CBDFE, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // action_home(int,int) - MOV CL,byte ptr [ESI + 0x4]
    build_patch(0x004CBE08, std::vector<uint8_t>{0x8A, 0x4E, 0x04}, -1, new_VEH_addr + 0xE);
    // action_home(int,int) - MOVSX EDX,word ptr [ESI]
    build_patch(0x004CBE1C, std::vector<uint8_t>{0x0F, 0xBF, 0x16}, -1, new_VEH_addr + 0xA);
    // action_home(int,int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004CBE31, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // action_home(int,int) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x004CBE5A, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // action_home(int,int) - MOVSX EAX,word ptr [ESI + -0xa]
    build_patch(0x004CBE67, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF6}, -1, new_VEH_addr + 0x0);
    // action_home(int,int) - MOVSX EDI,word ptr [ESI + -0x8]
    build_patch(0x004CBE6E, std::vector<uint8_t>{0x0F, 0xBF, 0x7E, 0xF8}, -1, new_VEH_addr + 0x2);
    // action_home(int,int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004CBF3C, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // action_home(int,int) - MOVSX EAX,word ptr [ESI + -0x8]
    build_patch(0x004CBF53, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF8}, -1, new_VEH_addr + 0x2);
    // action_home(int,int) - MOVSX EAX,word ptr [ESI + -0xa]
    build_patch(0x004CBF5D, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF6}, -1, new_VEH_addr + 0x0);
    // action_home(int,int) - MOV CL,byte ptr [EDX + 0x952850]
    build_patch(0x004CBFA2, std::vector<uint8_t>{0x8A, 0x8A, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // action_home(int,int) - MOVSX EDX,word ptr [ESI + -0xa]
    build_patch(0x004CBFEC, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xF6}, -1, new_VEH_addr + 0x0);
    // action_home(int,int) - MOVSX EAX,word ptr [ESI + -0x8]
    build_patch(0x004CBFF0, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF8}, -1, new_VEH_addr + 0x2);
    // action_home(int,int) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x004CC1AF, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_home(int,int) - CMP byte ptr [ECX + 0x95284e],0xb
    build_patch(0x004CC1BC, std::vector<uint8_t>{0x80, 0xB9, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // action_home(int,int) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x004CC1C5, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_home(int,int) - MOVSX EDX,word ptr [ECX + 0x95283e]
    build_patch(0x004CC1CF, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // action_home(int,int) - MOVSX ECX,word ptr [ECX + 0x952846]
    build_patch(0x004CC1DA, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // action_home(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004CC220, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_home(int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004CC2B6, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_home(int,int) - MOV byte ptr [EDX + 0x952839],0x18
    build_patch(0x004CC2E5, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // action_home(int,int) - MOV word ptr [EDX + 0x95283c],AX
    build_patch(0x004CC2EC, std::vector<uint8_t>{0x66, 0x89, 0x82, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // action_home(int,int) - MOV word ptr [EDX + 0x952844],CX
    build_patch(0x004CC2F3, std::vector<uint8_t>{0x66, 0x89, 0x8A, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // action_home(int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004CC2FA, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_home(int,int) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x004CC33B, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_home(int,int) - MOV EAX,dword ptr [EDX + 0x95282c]
    build_patch(0x004CC342, std::vector<uint8_t>{0x8B, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_home(int,int) - MOV dword ptr [EDX + 0x95282c],EAX
    build_patch(0x004CC34D, std::vector<uint8_t>{0x89, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_airdrop(int,int,int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x004CC382, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_airdrop(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952828]
    build_patch(0x004CC388, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_airdrop(int,int,int,int) - MOVSX EBX,word ptr [EDI + 0x95282a]
    build_patch(0x004CC38F, std::vector<uint8_t>{0x0F, 0xBF, 0x9F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_airdrop(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004CC5B6, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_airdrop(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x004CC6C0, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_airdrop(int,int,int,int) - OR dword ptr [EAX + 0x95282c],0x20
    build_patch(0x004CCD25, std::vector<uint8_t>{0x83, 0x88, 0x2C, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x4);
    // action_airdrop(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004CCD2C, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_airdrop(int,int,int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x004CCD67, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_airdrop(int,int,int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x004CCD6E, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_airdrop(int,int,int,int) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x004CCE02, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // action_airdrop(int,int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004CCE17, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // action_airdrop(int,int,int,int) - MOVSX ESI,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x004CCE3D, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // action_airdrop(int,int,int,int) - MOV byte ptr [EDX + 0x952838],0x0
    build_patch(0x004CCF01, std::vector<uint8_t>{0xC6, 0x82, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // action_airdrop(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004CCF29, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_airdrop(int,int,int,int) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x004CCF36, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_airdrop(int,int,int,int) - MOV byte ptr [EDI + 0x952838],CL
    build_patch(0x004CCF49, std::vector<uint8_t>{0x88, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_airdrop(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004CCF4F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_airdrop(int,int,int,int) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x004CCF93, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_airdrop(int,int,int,int) - MOV byte ptr [EDI + 0x952838],CL
    build_patch(0x004CCFB2, std::vector<uint8_t>{0x88, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_arty(int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x004CD0A1, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // action_arty(int,int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x004CD0E9, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_arty(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004CD0F0, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_arty(int,int,int) - MOV DL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x004CD1E2, std::vector<uint8_t>{0x8A, 0x14, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // action_arty(int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004CD1E9, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_arty(int,int,int) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x004CD22F, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_arty(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x004CD238, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_destruct(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD307, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_destruct(int) - MOVSX EBX,word ptr [ESI + 0x952828]
    build_patch(0x004CD30E, std::vector<uint8_t>{0x0F, 0xBF, 0x9E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_destruct(int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x004CD322, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destruct(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004CD32B, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_destruct(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004CD355, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destruct(int) - ADD byte ptr [EAX + 0x952838],DL
    build_patch(0x004CD40E, std::vector<uint8_t>{0x00, 0x90, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_destruct(int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x004CD414, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // action_destruct(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004CD43E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_destruct(int) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x004CD485, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // action_destruct(int) - MOVSX ESI,word ptr [ECX + 0x952858]
    build_patch(0x004CD48F, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // action_oblit(int,int) - MOV BL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x004CD4FA, std::vector<uint8_t>{0x8A, 0x1C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // valid_patrol(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004CD6B9, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // valid_patrol(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD6C4, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004CD6FB, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD723, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD771, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD7C6, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004CD7D4, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD80C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004CD819, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD86F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD884, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004CD892, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // valid_patrol(int,int,int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x004CD927, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // valid_patrol(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004CD958, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // valid_patrol(int,int,int) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x004CD980, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // valid_patrol(int,int,int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x004CD996, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // valid_patrol(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x004CD9A3, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_patrol(int,int,int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x004CDA65, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // action_patrol(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CDA6C, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_patrol(int,int,int) - MOV word ptr [EDX*0x2 + 0x95283c],BX
    build_patch(0x004CDA74, std::vector<uint8_t>{0x66, 0x89, 0x1C, 0x55, 0x3C, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x14);
    // action_patrol(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CDA7E, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_patrol(int,int,int) - MOV word ptr [EDX*0x2 + 0x952844],DI
    build_patch(0x004CDA86, std::vector<uint8_t>{0x66, 0x89, 0x3C, 0x55, 0x44, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1C);
    // action_patrol(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CDA8E, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_patrol(int,int,int) - MOV byte ptr [EAX + 0x95283a],DL
    build_patch(0x004CDA96, std::vector<uint8_t>{0x88, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_patrol(int,int,int) - MOV SI,word ptr [EAX + 0x952828]
    build_patch(0x004CDA9C, std::vector<uint8_t>{0x66, 0x8B, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_patrol(int,int,int) - MOV word ptr [EDX*0x2 + 0x95283c],SI
    build_patch(0x004CDAAB, std::vector<uint8_t>{0x66, 0x89, 0x34, 0x55, 0x3C, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x14);
    // action_patrol(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x004CDAB5, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // action_patrol(int,int,int) - MOV CX,word ptr [EAX + 0x95282a]
    build_patch(0x004CDABD, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_patrol(int,int,int) - MOV word ptr [EDX*0x2 + 0x952844],CX
    build_patch(0x004CDAC4, std::vector<uint8_t>{0x66, 0x89, 0x0C, 0x55, 0x44, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1C);
    // action_patrol(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x004CDACC, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_patrol(int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x004CDAD8, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_patrol(int,int,int) - MOV byte ptr [EAX + 0x95283b],0x0
    build_patch(0x004CDADE, std::vector<uint8_t>{0xC6, 0x80, 0x3B, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x13);
    // action_tectonic(int,int,int) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x004CE22D, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_tectonic(int,int,int) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x004CE234, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_tectonic(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x004CE249, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_tectonic(int,int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x004CE27E, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_tectonic(int,int,int) - TEST byte ptr [EDX*0x4 + 0x96c9e1],0x2
    build_patch(0x004CE2A7, std::vector<uint8_t>{0xF6, 0x04, 0x95, 0xE1, 0xC9, 0x96, 0x00, 0x02}, -1, new_VEH_addr + 0x180ED);
    // action_tectonic(int,int,int) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x004CE31B, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_tectonic(int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x004CE498, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // action_tectonic(int,int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x004CE5A9, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_tectonic(int,int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x004CE5E3, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_tectonic(int,int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x004CE61D, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_tectonic(int,int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x004CE679, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // FUN_004ce6b0 - MOV EBX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x004CE73E, std::vector<uint8_t>{0x8B, 0x1C, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // action_fungal(int,int,int) - MOV BL,byte ptr [ESI + 0x952836]
    build_patch(0x004CE7BA, std::vector<uint8_t>{0x8A, 0x9E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_fungal(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x004CE7C5, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_fungal(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004CE7CC, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_fungal(int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x004CE95F, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // action_fungal(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004CEA1B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_fungal(int,int,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x004CEB46, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_fungal(int,int,int) - TEST byte ptr [EDX*0x4 + 0x96c9e1],0x2
    build_patch(0x004CEB69, std::vector<uint8_t>{0xF6, 0x04, 0x95, 0xE1, 0xC9, 0x96, 0x00, 0x02}, -1, new_VEH_addr + 0x180ED);
    // action_fungal(int,int,int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x004CEC29, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // action_fungal(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004CED04, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_fungal(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004CED40, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_fungal(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004CED7A, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_give(int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004CEDF9, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_give(int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004CEE00, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_give(int,int) - MOV BL,byte ptr [ESI + 0x952836]
    build_patch(0x004CEE07, std::vector<uint8_t>{0x8A, 0x9E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_give(int,int) - MOV CX,word ptr [ESI + 0x95285a]
    build_patch(0x004CEE21, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // action_give(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004CEE36, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // action_give(int,int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x004CEE58, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // action_give(int,int) - MOVSX ECX,word ptr [ESI + 0x95283c]
    build_patch(0x004CEE65, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // action_give(int,int) - MOV AX,word ptr [ESI + 0x952832]
    build_patch(0x004CEE7D, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004CEEBE, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004CEF1D, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004CEF8D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX EDI,word ptr [ESI + 0x952832]
    build_patch(0x004CEFF0, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX EDI,word ptr [ESI + 0x952832]
    build_patch(0x004CF02D, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004CF059, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOV byte ptr [ESI + 0x952836],DL
    build_patch(0x004CF08C, std::vector<uint8_t>{0x88, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_give(int,int) - MOV word ptr [ESI + 0x952832],BX
    build_patch(0x004CF092, std::vector<uint8_t>{0x66, 0x89, 0x9E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x004CF09C, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // action_give(int,int) - MOV EBX,dword ptr [ESI + 0x95282c]
    build_patch(0x004CF0A3, std::vector<uint8_t>{0x8B, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_give(int,int) - MOV dword ptr [ESI + 0x95282c],EBX
    build_patch(0x004CF0B0, std::vector<uint8_t>{0x89, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // action_give(int,int) - MOV word ptr [ESI + 0x952856],AX
    build_patch(0x004CF0CA, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // action_give(int,int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x004CF11D, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // action_give(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004CF153, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_give(int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004CF29F, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // action_gate(int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004CF395, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_gate(int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x004CF39C, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action_gate(int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004CF454, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // action_gate(int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004CF45A, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // action_gate(int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004CF461, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // action(int) - MOV AL,byte ptr [ESI*0x4 + 0x952839]
    build_patch(0x004CF74D, std::vector<uint8_t>{0x8A, 0x04, 0xB5, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // action(int) - TEST byte ptr [ESI*0x4 + 0x952839],0x40
    build_patch(0x004CF79A, std::vector<uint8_t>{0xF6, 0x04, 0xB5, 0x39, 0x28, 0x95, 0x00, 0x40}, 3, new_VEH_addr + 0x11);
    // action(int) - MOV byte ptr [ESI*0x4 + 0x952839],0x0
    build_patch(0x004CF7A4, std::vector<uint8_t>{0xC6, 0x04, 0xB5, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // new_base(int) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x004CF7DD, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // new_base(int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x004CF7E4, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // new_base(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004CF7EB, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // new_base(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004CF7F4, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // new_base(int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D0030, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // wait(int) - MOV ECX,dword ptr [EAX*0x4 + 0x95282c]
    build_patch(0x004D04B9, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // wait(int) - MOV dword ptr [EAX*0x4 + 0x95282c],ECX
    build_patch(0x004D04C3, std::vector<uint8_t>{0x89, 0x0C, 0x85, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // unload(int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D0523, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // unload(int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D0557, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // unload(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004D0583, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // unload(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x004D0599, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // unload(int) - CMP byte ptr [ECX*0x4 + 0x952839],0x1
    build_patch(0x004D05B7, std::vector<uint8_t>{0x80, 0x3C, 0x8D, 0x39, 0x28, 0x95, 0x00, 0x01}, 3, new_VEH_addr + 0x11);
    // unload(int) - MOV byte ptr [ECX*0x4 + 0x952839],0x0
    build_patch(0x004D05C2, std::vector<uint8_t>{0xC6, 0x04, 0x8D, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // unload(int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D05DB, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // unload(int) - MOV CL,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x004D061F, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // unload(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x004D063C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // upgrade(int) - MOV CL,byte ptr [EAX + 0x952850]
    build_patch(0x004D0784, std::vector<uint8_t>{0x8A, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // upgrade(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004D0792, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // upgrade(int) - MOV BL,byte ptr [EAX + 0x952836]
    build_patch(0x004D084A, std::vector<uint8_t>{0x8A, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // upgrade(int) - MOV CL,byte ptr [EAX + 0x952850]
    build_patch(0x004D0922, std::vector<uint8_t>{0x8A, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // upgrade(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004D09D8, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0A25, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0A44, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0A87, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D0B24, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0B82, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0BE5, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0C3F, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV AX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0CA8, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EBX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D0D39, std::vector<uint8_t>{0x0F, 0xBF, 0x1C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D0DC9, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D0DF5, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV ECX,dword ptr [EAX*0x4 + 0x96c9e4]
    build_patch(0x004D1110, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // upgrade(int) - CMP ESI,dword ptr [EDX*0x4 + 0x96cc00]
    build_patch(0x004D1170, std::vector<uint8_t>{0x3B, 0x34, 0x95, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // upgrade(int) - MOVSX ESI,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D11ED, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV word ptr [EAX*0x4 + 0x952832],DI
    build_patch(0x004D11FC, std::vector<uint8_t>{0x66, 0x89, 0x3C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D14E6, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D152D, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D154C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D1591, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D16CE, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D17B8, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV word ptr [ECX*0x4 + 0x952832],AX
    build_patch(0x004D17D6, std::vector<uint8_t>{0x66, 0x89, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D17FF, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV AL,byte ptr [ECX*0x4 + 0x95284c]
    build_patch(0x004D181F, std::vector<uint8_t>{0x8A, 0x04, 0x8D, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOV byte ptr [ECX*0x4 + 0x95284c],AL
    build_patch(0x004D1837, std::vector<uint8_t>{0x88, 0x04, 0x8D, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D1861, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV CL,byte ptr [EDX*0x4 + 0x95284c]
    build_patch(0x004D1881, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOV byte ptr [EDX*0x4 + 0x95284c],CL
    build_patch(0x004D1895, std::vector<uint8_t>{0x88, 0x0C, 0x95, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOV byte ptr [EDX*0x4 + 0x95284c],CL
    build_patch(0x004D18A0, std::vector<uint8_t>{0x88, 0x0C, 0x95, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004D18C0, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // upgrade(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D18C7, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // upgrade(int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D1984, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV word ptr [ECX*0x4 + 0x952832],AX
    build_patch(0x004D19A2, std::vector<uint8_t>{0x66, 0x89, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D19CB, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV AL,byte ptr [ECX*0x4 + 0x95284c]
    build_patch(0x004D19EB, std::vector<uint8_t>{0x8A, 0x04, 0x8D, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOV byte ptr [ECX*0x4 + 0x95284c],AL
    build_patch(0x004D1A03, std::vector<uint8_t>{0x88, 0x04, 0x8D, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D1A2D, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // upgrade(int) - MOV CL,byte ptr [EDX*0x4 + 0x95284c]
    build_patch(0x004D1A4D, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOV byte ptr [EDX*0x4 + 0x95284c],CL
    build_patch(0x004D1A61, std::vector<uint8_t>{0x88, 0x0C, 0x95, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOV byte ptr [EDX*0x4 + 0x95284c],CL
    build_patch(0x004D1A6C, std::vector<uint8_t>{0x88, 0x0C, 0x95, 0x4C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x24);
    // upgrade(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004D1A8C, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // upgrade(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D1A93, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // sentry(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x004D2237, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // sentry(int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004D225C, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // sentry(int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D226A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // sentry(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D22CB, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // sentry(int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x004D22F5, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // sentry(int,int) - MOVSX ESI,word ptr [ECX + 0x952828]
    build_patch(0x004D2303, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // sentry(int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x004D234D, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // sentry(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x004D2362, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // sentry(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x004D2382, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // sentry(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x004D23B1, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // sentry(int,int) - MOV word ptr [EDX*0x4 + 0x952844],CX
    build_patch(0x004D245B, std::vector<uint8_t>{0x66, 0x89, 0x0C, 0x95, 0x44, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1C);
    // sentry(int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004D249B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // sentry(int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D24A2, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // hold(int,int) - MOVSX EDI,word ptr [ECX + 0x95282a]
    build_patch(0x004D24F8, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // hold(int,int) - MOVSX ESI,word ptr [ECX + 0x952828]
    build_patch(0x004D24FF, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // hold(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D252D, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // hold(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D256A, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // hold(int,int) - MOV word ptr [ECX + 0x952844],AX
    build_patch(0x004D25D1, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // hold(int,int) - MOV byte ptr [ECX + 0x952839],BL
    build_patch(0x004D25D8, std::vector<uint8_t>{0x88, 0x99, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // hold(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D2623, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // hold(int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004D2675, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // give_veh(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004D26DC, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // give_veh(int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x004D26EA, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // give_veh(int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x004D26F1, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // give_veh(int) - MOV SI,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D2744, std::vector<uint8_t>{0x66, 0x8B, 0x34, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_veh(int) - MOV DX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D2787, std::vector<uint8_t>{0x66, 0x8B, 0x14, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_veh(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D2889, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_veh(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D296C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_veh(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D29B3, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_veh(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D2A0B, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // disband(int) - TEST byte ptr [EDX*0x4 + 0x952830],0x20
    build_patch(0x004D2AD2, std::vector<uint8_t>{0xF6, 0x04, 0x95, 0x30, 0x28, 0x95, 0x00, 0x20}, 3, new_VEH_addr + 0x8);
    // disband(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004D2B3A, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // disband(int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x004D2B69, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // disband(int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x004D2B70, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // disband(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D2B97, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // disband(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x004D2C04, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // disband(int) - MOV SI,word ptr [EAX + 0x952832]
    build_patch(0x004D2CBB, std::vector<uint8_t>{0x66, 0x8B, 0xB0, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // disband(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004D2D0D, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // disband(int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D2D29, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // activate(int,int,int) - CMP byte ptr [ECX + 0x952839],BL
    build_patch(0x004D3112, std::vector<uint8_t>{0x38, 0x99, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // activate(int,int,int) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x004D311A, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // activate(int,int,int) - CMP byte ptr [ECX + 0x952839],0x2
    build_patch(0x004D3145, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // activate(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D3165, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // activate(int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x004D31C4, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // activate(int,int,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x004D3246, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // activate(int,int,int) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x004D3254, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // activate(int,int,int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x004D325B, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // activate(int,int,int) - CMP byte ptr [EAX + 0x952839],BL
    build_patch(0x004D32E5, std::vector<uint8_t>{0x38, 0x98, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // activate(int,int,int) - TEST dword ptr [EAX + 0x95282c],0x8004200
    build_patch(0x004D32ED, std::vector<uint8_t>{0xF7, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x42, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // activate(int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004D332F, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // activate(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D3336, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // activate(int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004D3375, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // activate(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D337C, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // terraform(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x004D34B6, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // terraform(int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x004D3521, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // terraform(int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x004D3528, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // terraform(int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D37FA, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // terraform(int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004D3F95, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // terraform(int,int) - CMP byte ptr [EAX + 0x952839],0x12
    build_patch(0x004D3F9F, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x12}, 2, new_VEH_addr + 0x11);
    // terraform(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x004D3FAC, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // terraform(int,int) - MOV byte ptr [ECX*0x4 + 0x952839],DL
    build_patch(0x004D4F1F, std::vector<uint8_t>{0x88, 0x14, 0x8D, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // terraform(int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952850]
    build_patch(0x004D4F61, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x50, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x28);
    // destroy(int) - MOVSX ESI,word ptr [ECX + 0x95282a]
    build_patch(0x004D5517, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // destroy(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x004D551E, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // destroy(int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x004D552D, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // destroy(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D555D, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // oblit(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004D5D44, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // oblit(int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x004D5D4A, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // oblit(int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x004D5D51, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x952828],DX
    build_patch(0x004D647A, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x95282a],CX
    build_patch(0x004D6481, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // go_to(int,int,int) - MOV dword ptr [EAX + 0x95282c],EBX
    build_patch(0x004D6488, std::vector<uint8_t>{0x89, 0x98, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // go_to(int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x004D6506, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // go_to(int,int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x004D650C, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // go_to(int,int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x004D6513, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // go_to(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x004D651A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_to(int,int,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x004D655E, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_to(int,int,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x004D6C3C, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_to(int,int,int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x004D6CCC, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // go_to(int,int,int) - MOVSX ECX,word ptr [EAX + 0x95283c]
    build_patch(0x004D6D87, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // go_to(int,int,int) - MOVSX EDX,word ptr [EAX + 0x952844]
    build_patch(0x004D6D8E, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // go_to(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004D6D9B, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // go_to(int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004D732D, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_to(int,int,int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x004D7395, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // go_to(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004D73E3, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_to(int,int,int) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x004D740A, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // go_to(int,int,int) - MOVSX EAX,word ptr [EDX + 0x952856]
    build_patch(0x004D77BB, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // go_to(int,int,int) - CMP DX,word ptr [EAX + 0x952828]
    build_patch(0x004D7987, std::vector<uint8_t>{0x66, 0x3B, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // go_to(int,int,int) - CMP DX,word ptr [EAX + 0x95282a]
    build_patch(0x004D7997, std::vector<uint8_t>{0x66, 0x3B, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // go_to(int,int,int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x004D7A3D, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // go_to(int,int,int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x004D7A4C, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // go_to(int,int,int) - MOV byte ptr [EAX + 0x95284e],0xa
    build_patch(0x004D7A55, std::vector<uint8_t>{0xC6, 0x80, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x95283e],DX
    build_patch(0x004D7A6C, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x952846],DX
    build_patch(0x004D7A7A, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // go_to(int,int,int) - MOV byte ptr [EAX + 0x952839],BL
    build_patch(0x004D7A8C, std::vector<uint8_t>{0x88, 0x98, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x004D7AA4, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x004D7AB2, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // go_to(int,int,int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x004D7AB9, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // go_to(int,int,int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x004D7AC5, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x004D7AEA, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // go_to(int,int,int) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x004D7AF8, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // road_to(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D7BF0, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // road_to(int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x004D7C5D, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // road_to(int,int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x004D7C6B, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // road_to(int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x004D7CB6, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // designate(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D7CFC, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // designate(int) - XOR dword ptr [ECX*0x4 + 0x95282c],0x80
    build_patch(0x004D7D4C, std::vector<uint8_t>{0x81, 0x34, 0x8D, 0x2C, 0x28, 0x95, 0x00, 0x80, 0x00, 0x00, 0x00}, 3, new_VEH_addr + 0x4);
    // designate(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D7D76, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // designate(int) - TEST byte ptr [EDX*0x4 + 0x95282c],0x80
    build_patch(0x004D7DA8, std::vector<uint8_t>{0xF6, 0x04, 0x95, 0x2C, 0x28, 0x95, 0x00, 0x80}, 3, new_VEH_addr + 0x4);
    // go_home(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004D7E11, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // go_home(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D7E18, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // go_home(int) - CMP DL,byte ptr [EAX + 0x952836]
    build_patch(0x004D7E4B, std::vector<uint8_t>{0x3A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // go_home(int) - MOVSX EDI,word ptr [EAX + 0x952856]
    build_patch(0x004D7E55, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // go_home(int) - MOV word ptr [EAX + 0x952856],SI
    build_patch(0x004D7E5C, std::vector<uint8_t>{0x66, 0x89, 0xB0, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // set_patrol(int) - MOV byte ptr [EAX*0x4 + 0x95283a],0x0
    build_patch(0x004D7EEC, std::vector<uint8_t>{0xC6, 0x04, 0x85, 0x3A, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x12);
    // use_ability(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x004D7FA3, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // use_ability(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004D7FAA, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // use_ability(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x004D7FB6, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // use_ability(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004D802B, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // use_ability(int) - MOV AL,byte ptr [EDX + 0x952850]
    build_patch(0x004D80D2, std::vector<uint8_t>{0x8A, 0x82, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // use_ability(int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x004D853C, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // use_ability(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004D868E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // use_ability(int) - TEST byte ptr [EAX + 0x95282c],0x20
    build_patch(0x004D883E, std::vector<uint8_t>{0xF6, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x4);
    // use_ability(int) - MOV CL,byte ptr [EAX + 0x952850]
    build_patch(0x004D88D3, std::vector<uint8_t>{0x8A, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // automate(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x004D8A85, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // automate(int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x004D8AD4, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // automate(int,int) - MOVSX EBX,word ptr [ECX + 0x952828]
    build_patch(0x004D8ADB, std::vector<uint8_t>{0x0F, 0xBF, 0x99, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // automate(int,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x004D8B13, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // automate(int,int) - MOV DX,word ptr [ECX + 0x952828]
    build_patch(0x004D8B5E, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // automate(int,int) - MOV word ptr [ECX + 0x95283e],DX
    build_patch(0x004D8B65, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // automate(int,int) - MOV DX,word ptr [ECX + 0x95282a]
    build_patch(0x004D8B6C, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // automate(int,int) - MOV word ptr [ECX + 0x952846],DX
    build_patch(0x004D8B73, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // automate(int,int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x004D8B7A, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // automate(int,int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x004D8BB9, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // automate(int,int) - MOV DX,word ptr [ECX + 0x95283c]
    build_patch(0x004D8BC2, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // automate(int,int) - MOV word ptr [ECX + 0x95283e],DX
    build_patch(0x004D8BC9, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // automate(int,int) - MOV DX,word ptr [ECX + 0x952844]
    build_patch(0x004D8BD0, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // automate(int,int) - MOV word ptr [ECX + 0x952846],DX
    build_patch(0x004D8BD7, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // automate(int,int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x004D8BDE, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // automate(int,int) - MOV byte ptr [ECX + 0x95284e],BL
    build_patch(0x004D8BEF, std::vector<uint8_t>{0x88, 0x99, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // automate(int,int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x004D8BF5, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // automate(int,int) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x004D8BFC, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // automate(int,int) - MOV dword ptr [ECX + 0x95282c],EDX
    build_patch(0x004D8C0B, std::vector<uint8_t>{0x89, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // automate(int,int) - MOV byte ptr [ECX + 0x95283a],0x0
    build_patch(0x004D8C11, std::vector<uint8_t>{0xC6, 0x81, 0x3A, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x12);
    // automate(int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x004D8C45, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // automate(int,int) - MOVSX EDI,word ptr [ECX + 0x952828]
    build_patch(0x004D8C4F, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // automate(int,int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x004D8CAD, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // set_bombing_run(int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x004D8CF8, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // set_bombing_run(int,int,int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x004D8D54, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // set_bombing_run(int,int,int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x004D8D63, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // set_bombing_run(int,int,int) - MOV byte ptr [EAX + 0x95284e],0xa
    build_patch(0x004D8D69, std::vector<uint8_t>{0xC6, 0x80, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // set_bombing_run(int,int,int) - MOV word ptr [EAX + 0x95283e],DI
    build_patch(0x004D8D70, std::vector<uint8_t>{0x66, 0x89, 0xB8, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // set_bombing_run(int,int,int) - MOV word ptr [EAX + 0x952846],SI
    build_patch(0x004D8D77, std::vector<uint8_t>{0x66, 0x89, 0xB0, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // set_road_to(int,int,int,int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x004D8E02, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_road_to(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D8E09, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // set_road_to(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x004D8EAE, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_road_to(int,int,int,int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x004D8EB5, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // set_road_to(int,int,int,int) - MOV byte ptr [EAX + 0x952839],DL
    build_patch(0x004D8EFC, std::vector<uint8_t>{0x88, 0x90, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // set_road_to(int,int,int,int) - MOV word ptr [EAX + 0x95283c],BX
    build_patch(0x004D8F06, std::vector<uint8_t>{0x66, 0x89, 0x98, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // set_road_to(int,int,int,int) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x004D8F0D, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // explore(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x004D8F6A, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // explore(int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x004D8F71, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // explore(int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x004D8F7A, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // convoy(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004D8FD3, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // convoy(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x004D8FDA, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // convoy(int) - MOVSX ECX,word ptr [EAX + 0x952856]
    build_patch(0x004D9022, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // convoy(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x004D9034, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // convoy(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x004D903B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // convoy(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x004D9092, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // convoy(int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x004D9099, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // convoy(int) - MOVSX EDX,word ptr [EAX + 0x952856]
    build_patch(0x004D90A2, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // convoy(int) - MOV byte ptr [ECX + 0x952839],0x3
    build_patch(0x004D913E, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x03}, 2, new_VEH_addr + 0x11);
    // convoy(int) - MOV byte ptr [ECX + 0x95284e],AL
    build_patch(0x004D9145, std::vector<uint8_t>{0x88, 0x81, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // arty(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004D9184, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // arty(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004D91F0, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // arty(int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x004D91FE, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // arty(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004D9223, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // group(int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x004D92F2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // group(int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x004D92F9, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // group(int) - MOVSX EAX,word ptr [ESI + 0x952844]
    build_patch(0x004D9302, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // group(int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x004D9313, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // group(int) - MOVSX EDX,word ptr [ESI + 0x95283c]
    build_patch(0x004D931D, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // group(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x004D9334, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // group(int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x004D9345, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // group(int) - MOV EDI,0x952832
    build_patch(0x004D935B, std::vector<uint8_t>{0xBF, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // group(int) - MOV CL,byte ptr [EDI + 0x4]
    build_patch(0x004D9375, std::vector<uint8_t>{0x8A, 0x4F, 0x04}, -1, new_VEH_addr + 0xE);
    // group(int) - TEST dword ptr [EDI + -0x6],0x8000000
    build_patch(0x004D938A, std::vector<uint8_t>{0xF7, 0x47, 0xFA, 0x00, 0x00, 0x00, 0x08}, -1, new_VEH_addr + 0x4);
    // group(int) - MOVSX EAX,word ptr [EDI + -0xa]
    build_patch(0x004D9399, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xF6}, -1, new_VEH_addr + 0x0);
    // group(int) - MOVSX ECX,word ptr [EDI + -0x8]
    build_patch(0x004D93A6, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xF8}, -1, new_VEH_addr + 0x2);
    // group(int) - MOVSX EAX,word ptr [EDI + -0x8]
    build_patch(0x004D93B3, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xF8}, -1, new_VEH_addr + 0x2);
    // group(int) - MOVSX ECX,word ptr [EDI + -0xa]
    build_patch(0x004D93BE, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xF6}, -1, new_VEH_addr + 0x0);
    // group(int) - MOVSX EAX,word ptr [EDI]
    build_patch(0x004D93E0, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // group(int) - MOV AL,byte ptr [EAX + 0x94a379]
    build_patch(0x004D93FA, std::vector<uint8_t>{0x8A, 0x80, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // group(int) - MOVSX EDX,word ptr [ESI + 0x952844]
    build_patch(0x004D9428, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // group(int) - MOVSX EAX,word ptr [ESI + 0x95283c]
    build_patch(0x004D942F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // group(int) - MOVSX ECX,word ptr [EDI + -0x8]
    build_patch(0x004D943D, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xF8}, -1, new_VEH_addr + 0x2);
    // group(int) - MOVSX EDX,word ptr [EDI + -0xa]
    build_patch(0x004D9441, std::vector<uint8_t>{0x0F, 0xBF, 0x57, 0xF6}, -1, new_VEH_addr + 0x0);
    // group(int) - MOV EAX,dword ptr [EDI + -0x6]
    build_patch(0x004D9467, std::vector<uint8_t>{0x8B, 0x47, 0xFA}, -1, new_VEH_addr + 0x4);
    // group(int) - MOV dword ptr [EDI + -0x6],EAX
    build_patch(0x004D946F, std::vector<uint8_t>{0x89, 0x47, 0xFA}, -1, new_VEH_addr + 0x4);
    // group(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x004D9472, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // group(int) - MOV byte ptr [EDI + 0x7],AL
    build_patch(0x004D9478, std::vector<uint8_t>{0x88, 0x47, 0x07}, -1, new_VEH_addr + 0x11);
    // group(int) - MOV CL,byte ptr [ESI + 0x95283a]
    build_patch(0x004D947B, std::vector<uint8_t>{0x8A, 0x8E, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // group(int) - MOV byte ptr [EDI + 0x8],CL
    build_patch(0x004D9481, std::vector<uint8_t>{0x88, 0x4F, 0x08}, -1, new_VEH_addr + 0x12);
    // group(int) - MOV DL,byte ptr [ESI + 0x95283b]
    build_patch(0x004D9484, std::vector<uint8_t>{0x8A, 0x96, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // group(int) - MOV byte ptr [EDI + 0x9],DL
    build_patch(0x004D948A, std::vector<uint8_t>{0x88, 0x57, 0x09}, -1, new_VEH_addr + 0x13);
    // group(int) - LEA ECX,[EDI + 0x12]
    build_patch(0x004D948D, std::vector<uint8_t>{0x8D, 0x4F, 0x12}, -1, new_VEH_addr + 0x1C);
    // group(int) - LEA EAX,[ESI + 0x952844]
    build_patch(0x004D9490, std::vector<uint8_t>{0x8D, 0x86, 0x44, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x1C);
    // group(int) - MOV BX,word ptr [EAX + -0x8]
    build_patch(0x004D949B, std::vector<uint8_t>{0x66, 0x8B, 0x58, 0xF8}, -1, new_VEH_addr + 0x14);
    // group(int) - MOV word ptr [ECX + -0x8],BX
    build_patch(0x004D94A2, std::vector<uint8_t>{0x66, 0x89, 0x59, 0xF8}, -1, new_VEH_addr + 0x14);
    // group(int) - MOV BX,word ptr [EAX + -0x2]
    build_patch(0x004D94A6, std::vector<uint8_t>{0x66, 0x8B, 0x58, 0xFE}, -1, new_VEH_addr + 0x1C);
    // group(int) - MOV word ptr [ECX],BX
    build_patch(0x004D94AA, std::vector<uint8_t>{0x66, 0x89, 0x19}, -1, new_VEH_addr + 0x1C);
    // group(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x004D94B3, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // group(int) - MOV ECX,dword ptr [EDI + -0x6]
    build_patch(0x004D94B9, std::vector<uint8_t>{0x8B, 0x4F, 0xFA}, -1, new_VEH_addr + 0x4);
    // group(int) - MOV dword ptr [EDI + -0x6],ECX
    build_patch(0x004D94C8, std::vector<uint8_t>{0x89, 0x4F, 0xFA}, -1, new_VEH_addr + 0x4);
    // group(int) - MOV ESI,0x952836
    build_patch(0x004D9525, std::vector<uint8_t>{0xBE, 0x36, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xE);
    // group(int) - MOV DL,byte ptr [ESI]
    build_patch(0x004D9531, std::vector<uint8_t>{0x8A, 0x16}, -1, new_VEH_addr + 0xE);
    // group(int) - TEST dword ptr [ESI + -0xa],0x8000000
    build_patch(0x004D9537, std::vector<uint8_t>{0xF7, 0x46, 0xF6, 0x00, 0x00, 0x00, 0x08}, -1, new_VEH_addr + 0x4);
    // group(int) - MOVSX EAX,word ptr [ESI + -0x4]
    build_patch(0x004D9540, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xFC}, -1, new_VEH_addr + 0xA);
    // group(int) - MOV BL,byte ptr [ECX + 0x94a379]
    build_patch(0x004D9565, std::vector<uint8_t>{0x8A, 0x99, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // group(int) - MOVSX ECX,word ptr [ESI + -0xc]
    build_patch(0x004D956B, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xF4}, -1, new_VEH_addr + 0x2);
    // group(int) - MOVSX EDX,word ptr [ESI + 0xe]
    build_patch(0x004D9571, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0x0E}, -1, new_VEH_addr + 0x1C);
    // group(int) - MOVSX EAX,word ptr [ESI + 0x6]
    build_patch(0x004D9577, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x06}, -1, new_VEH_addr + 0x14);
    // group(int) - MOVSX EDX,word ptr [ESI + -0xe]
    build_patch(0x004D957B, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xF2}, -1, new_VEH_addr + 0x0);
    // assemble(void) - MOV ESI,0x952832
    build_patch(0x004D969D, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // assemble(void) - MOV AL,byte ptr [ESI + 0x4]
    build_patch(0x004D96AA, std::vector<uint8_t>{0x8A, 0x46, 0x04}, -1, new_VEH_addr + 0xE);
    // assemble(void) - MOVSX EDI,word ptr [ESI + -0x8]
    build_patch(0x004D96BF, std::vector<uint8_t>{0x0F, 0xBF, 0x7E, 0xF8}, -1, new_VEH_addr + 0x2);
    // assemble(void) - MOVSX EAX,word ptr [ESI + -0xa]
    build_patch(0x004D96D4, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF6}, -1, new_VEH_addr + 0x0);
    // assemble(void) - MOV AL,byte ptr [ESI + 0x7]
    build_patch(0x004D9726, std::vector<uint8_t>{0x8A, 0x46, 0x07}, -1, new_VEH_addr + 0x11);
    // assemble(void) - MOV EAX,dword ptr [ESI + -0x6]
    build_patch(0x004D973E, std::vector<uint8_t>{0x8B, 0x46, 0xFA}, -1, new_VEH_addr + 0x4);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D9763, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - MOV CL,byte ptr [EAX + 0x94a379]
    build_patch(0x004D977B, std::vector<uint8_t>{0x8A, 0x88, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D978E, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - CMP byte ptr [EAX + 0x94a379],0x1
    build_patch(0x004D97A6, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D97B8, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x004D97D0, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D97E2, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D9817, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D9834, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D984C, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004D9864, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // assemble(void) - MOV EAX,dword ptr [ESI + -0x6]
    build_patch(0x004D9884, std::vector<uint8_t>{0x8B, 0x46, 0xFA}, -1, new_VEH_addr + 0x4);
    // assemble(void) - MOV dword ptr [ESI + -0x6],EAX
    build_patch(0x004D988C, std::vector<uint8_t>{0x89, 0x46, 0xFA}, -1, new_VEH_addr + 0x4);
    // assemble(void) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x004D98E1, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // assemble(void) - MOV word ptr [EAX + 0x95283c],SI
    build_patch(0x004D98E8, std::vector<uint8_t>{0x66, 0x89, 0xB0, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // assemble(void) - MOV word ptr [EAX + 0x952844],CX
    build_patch(0x004D98EF, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // assemble(void) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x004D98F6, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // assemble(void) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x004D9902, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // assemble(void) - MOV EAX,0x95282c
    build_patch(0x004D9922, std::vector<uint8_t>{0xB8, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // assemble(void) - MOV DL,byte ptr [EAX + 0xa]
    build_patch(0x004D992F, std::vector<uint8_t>{0x8A, 0x50, 0x0A}, -1, new_VEH_addr + 0xE);
    // assemble(void) - TEST dword ptr [EAX],0x8000000
    build_patch(0x004D9936, std::vector<uint8_t>{0xF7, 0x00, 0x00, 0x00, 0x00, 0x08}, -1, new_VEH_addr + 0x4);
    // assemble(void) - MOV byte ptr [EAX + 0xd],0x0
    build_patch(0x004D993E, std::vector<uint8_t>{0xC6, 0x40, 0x0D, 0x00}, -1, new_VEH_addr + 0x11);
    // assemble(void) - MOV EDX,dword ptr [EAX]
    build_patch(0x004D9942, std::vector<uint8_t>{0x8B, 0x10}, -1, new_VEH_addr + 0x4);
    // assemble(void) - MOV dword ptr [EAX],EDX
    build_patch(0x004D994A, std::vector<uint8_t>{0x89, 0x10}, -1, new_VEH_addr + 0x4);
    // editor_reset_faction(void) - MOV EAX,0x95282c
    build_patch(0x004DBBEF, std::vector<uint8_t>{0xB8, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // editor_reset_faction(void) - MOV DL,byte ptr [EAX + 0xa]
    build_patch(0x004DBBF6, std::vector<uint8_t>{0x8A, 0x50, 0x0A}, -1, new_VEH_addr + 0xE);
    // editor_reset_faction(void) - MOV byte ptr [EAX + 0xd],BL
    build_patch(0x004DBBFD, std::vector<uint8_t>{0x88, 0x58, 0x0D}, -1, new_VEH_addr + 0x11);
    // editor_reset_faction(void) - MOV EDX,dword ptr [EAX]
    build_patch(0x004DBC00, std::vector<uint8_t>{0x8B, 0x10}, -1, new_VEH_addr + 0x4);
    // editor_reset_faction(void) - MOV dword ptr [EAX],EDX
    build_patch(0x004DBC08, std::vector<uint8_t>{0x89, 0x10}, -1, new_VEH_addr + 0x4);
    // editor_reset_tech(void) - CMP word ptr [EDX*0x4 + 0x952832],DI
    build_patch(0x004DBCBF, std::vector<uint8_t>{0x66, 0x39, 0x3C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x952830]
    build_patch(0x004DDAAE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x004DDBF0, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004DDC0A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // editor_edit_veh(int) - AND word ptr [ESI + 0x952830],0xf81f
    build_patch(0x004DDCCC, std::vector<uint8_t>{0x66, 0x81, 0xA6, 0x30, 0x28, 0x95, 0x00, 0x1F, 0xF8}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOV EDX,dword ptr [ESI + 0x95282c]
    build_patch(0x004DDCD5, std::vector<uint8_t>{0x8B, 0x96, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // editor_edit_veh(int) - MOV dword ptr [ESI + 0x95282c],EDX
    build_patch(0x004DDCE5, std::vector<uint8_t>{0x89, 0x96, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // editor_edit_veh(int) - OR byte ptr [ESI + 0x952830],0x20
    build_patch(0x004DDCED, std::vector<uint8_t>{0x80, 0x8E, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - OR byte ptr [ESI + 0x952830],0x80
    build_patch(0x004DDCF8, std::vector<uint8_t>{0x80, 0x8E, 0x30, 0x28, 0x95, 0x00, 0x80}, 2, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - OR word ptr [ESI + 0x952830],BX
    build_patch(0x004DDD03, std::vector<uint8_t>{0x66, 0x09, 0x9E, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - OR byte ptr [ESI + 0x952831],0x2
    build_patch(0x004DDD0E, std::vector<uint8_t>{0x80, 0x8E, 0x31, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x9);
    // editor_edit_veh(int) - OR byte ptr [ESI + 0x952830],0x40
    build_patch(0x004DDD19, std::vector<uint8_t>{0x80, 0x8E, 0x30, 0x28, 0x95, 0x00, 0x40}, 2, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - OR byte ptr [ESI + 0x952831],0x4
    build_patch(0x004DDD24, std::vector<uint8_t>{0x80, 0x8E, 0x31, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x9);
    // editor_edit_veh(int) - OR dword ptr [ESI + 0x95282c],EBX
    build_patch(0x004DDD2F, std::vector<uint8_t>{0x09, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // editor_edit_veh(int) - MOV DX,word ptr [ESI + 0x952830]
    build_patch(0x004DDD35, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004DDD47, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // editor_edit_veh(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004DDD4E, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004DDD6D, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // editor_edit_veh(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004DDD74, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // editor_edit_veh(int) - MOV AX,word ptr [ESI + 0x952832]
    build_patch(0x004DDDB9, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // editor_edit_veh(int) - MOV DL,byte ptr [ESI + 0x95284c]
    build_patch(0x004DDE5F, std::vector<uint8_t>{0x8A, 0x96, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // editor_edit_veh(int) - MOV byte ptr [ESI + 0x95284c],AL
    build_patch(0x004DDF0B, std::vector<uint8_t>{0x88, 0x86, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // editor_edit_veh(int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004DDF11, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // editor_edit_veh(int) - MOV CX,word ptr [ESI + 0x952830]
    build_patch(0x004DDF35, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOV word ptr [ESI + 0x952830],DX
    build_patch(0x004DDF52, std::vector<uint8_t>{0x66, 0x89, 0x96, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOV CX,word ptr [ESI + 0x952830]
    build_patch(0x004DDF7A, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOV word ptr [ESI + 0x952830],AX
    build_patch(0x004DDF9E, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // editor_edit_veh(int) - MOV AL,byte ptr [ESI + 0x952838]
    build_patch(0x004DDFB5, std::vector<uint8_t>{0x8A, 0x86, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // editor_edit_veh(int) - MOV AL,byte ptr [ESI + 0x952850]
    build_patch(0x004DDFEE, std::vector<uint8_t>{0x8A, 0x86, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // editor_edit_veh(int) - MOV AL,byte ptr [ESI + 0x952837]
    build_patch(0x004DE027, std::vector<uint8_t>{0x8A, 0x86, 0x37, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xF);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004DE05E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // editor_edit_veh(int) - CMP byte ptr [EAX + 0x94a37a],0x1
    build_patch(0x004DE07D, std::vector<uint8_t>{0x80, 0xB8, 0x7A, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC2);
    // editor_edit_veh(int) - MOV AL,byte ptr [ESI + 0x95284d]
    build_patch(0x004DE08B, std::vector<uint8_t>{0x8A, 0x86, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004DE0C2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // editor_edit_veh(int) - MOV CL,byte ptr [EAX + 0x94a37a]
    build_patch(0x004DE0DE, std::vector<uint8_t>{0x8A, 0x88, 0x7A, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC2);
    // editor_edit_veh(int) - MOV byte ptr [ESI + 0x952838],AL
    build_patch(0x004DE1A7, std::vector<uint8_t>{0x88, 0x86, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // editor_edit_veh(int) - MOV byte ptr [ESI + 0x952850],AL
    build_patch(0x004DE1B7, std::vector<uint8_t>{0x88, 0x86, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // editor_edit_veh(int) - MOV byte ptr [ESI + 0x952837],AL
    build_patch(0x004DE1C2, std::vector<uint8_t>{0x88, 0x86, 0x37, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xF);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004DE1CA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // editor_edit_veh(int) - CMP byte ptr [EDX + 0x94a37a],0x1
    build_patch(0x004DE1E9, std::vector<uint8_t>{0x80, 0xBA, 0x7A, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC2);
    // editor_edit_veh(int) - MOV byte ptr [ESI + 0x95284d],AL
    build_patch(0x004DE1FF, std::vector<uint8_t>{0x88, 0x86, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004DE211, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // editor_edit_veh(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004DE218, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // editor_edit_veh(int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004DE2A9, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // editor_edit_veh(int) - MOV byte ptr [ESI + 0x952836],AL
    build_patch(0x004DE36E, std::vector<uint8_t>{0x88, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // editor_edit_veh(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x004DE3F0, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // editor_edit_veh(int) - MOV AX,word ptr [ESI + 0x952856]
    build_patch(0x004DE417, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // editor_edit_veh(int) - MOV word ptr [ESI + 0x952856],AX
    build_patch(0x004DE649, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // editor_edit_veh(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x004DE650, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // editor_edit_veh(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x004DE657, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // editor_kill_veh(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x004DE9BE, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // editor_veh(void) - MOV byte ptr [ESI + 0x95284c],DL
    build_patch(0x004DF1C4, std::vector<uint8_t>{0x88, 0x96, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // editor_veh(void) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004DF1CA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // editor_veh(void) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x004DF1FE, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // editor_tech(void) - MOV dword ptr [EAX*0x4 + 0x96cd3c],EDI
    build_patch(0x004DFD61, std::vector<uint8_t>{0x89, 0x3C, 0x85, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // editor_tech(void) - MOV EBX,dword ptr [EAX*0x4 + 0x96cd3c]
    build_patch(0x004DFD8C, std::vector<uint8_t>{0x8B, 0x1C, 0x85, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // editor_tech(void) - MOV dword ptr [EAX*0x4 + 0x96cd3c],EBX
    build_patch(0x004DFD97, std::vector<uint8_t>{0x89, 0x1C, 0x85, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // editor_tech(void) - MOV dword ptr [EAX*0x4 + 0x96cd3c],EDX
    build_patch(0x004DFDA3, std::vector<uint8_t>{0x89, 0x14, 0x85, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // corner_the_market(void) - MOV EAX,dword ptr [ESI + 0x96cc00]
    build_patch(0x004E2135, std::vector<uint8_t>{0x8B, 0x86, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // corner_the_market(void) - SUB dword ptr [ESI + 0x96cc00],EBX
    build_patch(0x004E21BA, std::vector<uint8_t>{0x29, 0x9E, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // base_first(int) - MOV CL,byte ptr [EDX + 0x94a379]
    build_patch(0x004E4B34, std::vector<uint8_t>{0x8A, 0x8A, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // base_kill(int) - ADD ECX,0x952856
    build_patch(0x004E53EA, std::vector<uint8_t>{0x81, 0xC1, 0x56, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2E);
    // base_kill(int) - MOV EAX,0x952856
    build_patch(0x004E55C3, std::vector<uint8_t>{0xB8, 0x56, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2E);
    // base_kill(int) - MOV DX,word ptr [EAX]
    build_patch(0x004E55CA, std::vector<uint8_t>{0x66, 0x8B, 0x10}, -1, new_VEH_addr + 0x2E);
    // base_kill(int) - MOV word ptr [EAX],DX
    build_patch(0x004E55D8, std::vector<uint8_t>{0x66, 0x89, 0x10}, -1, new_VEH_addr + 0x2E);
    // base_kill(int) - MOV EBX,0x95282a
    build_patch(0x004E5849, std::vector<uint8_t>{0xBB, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // base_kill(int) - MOVSX EAX,word ptr [EBX + 0x8]
    build_patch(0x004E584E, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0x08}, -1, new_VEH_addr + 0xA);
    // base_kill(int) - MOVSX EAX,word ptr [EBX + -0x2]
    build_patch(0x004E585E, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0xFE}, -1, new_VEH_addr + 0x0);
    // base_kill(int) - MOVSX ESI,word ptr [EBX]
    build_patch(0x004E5865, std::vector<uint8_t>{0x0F, 0xBF, 0x33}, -1, new_VEH_addr + 0x2);
    // base_kill(int) - ADD ESI,0x95282a
    build_patch(0x004E58D7, std::vector<uint8_t>{0x81, 0xC6, 0x2A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2);
    // base_kill(int) - MOV CL,byte ptr [EAX + 0x94a379]
    build_patch(0x004E58F2, std::vector<uint8_t>{0x8A, 0x88, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // base_kill(int) - ADD ESI,0x95282a
    build_patch(0x004E5989, std::vector<uint8_t>{0x81, 0xC6, 0x2A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2);
    // base_kill(int) - CMP byte ptr [EAX + 0x94a379],0x1
    build_patch(0x004E59A4, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // farm_compute(void) - MOV SI,word ptr [ESI + 0x95285a]
    build_patch(0x004E6AAC, std::vector<uint8_t>{0x66, 0x8B, 0xB6, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // farm_compute(void) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x004E6AC2, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // farm_compute(void) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x004E6ADC, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // farm_compute(void) - MOV DX,word ptr [ESI + 0x952830]
    build_patch(0x004E6AEC, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // farm_compute(void) - TEST byte ptr [ESI + 0x95284f],DL
    build_patch(0x004E6B07, std::vector<uint8_t>{0x84, 0x96, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // farm_compute(void) - MOVSX ESI,word ptr [ESI + 0x952858]
    build_patch(0x004E6B38, std::vector<uint8_t>{0x0F, 0xBF, 0xB6, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // farm_compute(void) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x004E6B85, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // base_support(void) - MOV ESI,0x95284e
    build_patch(0x004E9602, std::vector<uint8_t>{0xBE, 0x4E, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x26);
    // base_support(void) - MOV DL,byte ptr [ESI + -0x18]
    build_patch(0x004E9611, std::vector<uint8_t>{0x8A, 0x56, 0xE8}, -1, new_VEH_addr + 0xE);
    // base_support(void) - MOV CX,word ptr [ESI + 0x8]
    build_patch(0x004E961C, std::vector<uint8_t>{0x66, 0x8B, 0x4E, 0x08}, -1, new_VEH_addr + 0x2E);
    // base_support(void) - MOVSX EAX,word ptr [ESI + -0x1c]
    build_patch(0x004E962B, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - MOV DX,word ptr [ESI + -0x26]
    build_patch(0x004E9645, std::vector<uint8_t>{0x66, 0x8B, 0x56, 0xDA}, -1, new_VEH_addr + 0x0);
    // base_support(void) - MOV AX,word ptr [ESI + -0x24]
    build_patch(0x004E9652, std::vector<uint8_t>{0x66, 0x8B, 0x46, 0xDC}, -1, new_VEH_addr + 0x2);
    // base_support(void) - CMP byte ptr [ESI + -0x15],0x3
    build_patch(0x004E9660, std::vector<uint8_t>{0x80, 0x7E, 0xEB, 0x03}, -1, new_VEH_addr + 0x11);
    // base_support(void) - MOV AL,byte ptr [ESI]
    build_patch(0x004E9675, std::vector<uint8_t>{0x8A, 0x06}, -1, new_VEH_addr + 0x26);
    // base_support(void) - MOVSX ECX,word ptr [ESI + -0x24]
    build_patch(0x004E9697, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xDC}, -1, new_VEH_addr + 0x2);
    // base_support(void) - MOVSX EDX,word ptr [ESI + -0x26]
    build_patch(0x004E969B, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xDA}, -1, new_VEH_addr + 0x0);
    // base_support(void) - CMP byte ptr [ESI + -0x15],0x3
    build_patch(0x004E96D2, std::vector<uint8_t>{0x80, 0x7E, 0xEB, 0x03}, -1, new_VEH_addr + 0x11);
    // base_support(void) - MOV AL,byte ptr [ESI]
    build_patch(0x004E96DA, std::vector<uint8_t>{0x8A, 0x06}, -1, new_VEH_addr + 0x26);
    // base_support(void) - MOV CL,byte ptr [ESI]
    build_patch(0x004E9736, std::vector<uint8_t>{0x8A, 0x0E}, -1, new_VEH_addr + 0x26);
    // base_support(void) - MOV DX,word ptr [ESI + -0x1c]
    build_patch(0x004E973F, std::vector<uint8_t>{0x66, 0x8B, 0x56, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - AND dword ptr [ESI + -0x22],0xff9fffef
    build_patch(0x004E97A9, std::vector<uint8_t>{0x81, 0x66, 0xDE, 0xEF, 0xFF, 0x9F, 0xFF}, -1, new_VEH_addr + 0x4);
    // base_support(void) - MOVSX ECX,word ptr [ESI + -0x1c]
    build_patch(0x004E97B0, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - CMP byte ptr [ESI + -0x15],0x3
    build_patch(0x004E97C6, std::vector<uint8_t>{0x80, 0x7E, 0xEB, 0x03}, -1, new_VEH_addr + 0x11);
    // base_support(void) - MOVSX EAX,word ptr [ESI + -0x24]
    build_patch(0x004E97CC, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xDC}, -1, new_VEH_addr + 0x2);
    // base_support(void) - MOVSX EBX,word ptr [ESI + -0x26]
    build_patch(0x004E97D7, std::vector<uint8_t>{0x0F, 0xBF, 0x5E, 0xDA}, -1, new_VEH_addr + 0x0);
    // base_support(void) - MOV AL,byte ptr [ESI]
    build_patch(0x004E9805, std::vector<uint8_t>{0x8A, 0x06}, -1, new_VEH_addr + 0x26);
    // base_support(void) - MOV CX,word ptr [ESI + -0x1c]
    build_patch(0x004E982D, std::vector<uint8_t>{0x66, 0x8B, 0x4E, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - MOVSX EAX,word ptr [ESI + -0x24]
    build_patch(0x004E985C, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xDC}, -1, new_VEH_addr + 0x2);
    // base_support(void) - MOVSX EDX,word ptr [ESI + -0x26]
    build_patch(0x004E9867, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xDA}, -1, new_VEH_addr + 0x0);
    // base_support(void) - MOV EDX,dword ptr [ESI + -0x22]
    build_patch(0x004E98EE, std::vector<uint8_t>{0x8B, 0x56, 0xDE}, -1, new_VEH_addr + 0x4);
    // base_support(void) - MOV dword ptr [ESI + -0x22],EDX
    build_patch(0x004E9910, std::vector<uint8_t>{0x89, 0x56, 0xDE}, -1, new_VEH_addr + 0x4);
    // base_support(void) - MOVSX ECX,word ptr [ESI + -0x1c]
    build_patch(0x004E993E, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - MOVSX EAX,word ptr [ESI + -0x1c]
    build_patch(0x004E99B8, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - MOVSX ECX,word ptr [ESI + -0x24]
    build_patch(0x004E99DC, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xDC}, -1, new_VEH_addr + 0x2);
    // base_support(void) - MOVSX EDX,word ptr [ESI + -0x26]
    build_patch(0x004E99E0, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xDA}, -1, new_VEH_addr + 0x0);
    // base_support(void) - MOVSX EAX,word ptr [ESI + -0x1c]
    build_patch(0x004E9A2A, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xE4}, -1, new_VEH_addr + 0xA);
    // base_support(void) - CMP byte ptr [EDX + 0x94a379],0x2
    build_patch(0x004E9A45, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // base_support(void) - MOV EAX,dword ptr [ESI + -0x22]
    build_patch(0x004E9ACC, std::vector<uint8_t>{0x8B, 0x46, 0xDE}, -1, new_VEH_addr + 0x4);
    // base_support(void) - MOV EAX,dword ptr [ESI + -0x22]
    build_patch(0x004E9B20, std::vector<uint8_t>{0x8B, 0x46, 0xDE}, -1, new_VEH_addr + 0x4);
    // base_support(void) - MOV dword ptr [ESI + -0x22],EAX
    build_patch(0x004E9B28, std::vector<uint8_t>{0x89, 0x46, 0xDE}, -1, new_VEH_addr + 0x4);
    // base_psych(void) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004EAF00, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_psych(void) - MOV CX,word ptr [EDI + 0x952832]
    build_patch(0x004EAF37, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_psych(void) - MOVSX EAX,word ptr [EDI + 0x952858]
    build_patch(0x004EAF88, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // base_psych(void) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x004EAFF6, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_psych(void) - MOV SI,word ptr [EDI + 0x952832]
    build_patch(0x004EB055, std::vector<uint8_t>{0x66, 0x8B, 0xB7, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_growth(void) - MOV ECX,0x952832
    build_patch(0x004EF22A, std::vector<uint8_t>{0xB9, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // base_growth(void) - MOVSX EAX,word ptr [ECX + 0x24]
    build_patch(0x004EF232, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0x24}, -1, new_VEH_addr + 0x2E);
    // base_growth(void) - MOVSX EAX,word ptr [ECX]
    build_patch(0x004EF23E, std::vector<uint8_t>{0x0F, 0xBF, 0x01}, -1, new_VEH_addr + 0xA);
    // base_growth(void) - CMP byte ptr [ECX + 0x7],0x3
    build_patch(0x004EF251, std::vector<uint8_t>{0x80, 0x79, 0x07, 0x03}, -1, new_VEH_addr + 0x11);
    // base_growth(void) - MOV AL,byte ptr [ECX + 0x1c]
    build_patch(0x004EF257, std::vector<uint8_t>{0x8A, 0x41, 0x1C}, -1, new_VEH_addr + 0x26);
    // base_growth(void) - MOVSX EAX,word ptr [ECX + -0x8]
    build_patch(0x004EF25E, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0xF8}, -1, new_VEH_addr + 0x2);
    // base_growth(void) - MOVSX EBX,word ptr [ECX + -0xa]
    build_patch(0x004EF262, std::vector<uint8_t>{0x0F, 0xBF, 0x59, 0xF6}, -1, new_VEH_addr + 0x0);
    // base_growth(void) - MOV byte ptr [ECX + 0x7],0x0
    build_patch(0x004EF28E, std::vector<uint8_t>{0xC6, 0x41, 0x07, 0x00}, -1, new_VEH_addr + 0x11);
    // do_upgrade(int,int,int) - MOV EDI,0x95284c
    build_patch(0x004EFBB7, std::vector<uint8_t>{0xBF, 0x4C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x24);
    // do_upgrade(int,int,int) - MOV DL,byte ptr [EDI + -0x16]
    build_patch(0x004EFBC1, std::vector<uint8_t>{0x8A, 0x57, 0xEA}, -1, new_VEH_addr + 0xE);
    // do_upgrade(int,int,int) - MOVSX ECX,word ptr [EDI + -0x1a]
    build_patch(0x004EFBCC, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xE6}, -1, new_VEH_addr + 0xA);
    // do_upgrade(int,int,int) - MOV word ptr [EDI + -0x1a],BX
    build_patch(0x004EFBFA, std::vector<uint8_t>{0x66, 0x89, 0x5F, 0xE6}, -1, new_VEH_addr + 0xA);
    // do_upgrade(int,int,int) - MOV AL,byte ptr [EDI]
    build_patch(0x004EFC26, std::vector<uint8_t>{0x8A, 0x07}, -1, new_VEH_addr + 0x24);
    // do_upgrade(int,int,int) - MOV byte ptr [EDI],AL
    build_patch(0x004EFC39, std::vector<uint8_t>{0x88, 0x07}, -1, new_VEH_addr + 0x24);
    // do_upgrade(int,int,int) - MOV AL,byte ptr [EDI]
    build_patch(0x004EFC64, std::vector<uint8_t>{0x8A, 0x07}, -1, new_VEH_addr + 0x24);
    // do_upgrade(int,int,int) - MOV byte ptr [EDI],AL
    build_patch(0x004EFC77, std::vector<uint8_t>{0x88, 0x07}, -1, new_VEH_addr + 0x24);
    // upgrade_prototype(int,int,int,int) - MOV ECX,dword ptr [EAX*0x4 + 0x96c9e4]
    build_patch(0x004EFF27, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // upgrade_prototype(int,int,int,int) - CMP ECX,dword ptr [EAX*0x4 + 0x96cc00]
    build_patch(0x004EFF73, std::vector<uint8_t>{0x3B, 0x0C, 0x85, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // base_production(void) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x004F118B, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_production(void) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x004F1194, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_production(void) - MOV byte ptr [EAX + 0x95284e],0x0
    build_patch(0x004F119A, std::vector<uint8_t>{0xC6, 0x80, 0x4E, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x26);
    // base_production(void) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x004F11D5, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_production(void) - LEA EAX,[EAX + 0x95282c]
    build_patch(0x004F11DB, std::vector<uint8_t>{0x8D, 0x80, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_production(void) - MOV dword ptr [EAX],ECX
    build_patch(0x004F11E7, std::vector<uint8_t>{0x89, 0x08}, -1, new_VEH_addr + 0x4);
    // base_production(void) - MOV byte ptr [ESI + 0x95284c],AL
    build_patch(0x004F13C5, std::vector<uint8_t>{0x88, 0x86, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // base_production(void) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x004F13CB, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_production(void) - MOV dword ptr [ESI + 0x95282c],ECX
    build_patch(0x004F13DB, std::vector<uint8_t>{0x89, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_production(void) - OR byte ptr [ESI + 0x952831],0x10
    build_patch(0x004F13E3, std::vector<uint8_t>{0x80, 0x8E, 0x31, 0x28, 0x95, 0x00, 0x10}, 2, new_VEH_addr + 0x9);
    // base_production(void) - MOV word ptr [ESI + 0x952856],BX
    build_patch(0x004F145F, std::vector<uint8_t>{0x66, 0x89, 0x9E, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // base_production(void) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x004F2200, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_production(void) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x004F2213, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // base_production(void) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x004F221E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // base_hurry(void) - SUB EAX,dword ptr [EDX*0x4 + 0x96c9e4]
    build_patch(0x004F4729, std::vector<uint8_t>{0x2B, 0x04, 0x95, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // base_check_support(void) - MOV EDI,0x952856
    build_patch(0x004F4876, std::vector<uint8_t>{0xBF, 0x56, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2E);
    // base_check_support(void) - MOV AL,byte ptr [EDI + -0x20]
    build_patch(0x004F487B, std::vector<uint8_t>{0x8A, 0x47, 0xE0}, -1, new_VEH_addr + 0xE);
    // base_check_support(void) - MOVSX ECX,word ptr [EDI]
    build_patch(0x004F4889, std::vector<uint8_t>{0x0F, 0xBF, 0x0F}, -1, new_VEH_addr + 0x2E);
    // base_check_support(void) - MOVSX EAX,word ptr [EDI + -0x24]
    build_patch(0x004F4898, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xDC}, -1, new_VEH_addr + 0xA);
    // base_check_support(void) - CMP byte ptr [EDI + -0x1d],0x3
    build_patch(0x004F48AD, std::vector<uint8_t>{0x80, 0x7F, 0xE3, 0x03}, -1, new_VEH_addr + 0x11);
    // base_check_support(void) - CMP byte ptr [EDI + -0x8],0x1
    build_patch(0x004F48B7, std::vector<uint8_t>{0x80, 0x7F, 0xF8, 0x01}, -1, new_VEH_addr + 0x26);
    // base_check_support(void) - MOVSX EAX,word ptr [EDI + -0x2c]
    build_patch(0x004F48C1, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xD4}, -1, new_VEH_addr + 0x2);
    // base_check_support(void) - MOVSX ECX,word ptr [EDI + -0x2e]
    build_patch(0x004F48CC, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xD2}, -1, new_VEH_addr + 0x0);
    // base_check_support(void) - TEST byte ptr [EDI + -0x2a],0x10
    build_patch(0x004F490E, std::vector<uint8_t>{0xF6, 0x47, 0xD6, 0x10}, -1, new_VEH_addr + 0x4);
    // base_check_support(void) - MOVSX EAX,word ptr [EDI + -0x2e]
    build_patch(0x004F4923, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xD2}, -1, new_VEH_addr + 0x0);
    // base_check_support(void) - MOVSX ESI,word ptr [EDI + -0x2c]
    build_patch(0x004F492B, std::vector<uint8_t>{0x0F, 0xBF, 0x77, 0xD4}, -1, new_VEH_addr + 0x2);
    // base_check_support(void) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x004F49D6, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_check_support(void) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x004F49F6, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // base_check_support(void) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x004F4A60, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_check_support(void) - MOV EBX,dword ptr [ESI + 0x95282c]
    build_patch(0x004F4AC3, std::vector<uint8_t>{0x8B, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_check_support(void) - MOV dword ptr [ESI + 0x95282c],EBX
    build_patch(0x004F4AD1, std::vector<uint8_t>{0x89, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // base_check_support(void) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x004F4AE7, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_check_support(void) - MOV EDI,0x95282c
    build_patch(0x004F4C12, std::vector<uint8_t>{0xBF, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // base_check_support(void) - MOV DL,byte ptr [EDI + 0xa]
    build_patch(0x004F4C1C, std::vector<uint8_t>{0x8A, 0x57, 0x0A}, -1, new_VEH_addr + 0xE);
    // base_check_support(void) - MOVSX EAX,word ptr [EDI + 0x2a]
    build_patch(0x004F4C27, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0x2A}, -1, new_VEH_addr + 0x2E);
    // base_check_support(void) - MOV EAX,dword ptr [EDI]
    build_patch(0x004F4C37, std::vector<uint8_t>{0x8B, 0x07}, -1, new_VEH_addr + 0x4);
    // base_check_support(void) - MOV AL,byte ptr [EDI + 0xf]
    build_patch(0x004F4C7A, std::vector<uint8_t>{0x8A, 0x47, 0x0F}, -1, new_VEH_addr + 0x13);
    // base_check_support(void) - MOV CL,byte ptr [EDI + 0xe]
    build_patch(0x004F4C7D, std::vector<uint8_t>{0x8A, 0x4F, 0x0E}, -1, new_VEH_addr + 0x12);
    // base_check_support(void) - MOV AL,byte ptr [EDI + 0x22]
    build_patch(0x004F4C88, std::vector<uint8_t>{0x8A, 0x47, 0x22}, -1, new_VEH_addr + 0x26);
    // base_check_support(void) - MOVSX ESI,word ptr [EDI + -0x2]
    build_patch(0x004F4CC8, std::vector<uint8_t>{0x0F, 0xBF, 0x77, 0xFE}, -1, new_VEH_addr + 0x2);
    // base_check_support(void) - MOVSX EAX,word ptr [EDI + -0x4]
    build_patch(0x004F4CD3, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xFC}, -1, new_VEH_addr + 0x0);
    // base_check_support(void) - MOVSX EAX,word ptr [EDI + 0x6]
    build_patch(0x004F4D08, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0x06}, -1, new_VEH_addr + 0xA);
    // base_check_support(void) - MOVSX ECX,word ptr [EDI + 0x6]
    build_patch(0x004F4D44, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0x06}, -1, new_VEH_addr + 0xA);
    // base_energy_costs(void) - MOV ECX,0x952832
    build_patch(0x004F4DFC, std::vector<uint8_t>{0xB9, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // base_energy_costs(void) - MOV AL,byte ptr [ECX + 0x4]
    build_patch(0x004F4E09, std::vector<uint8_t>{0x8A, 0x41, 0x04}, -1, new_VEH_addr + 0xE);
    // base_energy_costs(void) - MOVSX EAX,word ptr [ECX]
    build_patch(0x004F4E10, std::vector<uint8_t>{0x0F, 0xBF, 0x01}, -1, new_VEH_addr + 0xA);
    // base_energy_costs(void) - CMP byte ptr [ECX + 0x7],0x3
    build_patch(0x004F4E23, std::vector<uint8_t>{0x80, 0x79, 0x07, 0x03}, -1, new_VEH_addr + 0x11);
    // base_energy_costs(void) - CMP byte ptr [ECX + 0x1c],0x2
    build_patch(0x004F4E29, std::vector<uint8_t>{0x80, 0x79, 0x1C, 0x02}, -1, new_VEH_addr + 0x26);
    // base_energy_costs(void) - MOVSX EAX,word ptr [ECX + -0x8]
    build_patch(0x004F4E2F, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0xF8}, -1, new_VEH_addr + 0x2);
    // base_energy_costs(void) - MOVSX EDI,word ptr [ECX + -0xa]
    build_patch(0x004F4E33, std::vector<uint8_t>{0x0F, 0xBF, 0x79, 0xF6}, -1, new_VEH_addr + 0x0);
    // base_energy_costs(void) - MOV byte ptr [ECX + 0x7],0x0
    build_patch(0x004F4E5D, std::vector<uint8_t>{0xC6, 0x41, 0x07, 0x00}, -1, new_VEH_addr + 0x11);
    // drone_riot(void) - ADD ESI,0x952832
    build_patch(0x004F5919, std::vector<uint8_t>{0x81, 0xC6, 0x32, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xA);
    // drone_riot(void) - ADD EDI,0x952856
    build_patch(0x004F5A78, std::vector<uint8_t>{0x81, 0xC7, 0x56, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2E);
    // base_ecology(void) - MOV EAX,dword ptr [ECX*0x4 + 0x96c9e0]
    build_patch(0x004F6E3C, std::vector<uint8_t>{0x8B, 0x04, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // base_ecology(void) - MOV byte ptr [EAX + 0x95284e],DL
    build_patch(0x004F7419, std::vector<uint8_t>{0x88, 0x90, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // base_ecology(void) - TEST dword ptr [EDX*0x4 + 0x96c9e0],EDI
    build_patch(0x004F787E, std::vector<uint8_t>{0x85, 0x3C, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // base_ecology(void) - TEST dword ptr [EDX*0x4 + 0x96c9e0],EDI
    build_patch(0x004F7963, std::vector<uint8_t>{0x85, 0x3C, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // base_build(int,int_*,int_*,int_*) - MOV AL,byte ptr [EDX + 0x94a379]
    build_patch(0x004F8EFF, std::vector<uint8_t>{0x8A, 0x82, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // base_build(int,int_*,int_*,int_*) - MOV ECX,0x952832
    build_patch(0x004F93CA, std::vector<uint8_t>{0xB9, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOV DL,byte ptr [ECX + 0x4]
    build_patch(0x004F93DA, std::vector<uint8_t>{0x8A, 0x51, 0x04}, -1, new_VEH_addr + 0xE);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [ECX]
    build_patch(0x004F93E5, std::vector<uint8_t>{0x0F, 0xBF, 0x01}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - TEST dword ptr [ECX + -0x6],0x10000000
    build_patch(0x004F93F4, std::vector<uint8_t>{0xF7, 0x41, 0xFA, 0x00, 0x00, 0x00, 0x10}, -1, new_VEH_addr + 0x4);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [ECX + -0x8]
    build_patch(0x004F93FD, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0xF8}, -1, new_VEH_addr + 0x2);
    // base_build(int,int_*,int_*,int_*) - MOVSX EDX,word ptr [ECX + -0xa]
    build_patch(0x004F9408, std::vector<uint8_t>{0x0F, 0xBF, 0x51, 0xF6}, -1, new_VEH_addr + 0x0);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x24]
    build_patch(0x004F9440, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0x24}, -1, new_VEH_addr + 0x2E);
    // base_build(int,int_*,int_*,int_*) - MOV EDI,0x952832
    build_patch(0x004F952B, std::vector<uint8_t>{0xBF, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOV DL,byte ptr [EDI + 0x4]
    build_patch(0x004F9535, std::vector<uint8_t>{0x8A, 0x57, 0x04}, -1, new_VEH_addr + 0xE);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI]
    build_patch(0x004F9540, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOV AL,byte ptr [EDX + 0x94a379]
    build_patch(0x004F956A, std::vector<uint8_t>{0x8A, 0x82, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI]
    build_patch(0x004F95B6, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI]
    build_patch(0x004F95D0, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - TEST dword ptr [EDI + -0x6],0x10000000
    build_patch(0x004F95E4, std::vector<uint8_t>{0xF7, 0x47, 0xFA, 0x00, 0x00, 0x00, 0x10}, -1, new_VEH_addr + 0x4);
    // base_build(int,int_*,int_*,int_*) - MOVSX EDX,word ptr [EDI + 0x24]
    build_patch(0x004F9626, std::vector<uint8_t>{0x0F, 0xBF, 0x57, 0x24}, -1, new_VEH_addr + 0x2E);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI]
    build_patch(0x004F9648, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI + -0x8]
    build_patch(0x004F965D, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xF8}, -1, new_VEH_addr + 0x2);
    // base_build(int,int_*,int_*,int_*) - MOVSX ECX,word ptr [EDI + -0xa]
    build_patch(0x004F9668, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xF6}, -1, new_VEH_addr + 0x0);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI + -0x8]
    build_patch(0x004F968F, std::vector<uint8_t>{0x0F, 0xBF, 0x47, 0xF8}, -1, new_VEH_addr + 0x2);
    // base_build(int,int_*,int_*,int_*) - MOVSX ECX,word ptr [EDI + -0xa]
    build_patch(0x004F969A, std::vector<uint8_t>{0x0F, 0xBF, 0x4F, 0xF6}, -1, new_VEH_addr + 0x0);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDI]
    build_patch(0x004F96BE, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOV CL,byte ptr [EDX + 0x952836]
    build_patch(0x004F9992, std::vector<uint8_t>{0x8A, 0x8A, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // base_build(int,int_*,int_*,int_*) - MOV EAX,dword ptr [EDX*0x4 + 0x96cc00]
    build_patch(0x004FC20D, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x00, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x1830C);
    // base_build(int,int_*,int_*,int_*) - MOV EAX,dword ptr [EAX*0x4 + 0x96da40]
    build_patch(0x004FC277, std::vector<uint8_t>{0x8B, 0x04, 0x85, 0x40, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x1914C);
    // base_build(int,int_*,int_*,int_*) - MOV EDX,dword ptr [ECX*0x4 + 0x96c9e8]
    build_patch(0x004FC2AC, std::vector<uint8_t>{0x8B, 0x14, 0x8D, 0xE8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F4);
    // base_build(int,int_*,int_*,int_*) - MOV EAX,dword ptr [EDI + 0x96cd3c]
    build_patch(0x004FC2FC, std::vector<uint8_t>{0x8B, 0x87, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // base_build(int,int_*,int_*,int_*) - MOV EDI,dword ptr [EDX + 0x96cc4c]
    build_patch(0x004FC321, std::vector<uint8_t>{0x8B, 0xBA, 0x4C, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x18358);
    // base_build(int,int_*,int_*,int_*) - MOV EDX,dword ptr [EAX + 0x96d1f8]
    build_patch(0x004FC494, std::vector<uint8_t>{0x8B, 0x90, 0xF8, 0xD1, 0x96, 0x00}, -1, new_VEH_addr + 0x18904);
    // base_build(int,int_*,int_*,int_*) - MOV EAX,dword ptr [EAX + 0x96d204]
    build_patch(0x004FC4A4, std::vector<uint8_t>{0x8B, 0x80, 0x04, 0xD2, 0x96, 0x00}, -1, new_VEH_addr + 0x18910);
    // base_build(int,int_*,int_*,int_*) - MOV ESI,0x952832
    build_patch(0x004FC5F4, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOV AL,byte ptr [ESI + 0x4]
    build_patch(0x004FC5FB, std::vector<uint8_t>{0x8A, 0x46, 0x04}, -1, new_VEH_addr + 0xE);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [ESI]
    build_patch(0x004FC603, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x24]
    build_patch(0x004FC611, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0x24}, -1, new_VEH_addr + 0x2E);
    // base_build(int,int_*,int_*,int_*) - CMP byte ptr [ESI + 0x7],0x3
    build_patch(0x004FC61F, std::vector<uint8_t>{0x80, 0x7E, 0x07, 0x03}, -1, new_VEH_addr + 0x11);
    // base_build(int,int_*,int_*,int_*) - MOV CL,byte ptr [EAX + 0x94a379]
    build_patch(0x004FC77C, std::vector<uint8_t>{0x8A, 0x88, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // base_build(int,int_*,int_*,int_*) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x004FC7BE, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // base_build(int,int_*,int_*,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x004FD538, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // base_build(int,int_*,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x96da50]
    build_patch(0x004FEEC9, std::vector<uint8_t>{0x8B, 0x88, 0x50, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x1915C);
    // base_build(int,int_*,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x96cbb8]
    build_patch(0x004FEED3, std::vector<uint8_t>{0x8B, 0x88, 0xB8, 0xCB, 0x96, 0x00}, -1, new_VEH_addr + 0x182C4);
    // base_build(int,int_*,int_*,int_*) - MOV EDX,dword ptr [EAX + 0x96d1f4]
    build_patch(0x004FEEDD, std::vector<uint8_t>{0x8B, 0x90, 0xF4, 0xD1, 0x96, 0x00}, -1, new_VEH_addr + 0x18900);
    // FUN_00500380 - MOV EDI,0x952832
    build_patch(0x005003F9, std::vector<uint8_t>{0xBF, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // FUN_00500380 - MOV dword ptr [EBP + -0xc],EDI
    build_patch(0x005003FE, std::vector<uint8_t>{0x89, 0x7D, 0xF4}, -1, new_VEH_addr + 0xA);
    // FUN_00500380 - MOV AL,byte ptr [EDI + 0x4]
    build_patch(0x00500403, std::vector<uint8_t>{0x8A, 0x47, 0x04}, -1, new_VEH_addr + 0xE);
    // FUN_00500380 - MOVSX ECX,word ptr [EDI]
    build_patch(0x0050040E, std::vector<uint8_t>{0x0F, 0xBF, 0x0F}, -1, new_VEH_addr + 0xA);
    // FUN_00500380 - TEST byte ptr [EDI + -0x6],0x20
    build_patch(0x00500424, std::vector<uint8_t>{0xF6, 0x47, 0xFA, 0x20}, -1, new_VEH_addr + 0x4);
    // FUN_00500380 - MOV AL,byte ptr [EDI + 0x1e]
    build_patch(0x0050042E, std::vector<uint8_t>{0x8A, 0x47, 0x1E}, -1, new_VEH_addr + 0x28);
    // FUN_00500380 - MOVSX ESI,word ptr [EDI + -0xa]
    build_patch(0x00500439, std::vector<uint8_t>{0x0F, 0xBF, 0x77, 0xF6}, -1, new_VEH_addr + 0x0);
    // FUN_00500380 - MOVSX EBX,word ptr [EDI + -0x8]
    build_patch(0x00500440, std::vector<uint8_t>{0x0F, 0xBF, 0x5F, 0xF8}, -1, new_VEH_addr + 0x2);
    // FUN_00500380 - MOV dword ptr [EBP + -0xc],EDI
    build_patch(0x005004DA, std::vector<uint8_t>{0x89, 0x7D, 0xF4}, -1, new_VEH_addr + 0x3E);
    // planet_buster(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0050052C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // planet_busting(int,int,int) - MOV BL,byte ptr [ESI + 0x952836]
    build_patch(0x00500B84, std::vector<uint8_t>{0x8A, 0x9E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // planet_busting(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00500B9A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // planet_busting(int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00500E0B, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // planet_busting(int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00501002, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // defense_value(int,int,int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0050113E, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // defense_value(int,int,int,int,int) - MOV SI,word ptr [ESI + 0x952832]
    build_patch(0x0050116A, std::vector<uint8_t>{0x66, 0x8B, 0xB6, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // defense_value(int,int,int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005011F4, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // defense_value(int,int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x00501233, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // defense_value(int,int,int,int,int) - MOV CX,word ptr [ESI + 0x952832]
    build_patch(0x00501256, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // defense_value(int,int,int,int,int) - CMP CL,byte ptr [ESI + 0x952836]
    build_patch(0x0050127D, std::vector<uint8_t>{0x3A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // defense_value(int,int,int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00501308, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // morale_alien(int,int) - TEST dword ptr [EDX + 0x95282c],0x100
    build_patch(0x005013E7, std::vector<uint8_t>{0xF7, 0x82, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x01, 0x00, 0x00}, 2, new_VEH_addr + 0x4);
    // morale_alien(int,int) - CMP word ptr [EDX + 0x952832],0xa
    build_patch(0x005013F4, std::vector<uint8_t>{0x66, 0x83, 0xBA, 0x32, 0x28, 0x95, 0x00, 0x0A}, 3, new_VEH_addr + 0xA);
    // morale_alien(int,int) - MOV DL,byte ptr [EDX + 0x952830]
    build_patch(0x005013FF, std::vector<uint8_t>{0x8A, 0x92, 0x30, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x8);
    // morale_alien(int,int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x00501413, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // morale_alien(int,int) - CMP word ptr [ECX + 0x952832],0x13
    build_patch(0x0050141A, std::vector<uint8_t>{0x66, 0x83, 0xB9, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // morale_alien(int,int) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x00501425, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // get_basic_offense(int,int,int,int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x005015CA, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // get_basic_offense(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005015F9, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // get_basic_offense(int,int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x00501616, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // get_basic_offense(int,int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x0050161D, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // get_basic_offense(int,int,int,int,int) - MOV CX,word ptr [ECX + 0x952832]
    build_patch(0x005016E2, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_offense(int,int,int,int,int) - MOV CX,word ptr [ECX + 0x952832]
    build_patch(0x00501751, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_offense(int,int,int,int,int) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x005017FE, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // get_basic_offense(int,int,int,int,int) - MOV CX,word ptr [EAX + 0x952832]
    build_patch(0x0050180E, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_offense(int,int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00501855, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_offense(int,int,int,int,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x005018A2, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x0050195A, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // get_basic_defense(int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00501984, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // get_basic_defense(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x0050199C, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // get_basic_defense(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005019A5, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // get_basic_defense(int,int,int,int) - MOV CX,word ptr [ECX + 0x952832]
    build_patch(0x00501A63, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - MOV CX,word ptr [ECX + 0x952832]
    build_patch(0x00501AD2, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00501B6F, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // get_basic_defense(int,int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x00501B90, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // get_basic_defense(int,int,int,int) - MOV CX,word ptr [EDX + 0x952832]
    build_patch(0x00501B9D, std::vector<uint8_t>{0x66, 0x8B, 0x8A, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x00501BEC, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00501C25, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00501C6B, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // get_basic_defense(int,int,int,int) - CMP word ptr [EDX + 0x952832],0x13
    build_patch(0x00501D07, std::vector<uint8_t>{0x66, 0x83, 0xBA, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00501DDB, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - CMP word ptr [EAX*0x4 + 0x952832],SI
    build_patch(0x00501E2C, std::vector<uint8_t>{0x66, 0x39, 0x34, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - CMP word ptr [EAX + 0x952832],SI
    build_patch(0x00501E42, std::vector<uint8_t>{0x66, 0x39, 0xB0, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00501E5E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00501E91, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00501ED0, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x00501FC6, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - CMP word ptr [EBX + 0x952832],0x13
    build_patch(0x005020BF, std::vector<uint8_t>{0x66, 0x83, 0xBB, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV CX,word ptr [EBX + 0x952832]
    build_patch(0x00502136, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ESI,word ptr [EDX + 0x95282a]
    build_patch(0x0050216F, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EDX + 0x952828]
    build_patch(0x0050217D, std::vector<uint8_t>{0x0F, 0xBF, 0x92, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x005021B3, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00502205, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050228E, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x0050231D, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050233D, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - TEST byte ptr [EBX + 0x95282c],0x20
    build_patch(0x005023E2, std::vector<uint8_t>{0xF6, 0x83, 0x2C, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x4);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x005023EF, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x0050242F, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x005024FA, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x005025A8, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x00502665, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00502765, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00502796, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00502849, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x00502902, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x00502915, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x00502933, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x0050293D, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00502A79, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV CL,byte ptr [EDX + 0x952836]
    build_patch(0x00502AF6, std::vector<uint8_t>{0x8A, 0x8A, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00502B4B, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00502B79, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EBX,word ptr [EAX + 0x952828]
    build_patch(0x00502BA6, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x00502BAD, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00502BD5, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00502C03, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00502C34, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00502C7A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x00502CA6, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ESI,word ptr [EDI + 0x952828]
    build_patch(0x00502CB4, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EBX,word ptr [ECX + 0x95282a]
    build_patch(0x00502CD3, std::vector<uint8_t>{0x0F, 0xBF, 0x99, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x00502CDD, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00502DD5, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00502DF3, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00502E05, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00502EB5, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x00502FF1, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x00503003, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EDI + 0x952832]
    build_patch(0x0050303A, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x005030DD, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x005030EF, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0050312E, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005032C1, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00503318, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - CMP AL,byte ptr [EDX + 0x952836]
    build_patch(0x005034A5, std::vector<uint8_t>{0x3A, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0050352C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005035CB, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00503633, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AX,word ptr [EAX + 0x952832]
    build_patch(0x00503641, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00503878, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00503897, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00503939, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x00503A18, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EDX + 0x952836]
    build_patch(0x00503AD8, std::vector<uint8_t>{0x8A, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x00503AED, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x00503B04, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EAX + 0x952832]
    build_patch(0x00503C55, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00503C94, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00503D30, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00503DC2, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00503E0C, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00503F25, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00503F51, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x00503F8D, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00503FB2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00503FDC, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0050407D, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOV AL,byte ptr [EDX + 0x952836]
    build_patch(0x005040C1, std::vector<uint8_t>{0x8A, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050414F, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0050417D, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00504223, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00504246, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x005042E4, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x00504301, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050431E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x005043D0, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005043F0, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_compute(int,int,int_*,int_*,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00504408, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EBX,word ptr [EDI + 0x95282a]
    build_patch(0x0050450D, std::vector<uint8_t>{0x0F, 0xBF, 0x9F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // best_defender(int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x00504514, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // best_defender(int,int,int) - MOV DI,word ptr [EDI + 0x95285a]
    build_patch(0x0050456D, std::vector<uint8_t>{0x66, 0x8B, 0xBF, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // best_defender(int,int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x00504584, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // best_defender(int,int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x005045AF, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EDX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005045F4, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0050462D, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00504656, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x00504680, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050469A, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005046C5, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EDI,word ptr [EBX + 0x952832]
    build_patch(0x0050475F, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x005047A9, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EBX*0x4 + 0x952832]
    build_patch(0x00504840, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x9D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00504878, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EBX*0x4 + 0x952832]
    build_patch(0x005048A7, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x9D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EBX*0x4 + 0x952832]
    build_patch(0x005048D6, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x9D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00504913, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00504987, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EBX*0x4 + 0x952832]
    build_patch(0x005049AF, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x9D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x005049E5, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // best_defender(int,int,int) - TEST byte ptr [EDI + 0x95282c],0x80
    build_patch(0x00504A58, std::vector<uint8_t>{0xF6, 0x87, 0x2C, 0x28, 0x95, 0x00, 0x80}, 2, new_VEH_addr + 0x4);
    // best_defender(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952858]
    build_patch(0x00504A7F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // boom(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00504C7F, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00504C9D, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x00504CA4, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00504CDB, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // boom(int,int,int) - CMP word ptr [EAX*0x4 + 0x952832],0x1
    build_patch(0x00504D01, std::vector<uint8_t>{0x66, 0x83, 0x3C, 0x85, 0x32, 0x28, 0x95, 0x00, 0x01}, 4, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOV AX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00504D45, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00504DA7, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // boom(int,int,int) - CMP word ptr [EAX + 0x952832],0xf
    build_patch(0x005052FC, std::vector<uint8_t>{0x66, 0x83, 0xB8, 0x32, 0x28, 0x95, 0x00, 0x0F}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x00505306, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0050530D, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00505330, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00505559, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050557D, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00505594, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x0050559B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005055B0, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005055C7, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005055CE, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005055E3, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005055FA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00505601, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00505616, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x0050562D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00505634, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00505649, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00505660, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00505667, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050567C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x00505693, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x0050569A, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005056AF, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005056C6, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005056CD, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005056E2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005056F9, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00505700, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00505715, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x0050572C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00505733, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00505748, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x0050575F, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00505766, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050577B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00505792, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00505799, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005057AE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005057C5, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005057CC, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005057E1, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005057F8, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005057FF, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00505814, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x0050582B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00505832, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - CMP word ptr [ECX*0x4 + 0x952832],0xf
    build_patch(0x00505850, std::vector<uint8_t>{0x66, 0x83, 0x3C, 0x8D, 0x32, 0x28, 0x95, 0x00, 0x0F}, 4, new_VEH_addr + 0xA);
    // boom(int,int,int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x0050585F, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // boom(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x00505866, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // boom(int,int,int) - MOV DL,byte ptr [EDI*0x4 + 0x952836]
    build_patch(0x00505953, std::vector<uint8_t>{0x8A, 0x14, 0xBD, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // boom(int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00505A07, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV CL,byte ptr [EDI + 0x952836]
    build_patch(0x00505D97, std::vector<uint8_t>{0x8A, 0x8F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00505DA4, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x00505DDD, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX EDX,word ptr [EBX + 0x95282a]
    build_patch(0x00505DEB, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x00505DF5, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x00505E41, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_kill(int,int_*,int_*,int_*,int,int) - TEST byte ptr [EDI + 0x952830],0x20
    build_patch(0x00505EAF, std::vector<uint8_t>{0xF6, 0x87, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00505ECC, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x00505ED5, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV byte ptr [EDI + 0x952838],0x0
    build_patch(0x00505EDB, std::vector<uint8_t>{0xC6, 0x87, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV byte ptr [EDI + 0x952836],AL
    build_patch(0x00505EE2, std::vector<uint8_t>{0x88, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00505EEB, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00505F19, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00505F2B, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00505F31, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00505F3F, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_kill(int,int_*,int_*,int_*,int,int) - TEST byte ptr [EDI + 0x952830],0x20
    build_patch(0x00505F6B, std::vector<uint8_t>{0xF6, 0x87, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // battle_kill(int,int_*,int_*,int_*,int,int) - TEST dword ptr [EDI + 0x95282c],0x800000
    build_patch(0x00505F92, std::vector<uint8_t>{0xF7, 0x87, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x80, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX EAX,word ptr [EBX + 0x952856]
    build_patch(0x00505FC3, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00505FCE, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00505FD5, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x00505FDE, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x00506010, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x00506077, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV CL,byte ptr [EDI + 0x952836]
    build_patch(0x005060CB, std::vector<uint8_t>{0x8A, 0x8F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_kill(int,int_*,int_*,int_*,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005060DB, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // battle_kill_stack(int,int_*,int_*,int_*,int,int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x00506141, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_kill_stack(int,int_*,int_*,int_*,int,int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x00506157, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_kill_stack(int,int_*,int_*,int_*,int,int) - MOVSX EDI,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x0050617F, std::vector<uint8_t>{0x0F, 0xBF, 0x3C, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // battle_kill_chaff(int,int_*,int_*,int_*,int,int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005061C5, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_kill_chaff(int,int_*,int_*,int_*,int,int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x005061DB, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_kill_chaff(int,int_*,int_*,int_*,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005061FE, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_kill_chaff(int,int_*,int_*,int_*,int,int) - MOVSX EDI,word ptr [ECX + 0x952858]
    build_patch(0x00506205, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_kill_chaff(int,int_*,int_*,int_*,int,int) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x0050624C, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_kill_chaff(int,int_*,int_*,int_*,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00506261, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // promote(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005062C2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // promote(int) - CMP byte ptr [ESI + 0x95284c],0x6
    build_patch(0x00506325, std::vector<uint8_t>{0x80, 0xBE, 0x4C, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x24);
    // promote(int) - MOV CL,byte ptr [ESI + 0x95284c]
    build_patch(0x00506365, std::vector<uint8_t>{0x8A, 0x8E, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // promote(int) - MOV byte ptr [ESI + 0x95284c],CL
    build_patch(0x00506377, std::vector<uint8_t>{0x88, 0x8E, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // promote(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0050637F, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // promote(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005063B6, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // promote(int) - MOV SI,word ptr [ESI + 0x952832]
    build_patch(0x005063D6, std::vector<uint8_t>{0x66, 0x8B, 0xB6, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // invasions(int) - MOV ESI,0x95282a
    build_patch(0x005064DC, std::vector<uint8_t>{0xBE, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // invasions(int) - MOV CL,byte ptr [ESI + 0xc]
    build_patch(0x005064E8, std::vector<uint8_t>{0x8A, 0x4E, 0x0C}, -1, new_VEH_addr + 0xE);
    // invasions(int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x00506530, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0x2);
    // invasions(int) - MOVSX ECX,word ptr [ESI + -0x2]
    build_patch(0x0050653A, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xFE}, -1, new_VEH_addr + 0x0);
    // invasions(int) - MOVSX EAX,word ptr [ESI + -0x2]
    build_patch(0x00506589, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xFE}, -1, new_VEH_addr + 0x0);
    // invasions(int) - MOVSX EBX,word ptr [ESI]
    build_patch(0x00506590, std::vector<uint8_t>{0x0F, 0xBF, 0x1E}, -1, new_VEH_addr + 0x2);
    // invasions(int) - MOV byte ptr [ESI + 0xf],0x18
    build_patch(0x0050661C, std::vector<uint8_t>{0xC6, 0x46, 0x0F, 0x18}, -1, new_VEH_addr + 0x11);
    // invasions(int) - MOV word ptr [ESI + 0x12],CX
    build_patch(0x00506620, std::vector<uint8_t>{0x66, 0x89, 0x4E, 0x12}, -1, new_VEH_addr + 0x14);
    // invasions(int) - MOV word ptr [ESI + 0x1a],DX
    build_patch(0x00506624, std::vector<uint8_t>{0x66, 0x89, 0x56, 0x1A}, -1, new_VEH_addr + 0x1C);
    // interceptor(int,int,int,int) - MOV EBX,0x95282a
    build_patch(0x00506675, std::vector<uint8_t>{0xBB, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // interceptor(int,int,int,int) - MOV AL,byte ptr [EBX + 0xc]
    build_patch(0x0050667F, std::vector<uint8_t>{0x8A, 0x43, 0x0C}, -1, new_VEH_addr + 0xE);
    // interceptor(int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x8]
    build_patch(0x0050668A, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0x08}, -1, new_VEH_addr + 0xA);
    // interceptor(int,int,int,int) - CMP byte ptr [ECX + 0x94a379],0x2
    build_patch(0x005066A3, std::vector<uint8_t>{0x80, 0xB9, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // interceptor(int,int,int,int) - MOVSX EAX,word ptr [EBX]
    build_patch(0x005066C3, std::vector<uint8_t>{0x0F, 0xBF, 0x03}, -1, new_VEH_addr + 0x2);
    // interceptor(int,int,int,int) - MOVSX EDX,word ptr [EBX + -0x2]
    build_patch(0x005066CD, std::vector<uint8_t>{0x0F, 0xBF, 0x53, 0xFE}, -1, new_VEH_addr + 0x0);
    // interceptor(int,int,int,int) - MOVSX EAX,word ptr [EBX + -0x2]
    build_patch(0x00506723, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0xFE}, -1, new_VEH_addr + 0x0);
    // interceptor(int,int,int,int) - MOVSX ESI,word ptr [EBX]
    build_patch(0x0050672A, std::vector<uint8_t>{0x0F, 0xBF, 0x33}, -1, new_VEH_addr + 0x2);
    // interceptor(int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x8]
    build_patch(0x00506770, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0x08}, -1, new_VEH_addr + 0xA);
    // interceptor(int,int,int,int) - MOV CL,byte ptr [EBX + 0xe]
    build_patch(0x005067C9, std::vector<uint8_t>{0x8A, 0x4B, 0x0E}, -1, new_VEH_addr + 0x10);
    // interceptor(int,int,int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x0050685E, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // interceptor(int,int,int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x00506865, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // interceptor(int,int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00506A31, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // interceptor(int,int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00506A38, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // interceptor(int,int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x00506A44, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x00506A8C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_fight(int,int,int,int,int_*) - MOVSX ECX,word ptr [ECX + 0x95282a]
    build_patch(0x00506AC8, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDI*0x4 + 0x952832]
    build_patch(0x00506B22, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0xBD, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI*0x4 + 0x952832]
    build_patch(0x00506B37, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0xBD, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x00506B7E, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDX,word ptr [EDI + 0x95282a]
    build_patch(0x00506B85, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x00506B8C, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDX,word ptr [EDI + 0x952832]
    build_patch(0x00506BA4, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00506BC2, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00506C84, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00506CE5, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00506D21, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00506D33, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x00506D51, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00506D65, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00506DCE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00506DE4, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00506E13, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00506E6A, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00506EAB, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x00506EF1, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00506F10, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00506F4E, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00506F6D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ESI,word ptr [EDX + 0x952832]
    build_patch(0x00506F95, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ESI,word ptr [EDX + 0x952832]
    build_patch(0x00506FC4, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00507132, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00507156, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00507180, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x005071BD, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EDI + 0x95282c],ECX
    build_patch(0x005071D8, std::vector<uint8_t>{0x89, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005071F0, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - OR dword ptr [EDI + 0x95282c],0x80000
    build_patch(0x00507269, std::vector<uint8_t>{0x81, 0x8F, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x08, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x005073A1, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - TEST dword ptr [EDI + 0x95282c],0x80000
    build_patch(0x005073C5, std::vector<uint8_t>{0xF7, 0x87, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x08, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - AND dword ptr [EDI + 0x95282c],0xfffbffff
    build_patch(0x005073DF, std::vector<uint8_t>{0x81, 0xA7, 0x2C, 0x28, 0x95, 0x00, 0xFF, 0xFF, 0xFB, 0xFF}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x005073E9, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x00507410, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EDI + 0x952850]
    build_patch(0x0050743B, std::vector<uint8_t>{0x8A, 0x97, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x005074E6, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EDI + 0x952850],CL
    build_patch(0x005074EE, std::vector<uint8_t>{0x88, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x005074F4, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EDI + 0x95282c],ECX
    build_patch(0x00507503, std::vector<uint8_t>{0x89, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00507509, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x00507512, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - OR dword ptr [EDI + 0x95282c],0x40
    build_patch(0x0050752A, std::vector<uint8_t>{0x83, 0x8F, 0x2C, 0x28, 0x95, 0x00, 0x40}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00507531, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050754F, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00507970, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDX + 0x952832]
    build_patch(0x00507977, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00507AF8, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x00507B35, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DX,word ptr [ESI + 0x952830]
    build_patch(0x00507B3F, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // battle_fight(int,int,int,int,int,int,int_*) - TEST byte ptr [ESI + 0x95284f],AL
    build_patch(0x00507B5A, std::vector<uint8_t>{0x84, 0x86, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x00507C66, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x00507CEC, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV ECX,dword ptr [EDX + 0x95282c]
    build_patch(0x00507D1B, std::vector<uint8_t>{0x8B, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - SUB byte ptr [EAX + 0x952850],CL
    build_patch(0x00507E3A, std::vector<uint8_t>{0x28, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00507E45, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00507E4C, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x00507E58, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050803A, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EBX + 0x952838]
    build_patch(0x00508078, std::vector<uint8_t>{0x8A, 0x8B, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00508097, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EDI + 0x952838]
    build_patch(0x005080D5, std::vector<uint8_t>{0x8A, 0x97, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EBX + 0x952838]
    build_patch(0x005082BC, std::vector<uint8_t>{0x8A, 0x83, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EDX + 0x952838]
    build_patch(0x005082CC, std::vector<uint8_t>{0x8A, 0x82, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EBX + 0x952850]
    build_patch(0x00508312, std::vector<uint8_t>{0x8A, 0x83, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EBX + 0x952850],AL
    build_patch(0x0050831A, std::vector<uint8_t>{0x88, 0x83, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EBX + 0x952839],0x0
    build_patch(0x00508320, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x00508327, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x00508337, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x005083B5, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x005083BE, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV EAX,dword ptr [EDX + 0x95282c]
    build_patch(0x005083C5, std::vector<uint8_t>{0x8B, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EDX + 0x95282c],EAX
    build_patch(0x005083D0, std::vector<uint8_t>{0x89, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EDX + 0x952836]
    build_patch(0x00508403, std::vector<uint8_t>{0x8A, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [EDX + 0x952830]
    build_patch(0x0050840D, std::vector<uint8_t>{0x66, 0x8B, 0x82, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV BL,byte ptr [EDX + 0x95284f]
    build_patch(0x0050841F, std::vector<uint8_t>{0x8A, 0x9A, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x00508435, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DX,word ptr [EBX + 0x952830]
    build_patch(0x0050843F, std::vector<uint8_t>{0x66, 0x8B, 0x93, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // battle_fight(int,int,int,int,int,int,int_*) - TEST byte ptr [EBX + 0x95284f],AL
    build_patch(0x00508453, std::vector<uint8_t>{0x84, 0x83, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x00508521, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x00508536, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050855F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x00508589, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050867E, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00508712, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00508786, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x005087C7, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EAX + 0x95284f]
    build_patch(0x00508804, std::vector<uint8_t>{0x8A, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x0050881C, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EDI + 0x952838]
    build_patch(0x005088A7, std::vector<uint8_t>{0x8A, 0x97, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952858]
    build_patch(0x005088B8, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x005088E6, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EDI + 0x952838],AL
    build_patch(0x005088EE, std::vector<uint8_t>{0x88, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV EDX,dword ptr [EDI + 0x95282c]
    build_patch(0x005088F4, std::vector<uint8_t>{0x8B, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EDI + 0x95282c],EDX
    build_patch(0x005088FD, std::vector<uint8_t>{0x89, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00508903, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EDI + 0x95284d],0x0
    build_patch(0x0050891A, std::vector<uint8_t>{0xC6, 0x87, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00508928, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00508930, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ESI,word ptr [EAX + 0x952858]
    build_patch(0x00508A17, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00508A52, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x00508A90, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ESI,word ptr [EDI + 0x952858]
    build_patch(0x00508B03, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EAX + 0x95284f]
    build_patch(0x00508B9C, std::vector<uint8_t>{0x8A, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x00508BA7, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00508CCB, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - TEST byte ptr [EBX + 0x95282c],0x40
    build_patch(0x00508CF4, std::vector<uint8_t>{0xF6, 0x83, 0x2C, 0x28, 0x95, 0x00, 0x40}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x00508D04, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x00508D5C, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - CMP byte ptr [EBX + 0x952839],0x2
    build_patch(0x00508D79, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00508DCF, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EBX + 0x952838]
    build_patch(0x00508E0D, std::vector<uint8_t>{0x8A, 0x93, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00508E3F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00508E57, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DX,word ptr [EBX + 0x952832]
    build_patch(0x00508EAD, std::vector<uint8_t>{0x66, 0x8B, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EBX + 0x952838]
    build_patch(0x00508F30, std::vector<uint8_t>{0x8A, 0x8B, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00508F61, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00508FF3, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EBX + 0x952838]
    build_patch(0x0050903A, std::vector<uint8_t>{0x8A, 0x8B, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050907C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005090A3, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005090DA, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x00509121, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00509141, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00509188, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EDI + 0x952838]
    build_patch(0x005091E4, std::vector<uint8_t>{0x8A, 0x97, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EDI + 0x952838],DL
    build_patch(0x005091EE, std::vector<uint8_t>{0x88, 0x97, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00509262, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EDI + 0x952838]
    build_patch(0x005092AC, std::vector<uint8_t>{0x8A, 0x97, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005092F1, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EDI + 0x952838]
    build_patch(0x00509338, std::vector<uint8_t>{0x8A, 0x97, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050937A, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x005093C1, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050948B, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DX,word ptr [EAX + 0x952832]
    build_patch(0x0050955F, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV BL,byte ptr [EAX + 0x952838]
    build_patch(0x00509632, std::vector<uint8_t>{0x8A, 0x98, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [EAX + 0x952838],BL
    build_patch(0x0050963A, std::vector<uint8_t>{0x88, 0x98, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005096B3, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x005096FA, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV BL,byte ptr [EAX + 0x952836]
    build_patch(0x00509745, std::vector<uint8_t>{0x8A, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x0050974D, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [EAX + 0x95285a]
    build_patch(0x00509761, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x00509776, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x0050978E, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [ESI + 0x952836],DL
    build_patch(0x005097A1, std::vector<uint8_t>{0x88, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005097A7, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - CMP DL,byte ptr [EBX + 0x952836]
    build_patch(0x005097E5, std::vector<uint8_t>{0x3A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV word ptr [ESI + 0x952856],AX
    build_patch(0x005097F6, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV word ptr [ESI + 0x952856],0xffff
    build_patch(0x005097FF, std::vector<uint8_t>{0x66, 0xC7, 0x86, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x2E);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDI,word ptr [ESI + 0x952858]
    build_patch(0x00509815, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00509840, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00509856, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00509983, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x005099CA, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00509AB7, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00509AFE, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00509B47, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x00509B8E, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00509BC6, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x00509C0D, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00509C2F, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x00509C76, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00509CC9, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00509D10, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00509D45, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00509D65, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00509D8D, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00509DA6, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00509DCB, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00509E12, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00509E4B, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00509E95, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00509F2E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00509F75, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00509F95, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV BL,byte ptr [EDX + 0x952838]
    build_patch(0x00509FDA, std::vector<uint8_t>{0x8A, 0x9A, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050A06C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0050A08C, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050A1BE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x0050A203, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0050A23A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [EAX + 0x952856]
    build_patch(0x0050A2EB, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0050A2FA, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0050A35A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x0050A3A2, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [EAX + 0x952856]
    build_patch(0x0050A43F, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV word ptr [EDX + 0x952856],CX
    build_patch(0x0050A446, std::vector<uint8_t>{0x66, 0x89, 0x8A, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0050A4EC, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x0050A508, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050A556, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x0050A572, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0050A624, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x0050A640, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050A68E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0050A6B7, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0050A761, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0050A78F, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0050A80E, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050A848, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050A866, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x0050A91C, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x0050A931, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050A954, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - CMP byte ptr [ECX + 0x952839],0x1
    build_patch(0x0050A9C3, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [ECX + 0x95283c]
    build_patch(0x0050A9CC, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x0050AA13, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [ECX + 0x952838],AL
    build_patch(0x0050AA33, std::vector<uint8_t>{0x88, 0x81, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [ECX + 0x952838],AL
    build_patch(0x0050AA3F, std::vector<uint8_t>{0x88, 0x81, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0050AA65, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0050AA89, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x0050AAA9, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [ECX + 0x952838],DL
    build_patch(0x0050AAB4, std::vector<uint8_t>{0x88, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x0050AABA, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV dword ptr [ECX + 0x95282c],EDX
    build_patch(0x0050AAC4, std::vector<uint8_t>{0x89, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDI,word ptr [ECX + 0x952858]
    build_patch(0x0050AAD1, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [ECX + 0x95285a]
    build_patch(0x0050AAF4, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x0050AB09, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050AB27, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EBX,word ptr [ESI + 0x952858]
    build_patch(0x0050AB2E, std::vector<uint8_t>{0x0F, 0xBF, 0x9E, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x0050AB7A, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x0050AB91, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0050AD20, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050AF57, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x0050AF78, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050AFB4, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x0050AFD5, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050B06F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x0050B090, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0050B0CC, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x0050B0ED, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x0050B289, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CX,word ptr [ESI + 0x952830]
    build_patch(0x0050B293, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV word ptr [ESI + 0x952830],DX
    build_patch(0x0050B2B3, std::vector<uint8_t>{0x66, 0x89, 0x96, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // battle_fight(int,int,int,int,int,int,int_*) - OR word ptr [ESI + 0x952830],AX
    build_patch(0x0050B2C5, std::vector<uint8_t>{0x66, 0x09, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0050B55A, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050B774, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [EAX + 0x94a379]
    build_patch(0x0050B790, std::vector<uint8_t>{0x8A, 0x88, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // battle_fight(int,int,int,int,int,int,int_*) - CMP byte ptr [EAX + 0x94a37a],0x1
    build_patch(0x0050B79B, std::vector<uint8_t>{0x80, 0xB8, 0x7A, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC2);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x0050B7AF, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [ESI + 0x952850],CL
    build_patch(0x0050B7BA, std::vector<uint8_t>{0x88, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [ESI + 0x952850]
    build_patch(0x0050B7D3, std::vector<uint8_t>{0x8A, 0x86, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV byte ptr [ESI + 0x952850],AL
    build_patch(0x0050B7DE, std::vector<uint8_t>{0x88, 0x86, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050B7E4, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EDX + 0x94a37d]
    build_patch(0x0050B807, std::vector<uint8_t>{0x8A, 0x82, 0x7D, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC5);
    // battle_fight(int,int,int,int,int,int,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0050B844, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // battle_fight(int,int,int,int,int,int,int_*) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x0050B860, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV AL,byte ptr [EAX + 0x94a37a]
    build_patch(0x0050B869, std::vector<uint8_t>{0x8A, 0x80, 0x7A, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC2);
    // battle_fight(int,int,int,int,int,int,int_*) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x0050B87A, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // FUN_0050b8f0 - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x0050B900, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // capture_base(int,int,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x0050D11F, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // capture_base(int,int,int) - AND dword ptr [EAX + 0x95282c],ECX
    build_patch(0x0050D131, std::vector<uint8_t>{0x21, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // capture_base(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x0050D137, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // capture_base(int,int,int) - ADD ESI,0x95282a
    build_patch(0x0050D188, std::vector<uint8_t>{0x81, 0xC6, 0x2A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2);
    // convoy(int,int) - MOVSX ECX,word ptr [EDX + 0x952856]
    build_patch(0x0050E5D5, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // convoy(int,int) - MOVSX EDX,word ptr [EDX + 0x952832]
    build_patch(0x0050E5EF, std::vector<uint8_t>{0x0F, 0xBF, 0x92, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_timer(int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x0050F23B, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // go_timer(int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x0050F246, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // go_timer(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x0050F263, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // go_timer(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0050F26D, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // go_timer(int) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x0050F2C2, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // go_timer(int) - MOV EAX,dword ptr [EAX + 0x95282c]
    build_patch(0x0050F2D0, std::vector<uint8_t>{0x8B, 0x80, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // clear_group(void) - MOV EAX,0x95282c
    build_patch(0x0050F664, std::vector<uint8_t>{0xB8, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // clear_group(void) - MOV EDX,dword ptr [EAX]
    build_patch(0x0050F669, std::vector<uint8_t>{0x8B, 0x10}, -1, new_VEH_addr + 0x4);
    // clear_group(void) - ADD EAX,0x34
    build_patch(0x0050F66B, std::vector<uint8_t>{0x83, 0xC0, 0x34}, -1, new_VEH_addr + 0x38);
    // clear_group(void) - MOV dword ptr [EAX + -0x34],EDX
    build_patch(0x0050F675, std::vector<uint8_t>{0x89, 0x50, 0xCC}, -1, new_VEH_addr + 0x4);
    // clear_group(void) - RET
    build_patch(0x0050F67A, std::vector<uint8_t>{0xC3}, -1, new_VEH_addr + 0x38);
    // selecting(int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x00510602, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // selecting(int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x00510609, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready_search(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00510D12, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // ready_search(int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x00510D1C, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready_search(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x00510D23, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready_search(int) - MOV BL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00510D8E, std::vector<uint8_t>{0x8A, 0x1C, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // ready_search(int) - MOV EBX,0x95282c
    build_patch(0x00510DC3, std::vector<uint8_t>{0xBB, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // ready_search(int) - MOV EAX,dword ptr [EBX]
    build_patch(0x00510DDD, std::vector<uint8_t>{0x8B, 0x03}, -1, new_VEH_addr + 0x4);
    // ready_search(int) - MOV AL,byte ptr [EBX + 0xd]
    build_patch(0x00510DF9, std::vector<uint8_t>{0x8A, 0x43, 0x0D}, -1, new_VEH_addr + 0x11);
    // ready_search(int) - TEST byte ptr [EBX],0x2
    build_patch(0x00510E04, std::vector<uint8_t>{0xF6, 0x03, 0x02}, -1, new_VEH_addr + 0x4);
    // ready_search(int) - MOVSX EAX,word ptr [EBX + -0x4]
    build_patch(0x00510E0D, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0xFC}, -1, new_VEH_addr + 0x0);
    // ready_search(int) - MOVSX EDI,word ptr [EBX + -0x2]
    build_patch(0x00510E14, std::vector<uint8_t>{0x0F, 0xBF, 0x7B, 0xFE}, -1, new_VEH_addr + 0x2);
    // ready_search(int) - MOV ECX,0x95282c
    build_patch(0x00510ECC, std::vector<uint8_t>{0xB9, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // ready_search(int) - AND dword ptr [ECX],0xfffffffd
    build_patch(0x00510EE4, std::vector<uint8_t>{0x83, 0x21, 0xFD}, -1, new_VEH_addr + 0x4);
    // ready(void) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x00510FAA, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // ready(void) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x00510FBD, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX EBX,word ptr [EAX + 0x952828]
    build_patch(0x00510FC4, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x00511040, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // ready(void) - MOV EAX,dword ptr [EAX + 0x95282c]
    build_patch(0x0051104E, std::vector<uint8_t>{0x8B, 0x80, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // ready(void) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x0051107E, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // ready(void) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00511084, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0051108D, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005110B9, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x005110C0, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOV byte ptr [EDX*0x4 + 0x952852],0x0
    build_patch(0x005111C9, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x52, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x2A);
    // ready(void) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005111E0, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005111E7, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOV DL,byte ptr [ECX + 0x952839]
    build_patch(0x00511207, std::vector<uint8_t>{0x8A, 0x91, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // ready(void) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x00511215, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // ready(void) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x00511249, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // ready(void) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x00511292, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // ready(void) - MOV word ptr [ECX*0x4 + 0x95283c],DX
    build_patch(0x005112B5, std::vector<uint8_t>{0x66, 0x89, 0x14, 0x8D, 0x3C, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x14);
    // ready(void) - MOV word ptr [ECX*0x4 + 0x952844],DX
    build_patch(0x005112D0, std::vector<uint8_t>{0x66, 0x89, 0x14, 0x8D, 0x44, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1C);
    // ready(void) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x005112EE, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // ready(void) - MOV AX,word ptr [ECX + 0x952830]
    build_patch(0x005112FC, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // ready(void) - MOV DL,byte ptr [ECX + 0x952839]
    build_patch(0x00511314, std::vector<uint8_t>{0x8A, 0x91, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // ready(void) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x00511322, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // ready(void) - MOV word ptr [ECX + 0x952830],AX
    build_patch(0x00511334, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // ready(void) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0051134A, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // ready(void) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x0051138E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x00511395, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x005113A5, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x005113AF, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x005113D8, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x005113E1, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x0051140D, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // ready(void) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x00511414, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x00511432, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // ready(void) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x0051143B, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_move(int) - CMP byte ptr [EDX*0x4 + 0x952850],BL
    build_patch(0x00511642, std::vector<uint8_t>{0x38, 0x1C, 0x95, 0x50, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x28);
    // set_move(int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x0051166C, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_move(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x00511673, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // set_move(int) - MOV DL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x005116F0, std::vector<uint8_t>{0x8A, 0x14, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // turn_hints(void) - MOVSX EDX,word ptr [EAX + 0x952832]
    build_patch(0x005118B1, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // turn_hints(void) - CMP dword ptr [EAX + 0x96da3c],0x1
    build_patch(0x00511927, std::vector<uint8_t>{0x83, 0xB8, 0x3C, 0xDA, 0x96, 0x00, 0x01}, -1, new_VEH_addr + 0x19148);
    // turn_hints(void) - CMP dword ptr [EAX + 0x96da48],0x2
    build_patch(0x00511934, std::vector<uint8_t>{0x83, 0xB8, 0x48, 0xDA, 0x96, 0x00, 0x02}, -1, new_VEH_addr + 0x19154);
    // turn_hints(void) - MOV DL,byte ptr [EAX + 0x96d238]
    build_patch(0x00511941, std::vector<uint8_t>{0x8A, 0x90, 0x38, 0xD2, 0x96, 0x00}, -1, new_VEH_addr + 0x18944);
    // turn_hints(void) - MOV DL,byte ptr [EAX + 0x96d438]
    build_patch(0x0051194F, std::vector<uint8_t>{0x8A, 0x90, 0x38, 0xD4, 0x96, 0x00}, -1, new_VEH_addr + 0x18B44);
    // turn_hints(void) - MOV dword ptr [EAX + 0x96c9f4],EDX
    build_patch(0x00511A0E, std::vector<uint8_t>{0x89, 0x90, 0xF4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18100);
    // turn_hints(void) - SUB ECX,dword ptr [EBX + 0x96c9f4]
    build_patch(0x00511A32, std::vector<uint8_t>{0x2B, 0x8B, 0xF4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18100);
    // turn_hints(void) - MOV AL,byte ptr [EBX + 0x96d238]
    build_patch(0x00511A41, std::vector<uint8_t>{0x8A, 0x83, 0x38, 0xD2, 0x96, 0x00}, -1, new_VEH_addr + 0x18944);
    // turn_hints(void) - MOV EAX,dword ptr [EBX + 0x96da3c]
    build_patch(0x00511A4B, std::vector<uint8_t>{0x8B, 0x83, 0x3C, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x19148);
    // turn_hints(void) - MOV dword ptr [EBX + 0x96c9f4],EDX
    build_patch(0x00511ABC, std::vector<uint8_t>{0x89, 0x93, 0xF4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18100);
    // turn_hints(void) - MOV EAX,dword ptr [ECX*0x4 + 0x96c9f8]
    build_patch(0x00511ADE, std::vector<uint8_t>{0x8B, 0x04, 0x8D, 0xF8, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x18108);
    // give_hints(void) - MOV EAX,dword ptr [EDX*0x4 + 0x95282c]
    build_patch(0x00511BCA, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // give_hints(void) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x00511C1A, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // give_hints(void) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x00511C21, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // give_hints(void) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00511C28, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // give_hints(void) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00511C3D, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // give_hints(void) - CMP word ptr [EAX + 0x952856],0x0
    build_patch(0x00511C58, std::vector<uint8_t>{0x66, 0x83, 0xB8, 0x56, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x2E);
    // give_hints(void) - MOVSX ECX,word ptr [EAX*0x4 + 0x952856]
    build_patch(0x00511C98, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // give_hints(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00511CCB, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00511D1E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00511D80, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00511DE1, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952856]
    build_patch(0x00511E1E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00511E51, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00511EA8, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952856]
    build_patch(0x005121B2, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // give_hints(void) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0051223A, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // give_hints(void) - MOV CL,byte ptr [EAX + 0x952838]
    build_patch(0x00512261, std::vector<uint8_t>{0x8A, 0x88, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005122B5, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x0051237D, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // give_hints(void) - CMP word ptr [EAX + 0x952832],0x8
    build_patch(0x00512387, std::vector<uint8_t>{0x66, 0x83, 0xB8, 0x32, 0x28, 0x95, 0x00, 0x08}, 3, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005123CA, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512445, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512478, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EDX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005124F5, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512582, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005125B5, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0051260E, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00512670, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005126C9, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512745, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EDX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00512820, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512875, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005128BA, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005128E6, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512982, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512BDA, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOV AX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00512C47, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x00512CF6, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // give_hints(void) - CMP word ptr [EDI + 0x952832],0xf
    build_patch(0x00512D00, std::vector<uint8_t>{0x66, 0x83, 0xBF, 0x32, 0x28, 0x95, 0x00, 0x0F}, 3, new_VEH_addr + 0xA);
    // give_hints(void) - CMP word ptr [EDI + 0x952832],0xe
    build_patch(0x00512D1B, std::vector<uint8_t>{0x66, 0x83, 0xBF, 0x32, 0x28, 0x95, 0x00, 0x0E}, 3, new_VEH_addr + 0xA);
    // give_hints(void) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0051303F, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // give_hints(void) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0051387D, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // give_hints(void) - MOV CL,byte ptr [EDI*0x4 + 0x952836]
    build_patch(0x00513922, std::vector<uint8_t>{0x8A, 0x0C, 0xBD, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // give_hints(void) - MOV CL,byte ptr [EDI*0x4 + 0x952836]
    build_patch(0x00513955, std::vector<uint8_t>{0x8A, 0x0C, 0xBD, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // give_hints(void) - MOV CL,byte ptr [EDI*0x4 + 0x952836]
    build_patch(0x00513994, std::vector<uint8_t>{0x8A, 0x0C, 0xBD, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // veh_turn(void) - MOV AL,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x00513BC8, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // veh_turn(void) - MOV AL,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x00513C26, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // veh_turn(void) - CMP byte ptr [EAX*0x4 + 0x952839],0x18
    build_patch(0x00513CAE, std::vector<uint8_t>{0x80, 0x3C, 0x85, 0x39, 0x28, 0x95, 0x00, 0x18}, 3, new_VEH_addr + 0x11);
    // veh_turn(void) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00513D6E, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_turn(void) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x00513D8E, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_turn(void) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x00513DEA, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_turn(void) - MOV DL,byte ptr [EAX + 0x952839]
    build_patch(0x00513DF9, std::vector<uint8_t>{0x8A, 0x90, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_turn(void) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00513E27, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_turn(void) - OR dword ptr [EAX*0x4 + 0x95282c],0x4000000
    build_patch(0x00513E8B, std::vector<uint8_t>{0x81, 0x0C, 0x85, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x04}, 3, new_VEH_addr + 0x4);
    // veh_turn(void) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x00513F2E, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_turn(void) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00513F38, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // human_turn(void) - MOV EAX,0x95282c
    build_patch(0x005140A1, std::vector<uint8_t>{0xB8, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // human_turn(void) - MOV EDX,dword ptr [EAX]
    build_patch(0x005140A6, std::vector<uint8_t>{0x8B, 0x10}, -1, new_VEH_addr + 0x4);
    // human_turn(void) - MOV dword ptr [EAX + -0x34],EDX
    build_patch(0x005140B2, std::vector<uint8_t>{0x89, 0x50, 0xCC}, -1, new_VEH_addr + 0x4);
    // human_turn(void) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x005141C1, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // human_turn(void) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x005141CC, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // human_turn(void) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x005143C3, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // human_turn(void) - MOVSX EBX,word ptr [EAX + 0x952828]
    build_patch(0x005143CA, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // human_turn(void) - CMP byte ptr [EDX*0x4 + 0x952839],0x18
    build_patch(0x00514426, std::vector<uint8_t>{0x80, 0x3C, 0x95, 0x39, 0x28, 0x95, 0x00, 0x18}, 3, new_VEH_addr + 0x11);
    // human_turn(void) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00514445, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // human_turn(void) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0051444B, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // human_turn(void) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x00514454, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // zoom(int,int) - TEST dword ptr [EAX*0x4 + 0x96c9e0],0x200
    build_patch(0x0051517F, std::vector<uint8_t>{0xF7, 0x04, 0x85, 0xE0, 0xC9, 0x96, 0x00, 0x00, 0x02, 0x00, 0x00}, -1, new_VEH_addr + 0x180EC);
    // zoom(int,int) - TEST byte ptr [EAX*0x4 + 0x96c9e1],0x2
    build_patch(0x005152A7, std::vector<uint8_t>{0xF6, 0x04, 0x85, 0xE1, 0xC9, 0x96, 0x00, 0x02}, -1, new_VEH_addr + 0x180ED);
    // veh_key(int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00517251, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_key(int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x00517258, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_key(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00517279, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // veh_key(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00517346, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // veh_key(int,int,int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x0051741B, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // veh_key(int,int,int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00517656, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // on_key_click(int,int) - CMP byte ptr [ECX + 0x952839],DL
    build_patch(0x00517B31, std::vector<uint8_t>{0x38, 0x91, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x00517B3D, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // on_key_click(int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00517B5F, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // on_key_click(int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00517C8B, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // on_key_click(int,int) - MOV CL,byte ptr [EAX + 0x95283a]
    build_patch(0x00517CA1, std::vector<uint8_t>{0x8A, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV byte ptr [EAX + 0x95283a],CL
    build_patch(0x00517CAE, std::vector<uint8_t>{0x88, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV byte ptr [EAX + 0x95283a],BL
    build_patch(0x00517CB9, std::vector<uint8_t>{0x88, 0x98, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x00517CD2, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // on_key_click(int,int) - MOV byte ptr [EDX*0x4 + 0x95283b],BL
    build_patch(0x00517CE4, std::vector<uint8_t>{0x88, 0x1C, 0x95, 0x3B, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x13);
    // on_key_click(int,int) - MOV byte ptr [ECX*0x4 + 0x95283a],0x1
    build_patch(0x00517CF7, std::vector<uint8_t>{0xC6, 0x04, 0x8D, 0x3A, 0x28, 0x95, 0x00, 0x01}, 3, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV CL,byte ptr [EAX + 0x95283a]
    build_patch(0x00517D01, std::vector<uint8_t>{0x8A, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV byte ptr [EAX + 0x95283a],CL
    build_patch(0x00517D09, std::vector<uint8_t>{0x88, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // on_key_click(int,int) - CMP byte ptr [EAX + 0x95283a],0x4
    build_patch(0x00517D1E, std::vector<uint8_t>{0x80, 0xB8, 0x3A, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00517D27, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // on_key_click(int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x00517D33, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // on_key_click(int,int) - MOV byte ptr [ECX*0x4 + 0x95283a],BL
    build_patch(0x00517D45, std::vector<uint8_t>{0x88, 0x1C, 0x8D, 0x3A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV EDI,dword ptr [EAX*0x4 + 0x95282c]
    build_patch(0x00517DA7, std::vector<uint8_t>{0x8B, 0x3C, 0x85, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // on_key_click(int,int) - MOV dword ptr [EAX*0x4 + 0x95282c],EDI
    build_patch(0x00517DB4, std::vector<uint8_t>{0x89, 0x3C, 0x85, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // on_key_click(int,int) - MOV byte ptr [EAX*0x4 + 0x952839],BL
    build_patch(0x00517DC7, std::vector<uint8_t>{0x88, 0x1C, 0x85, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // on_key_click(int,int) - MOV AL,byte ptr [ECX*0x4 + 0x95283a]
    build_patch(0x00517E0A, std::vector<uint8_t>{0x8A, 0x04, 0x8D, 0x3A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV byte ptr [ECX*0x4 + 0x95283a],AL
    build_patch(0x00517E17, std::vector<uint8_t>{0x88, 0x04, 0x8D, 0x3A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV byte ptr [ECX*0x4 + 0x95283a],BL
    build_patch(0x00517E20, std::vector<uint8_t>{0x88, 0x1C, 0x8D, 0x3A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x12);
    // on_key_click(int,int) - MOV EAX,dword ptr [EDI + 0x96cdc0]
    build_patch(0x00518443, std::vector<uint8_t>{0x8B, 0x87, 0xC0, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184CC);
    // on_key_click(int,int) - MOV ECX,dword ptr [EDI + 0x96cdc4]
    build_patch(0x00518449, std::vector<uint8_t>{0x8B, 0x8F, 0xC4, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D0);
    // on_key_click(int,int) - MOV EAX,dword ptr [EDI + 0x96cdc8]
    build_patch(0x00518465, std::vector<uint8_t>{0x8B, 0x87, 0xC8, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D4);
    // on_key_click(int,int) - MOV ECX,dword ptr [EDI + 0x96cdcc]
    build_patch(0x00518473, std::vector<uint8_t>{0x8B, 0x8F, 0xCC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D8);
    // on_key_click(int,int) - MOV dword ptr [EDI + 0x96cdc0],EAX
    build_patch(0x005184A9, std::vector<uint8_t>{0x89, 0x87, 0xC0, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184CC);
    // on_key_click(int,int) - MOV dword ptr [EDI + 0x96cdc4],EAX
    build_patch(0x005184B7, std::vector<uint8_t>{0x89, 0x87, 0xC4, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D0);
    // on_key_click(int,int) - MOV dword ptr [EDI + 0x96cdc8],EAX
    build_patch(0x005184C6, std::vector<uint8_t>{0x89, 0x87, 0xC8, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D4);
    // on_key_click(int,int) - MOV dword ptr [EDI + 0x96cdcc],EAX
    build_patch(0x005184D5, std::vector<uint8_t>{0x89, 0x87, 0xCC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D8);
    // on_key_click(int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x00518902, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // on_key_click(int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x00518909, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_key_click(int,int) - MOVSX EDX,word ptr [EAX + 0x95285a]
    build_patch(0x00518976, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // on_key_click(int,int) - MOVSX EDX,word ptr [EAX + 0x952858]
    build_patch(0x00518981, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // on_key_click(int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0051898C, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_key_click(int,int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x00518993, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // on_key_click(int,int) - MOVSX EDX,word ptr [ECX + 0x95285a]
    build_patch(0x00518A27, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // on_key_click(int,int) - MOVSX ECX,word ptr [ECX + 0x952858]
    build_patch(0x00518A32, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // on_key_click(int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00518A55, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // on_key_click(int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00518A96, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // on_key_click(int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952828]
    build_patch(0x00518AE9, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x28, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x0);
    // on_key_click(int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x95282a]
    build_patch(0x00518B2F, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x2A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2);
    // on_key_click(int,int) - MOVSX EDX,word ptr [ECX + 0x952858]
    build_patch(0x00518B6C, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // on_key_click(int,int) - MOVSX ECX,word ptr [ECX + 0x95285a]
    build_patch(0x00518B73, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // on_key_click(int,int) - MOV ESI,0x95282a
    build_patch(0x005194AE, std::vector<uint8_t>{0xBE, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // on_key_click(int,int) - LEA ECX,[ESI + -0x2]
    build_patch(0x005194B4, std::vector<uint8_t>{0x8D, 0x4E, 0xFE}, -1, new_VEH_addr + 0x0);
    // on_key_click(int,int) - PUSH ECX
    build_patch(0x005194B9, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0x0);
    // on_key_click(int,int) - PUSH ESI
    build_patch(0x005194C7, std::vector<uint8_t>{0x56}, -1, new_VEH_addr + 0x2);
    // on_key_click(int,int) - LEA ECX,[ESI + 0x8]
    build_patch(0x005194D2, std::vector<uint8_t>{0x8D, 0x4E, 0x08}, -1, new_VEH_addr + 0xA);
    // on_key_click(int,int) - PUSH ECX
    build_patch(0x005194D8, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0xA);
    // on_key_click(int,int) - LEA EDX,[ESI + 0x22]
    build_patch(0x005194E3, std::vector<uint8_t>{0x8D, 0x56, 0x22}, -1, new_VEH_addr + 0x24);
    // on_key_click(int,int) - PUSH EDX
    build_patch(0x005194E9, std::vector<uint8_t>{0x52}, -1, new_VEH_addr + 0x24);
    // on_key_click(int,int) - LEA EAX,[ESI + 0x26]
    build_patch(0x005194F5, std::vector<uint8_t>{0x8D, 0x46, 0x26}, -1, new_VEH_addr + 0x28);
    // on_key_click(int,int) - PUSH EAX
    build_patch(0x005194FA, std::vector<uint8_t>{0x50}, -1, new_VEH_addr + 0x28);
    // on_key_click(int,int) - LEA ECX,[ESI + 0x2c]
    build_patch(0x00519505, std::vector<uint8_t>{0x8D, 0x4E, 0x2C}, -1, new_VEH_addr + 0x2E);
    // on_key_click(int,int) - PUSH ECX
    build_patch(0x0051950B, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0x2E);
    // on_key_click(int,int) - MOV AL,byte ptr [ESI + 0xc]
    build_patch(0x00519582, std::vector<uint8_t>{0x8A, 0x46, 0x0C}, -1, new_VEH_addr + 0xE);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ESI + 0x8]
    build_patch(0x005195B4, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x08}, -1, new_VEH_addr + 0xA);
    // on_key_click(int,int) - MOV ESI,0x952832
    build_patch(0x00519C56, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // on_key_click(int,int) - MOV AL,byte ptr [ESI + 0x4]
    build_patch(0x00519CA3, std::vector<uint8_t>{0x8A, 0x46, 0x04}, -1, new_VEH_addr + 0xE);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x00519CD2, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ESI + -0xa]
    build_patch(0x00519D01, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF6}, -1, new_VEH_addr + 0x0);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ESI + -0x8]
    build_patch(0x00519D4E, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF8}, -1, new_VEH_addr + 0x2);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x00519D9B, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // on_key_click(int,int) - MOV AL,byte ptr [ESI + 0x4]
    build_patch(0x00519DEF, std::vector<uint8_t>{0x8A, 0x46, 0x04}, -1, new_VEH_addr + 0xE);
    // on_key_click(int,int) - MOV AL,byte ptr [ESI + 0x6]
    build_patch(0x00519E3D, std::vector<uint8_t>{0x8A, 0x46, 0x06}, -1, new_VEH_addr + 0x10);
    // on_key_click(int,int) - MOV AL,byte ptr [ESI + 0x1a]
    build_patch(0x00519E8B, std::vector<uint8_t>{0x8A, 0x46, 0x1A}, -1, new_VEH_addr + 0x24);
    // on_key_click(int,int) - MOV AL,byte ptr [ESI + 0x1e]
    build_patch(0x00519ED9, std::vector<uint8_t>{0x8A, 0x46, 0x1E}, -1, new_VEH_addr + 0x28);
    // on_key_click(int,int) - MOVSX EAX,word ptr [ESI + 0x24]
    build_patch(0x00519F1F, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x24}, -1, new_VEH_addr + 0x2E);
    // on_key_click(int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x19
    build_patch(0x0051B367, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x19}, 3, new_VEH_addr + 0x11);
    // on_key_click(int,int) - MOV word ptr [EDX*0x4 + 0x95283c],AX
    build_patch(0x0051B37F, std::vector<uint8_t>{0x66, 0x89, 0x04, 0x95, 0x3C, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x14);
    // on_key_click(int,int) - MOV DX,word ptr [EAX + 0x952828]
    build_patch(0x0051B396, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // on_key_click(int,int) - MOV word ptr [EAX + 0x95283e],DX
    build_patch(0x0051B39D, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // on_key_click(int,int) - MOV CX,word ptr [EAX + 0x95282a]
    build_patch(0x0051B3B3, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // on_key_click(int,int) - MOV word ptr [EAX + 0x952846],CX
    build_patch(0x0051B3BA, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // menu_proc(int) - MOV EDX,dword ptr [EDI + 0x96cdc0]
    build_patch(0x0051C19C, std::vector<uint8_t>{0x8B, 0x97, 0xC0, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184CC);
    // menu_proc(int) - MOV ECX,dword ptr [EDI + 0x96cdc4]
    build_patch(0x0051C1A2, std::vector<uint8_t>{0x8B, 0x8F, 0xC4, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D0);
    // menu_proc(int) - MOV ECX,dword ptr [EDI + 0x96cdc8]
    build_patch(0x0051C1B7, std::vector<uint8_t>{0x8B, 0x8F, 0xC8, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D4);
    // menu_proc(int) - MOV ECX,dword ptr [EDI + 0x96cdcc]
    build_patch(0x0051C1C7, std::vector<uint8_t>{0x8B, 0x8F, 0xCC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D8);
    // menu_proc(int) - MOV dword ptr [EDI + 0x96cdc0],EAX
    build_patch(0x0051C1FE, std::vector<uint8_t>{0x89, 0x87, 0xC0, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184CC);
    // menu_proc(int) - MOV dword ptr [EDI + 0x96cdc4],EAX
    build_patch(0x0051C20C, std::vector<uint8_t>{0x89, 0x87, 0xC4, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D0);
    // menu_proc(int) - MOV dword ptr [EDI + 0x96cdc8],EAX
    build_patch(0x0051C21B, std::vector<uint8_t>{0x89, 0x87, 0xC8, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D4);
    // menu_proc(int) - MOV dword ptr [EDI + 0x96cdcc],EAX
    build_patch(0x0051C22A, std::vector<uint8_t>{0x89, 0x87, 0xCC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184D8);
    // menu_proc(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0051C7F0, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // random_events(int) - MOV EAX,dword ptr [ECX*0x4 + 0x96c9e0]
    build_patch(0x00520BA4, std::vector<uint8_t>{0x8B, 0x04, 0x8D, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // random_events(int) - LEA EBX,[ECX*0x4 + 0x95282a]
    build_patch(0x00520CC2, std::vector<uint8_t>{0x8D, 0x1C, 0x8D, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // random_events(int) - LEA ECX,[ECX*0x4 + 0x952832]
    build_patch(0x00520D0C, std::vector<uint8_t>{0x8D, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // random_events(int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x00520F4C, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // random_events(int) - LEA EDI,[EAX*0x4 + 0x95282a]
    build_patch(0x0052113C, std::vector<uint8_t>{0x8D, 0x3C, 0x85, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // alien_fauna(void) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x00522AD2, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alien_fauna(void) - MOV DX,word ptr [EAX + 0x952830]
    build_patch(0x00522ADC, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // alien_fauna(void) - TEST byte ptr [EAX + 0x95284f],DL
    build_patch(0x00522AF9, std::vector<uint8_t>{0x84, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // alien_fauna(void) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00522BBA, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alien_fauna(void) - MOV CX,word ptr [EAX + 0x952830]
    build_patch(0x00522BC4, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // alien_fauna(void) - TEST byte ptr [EAX + 0x95284f],DL
    build_patch(0x00522BE1, std::vector<uint8_t>{0x84, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // alien_fauna(void) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x00522DC7, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alien_fauna(void) - MOV AX,word ptr [EDI + 0x952830]
    build_patch(0x00522DD1, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // alien_fauna(void) - MOV AL,byte ptr [EDI + 0x95284f]
    build_patch(0x00522DE3, std::vector<uint8_t>{0x8A, 0x87, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // alien_fauna(void) - MOV EBX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x00522E40, std::vector<uint8_t>{0x8B, 0x1C, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // alien_fauna(void) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x00522E74, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alien_fauna(void) - MOV AX,word ptr [EDI + 0x952830]
    build_patch(0x00522E7E, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // alien_fauna(void) - TEST byte ptr [EDI + 0x95284f],AL
    build_patch(0x00522E97, std::vector<uint8_t>{0x84, 0x87, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // do_fungal_towers(void) - LEA EDI,[EDX*0x4 + 0x95282c]
    build_patch(0x00522F20, std::vector<uint8_t>{0x8D, 0x3C, 0x95, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // ascent(void) - MOV EAX,dword ptr [EDX*0x4 + 0x96c9e0]
    build_patch(0x00523BAF, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // ascent(void) - MOV dword ptr [EDX*0x4 + 0x96c9e0],EAX
    build_patch(0x00523BC4, std::vector<uint8_t>{0x89, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // set_time_controls(void) - MOV EDX,0x95282c
    build_patch(0x00523D09, std::vector<uint8_t>{0xBA, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // set_time_controls(void) - MOV AL,byte ptr [EDX + 0xa]
    build_patch(0x00523D13, std::vector<uint8_t>{0x8A, 0x42, 0x0A}, -1, new_VEH_addr + 0xE);
    // set_time_controls(void) - MOV AL,byte ptr [EDX + 0xd]
    build_patch(0x00523D1A, std::vector<uint8_t>{0x8A, 0x42, 0x0D}, -1, new_VEH_addr + 0x11);
    // set_time_controls(void) - MOV EAX,dword ptr [EDX]
    build_patch(0x00523D25, std::vector<uint8_t>{0x8B, 0x02}, -1, new_VEH_addr + 0x4);
    // turn_upkeep(void) - LEA ESI,[EDX*0x4 + 0x952832]
    build_patch(0x005258E1, std::vector<uint8_t>{0x8D, 0x34, 0x95, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // turn_upkeep(void) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x00525900, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // turn_upkeep(void) - MOV CL,byte ptr [EAX + 0x94a37a]
    build_patch(0x0052590D, std::vector<uint8_t>{0x8A, 0x88, 0x7A, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC2);
    // turn_upkeep(void) - MOV AL,byte ptr [EDX + 0x94a37a]
    build_patch(0x005259C7, std::vector<uint8_t>{0x8A, 0x82, 0x7A, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC2);
    // turn_upkeep(void) - CMP byte ptr [ECX + 0x94a37a],0x1
    build_patch(0x005259FA, std::vector<uint8_t>{0x80, 0xB9, 0x7A, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC2);
    // turn_upkeep(void) - INC byte ptr [EAX*0x4 + 0x95284d]
    build_patch(0x00525B44, std::vector<uint8_t>{0xFE, 0x04, 0x85, 0x4D, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x25);
    // turn_upkeep(void) - MOV EAX,dword ptr [EDX*0x4 + 0x96c9e0]
    build_patch(0x00525F71, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // turn_upkeep(void) - MOV dword ptr [EDX*0x4 + 0x96c9e0],EAX
    build_patch(0x00525F86, std::vector<uint8_t>{0x89, 0x04, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // repair_phase(int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0052606E, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // repair_phase(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x0052607C, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // repair_phase(int) - MOVSX EDI,word ptr [ESI + 0x95282a]
    build_patch(0x00526083, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // repair_phase(int) - MOV AL,byte ptr [ESI + 0x952838]
    build_patch(0x00526092, std::vector<uint8_t>{0x8A, 0x86, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - MOV byte ptr [ESI + 0x952852],0x0
    build_patch(0x00526098, std::vector<uint8_t>{0xC6, 0x86, 0x52, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x2A);
    // repair_phase(int) - MOV byte ptr [ESI + 0x952850],0x0
    build_patch(0x0052609F, std::vector<uint8_t>{0xC6, 0x86, 0x50, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x28);
    // repair_phase(int) - MOV EBX,dword ptr [ESI + 0x95282c]
    build_patch(0x005260A6, std::vector<uint8_t>{0x8B, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - MOV dword ptr [ESI + 0x95282c],EBX
    build_patch(0x005260BA, std::vector<uint8_t>{0x89, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - AND byte ptr [ESI + 0x952831],0xef
    build_patch(0x005260C0, std::vector<uint8_t>{0x80, 0xA6, 0x31, 0x28, 0x95, 0x00, 0xEF}, 2, new_VEH_addr + 0x9);
    // repair_phase(int) - MOV EBX,dword ptr [ESI + 0x95282c]
    build_patch(0x005260D2, std::vector<uint8_t>{0x8B, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - MOV dword ptr [ESI + 0x95282c],EBX
    build_patch(0x005260DB, std::vector<uint8_t>{0x89, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - MOV AX,word ptr [ESI + 0x952830]
    build_patch(0x005260E1, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // repair_phase(int) - MOV word ptr [ESI + 0x952830],AX
    build_patch(0x005260F2, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // repair_phase(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005260F9, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // repair_phase(int) - MOV AX,word ptr [ESI + 0x952844]
    build_patch(0x00526107, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // repair_phase(int) - MOV word ptr [ESI + 0x952844],AX
    build_patch(0x00526117, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // repair_phase(int) - MOV byte ptr [ESI + 0x952839],AL
    build_patch(0x00526120, std::vector<uint8_t>{0x88, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // repair_phase(int) - MOV EDX,dword ptr [ESI + 0x95282c]
    build_patch(0x00526126, std::vector<uint8_t>{0x8B, 0x96, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x00526161, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOV dword ptr [ESI + 0x95282c],EDX
    build_patch(0x0052619F, std::vector<uint8_t>{0x89, 0x96, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - CMP word ptr [ESI + 0x952832],0x13
    build_patch(0x005261A5, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOV byte ptr [ESI + 0x952836],0x0
    build_patch(0x005261AF, std::vector<uint8_t>{0xC6, 0x86, 0x36, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0xE);
    // repair_phase(int) - MOV AX,word ptr [ESI + 0x952832]
    build_patch(0x005261B6, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - TEST byte ptr [ESI + 0x95282c],0x4
    build_patch(0x005261E1, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x4);
    // repair_phase(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x005261EE, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00526287, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOV CX,word ptr [ESI + 0x952832]
    build_patch(0x00526331, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00526378, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00526424, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0052642D, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x00526470, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // repair_phase(int) - MOV AX,word ptr [ESI + 0x95285a]
    build_patch(0x005264A8, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // repair_phase(int) - MOV AX,word ptr [EAX + 0x95285a]
    build_patch(0x005264BC, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // repair_phase(int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x005264DC, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOVSX EDI,word ptr [EDI + 0x952858]
    build_patch(0x005264FA, std::vector<uint8_t>{0x0F, 0xBF, 0xBF, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // repair_phase(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00526542, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0052654B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - CMP word ptr [ESI + 0x952832],0x40
    build_patch(0x005265FD, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x40}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x0052663B, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - MOV byte ptr [ESI + 0x952838],AL
    build_patch(0x0052666B, std::vector<uint8_t>{0x88, 0x86, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // repair_phase(int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x0052668C, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // repair_phase(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0052669A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // repair_phase(int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x005266E6, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // repair_phase(int) - MOV ESI,0x952836
    build_patch(0x00526719, std::vector<uint8_t>{0xBE, 0x36, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xE);
    // repair_phase(int) - MOV AL,byte ptr [ESI]
    build_patch(0x00526720, std::vector<uint8_t>{0x8A, 0x06}, -1, new_VEH_addr + 0xE);
    // repair_phase(int) - MOVSX EDX,word ptr [ESI + -0xc]
    build_patch(0x00526729, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xF4}, -1, new_VEH_addr + 0x2);
    // repair_phase(int) - MOVSX EDI,word ptr [ESI + -0xe]
    build_patch(0x0052672D, std::vector<uint8_t>{0x0F, 0xBF, 0x7E, 0xF2}, -1, new_VEH_addr + 0x0);
    // repair_phase(int) - TEST byte ptr [ESI + 0x19],AL
    build_patch(0x00526778, std::vector<uint8_t>{0x84, 0x46, 0x19}, -1, new_VEH_addr + 0x27);
    // control_turn(void) - MOV EAX,0x952836
    build_patch(0x00527C45, std::vector<uint8_t>{0xB8, 0x36, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xE);
    // control_turn(void) - MOV DL,byte ptr [EAX]
    build_patch(0x00527C4C, std::vector<uint8_t>{0x8A, 0x10}, -1, new_VEH_addr + 0xE);
    // control_turn(void) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00527C65, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // control_turn(void) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00527C6C, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // control_turn(void) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x00527C7F, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // control_turn(void) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x00527C86, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // mash_planes(void) - LEA ESI,[EDX*0x4 + 0x952832]
    build_patch(0x00529C20, std::vector<uint8_t>{0x8D, 0x34, 0x95, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // mash_planes(void) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x00529C3F, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // mash_planes(void) - MOV CL,byte ptr [EAX + 0x94a37a]
    build_patch(0x00529C4C, std::vector<uint8_t>{0x8A, 0x88, 0x7A, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC2);
    // net_control_turn(void) - MOV ECX,0x952836
    build_patch(0x0052A579, std::vector<uint8_t>{0xB9, 0x36, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xE);
    // net_control_turn(void) - MOV BL,byte ptr [ECX]
    build_patch(0x0052A580, std::vector<uint8_t>{0x8A, 0x19}, -1, new_VEH_addr + 0xE);
    // net_control_turn(void) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x0052A597, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // net_control_turn(void) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x0052A59E, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // call_council(int) - MOV ESI,dword ptr [EDX*0x4 + 0x96c9e4]
    build_patch(0x0052CF77, std::vector<uint8_t>{0x8B, 0x34, 0x95, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // call_council(int) - MOV ECX,dword ptr [EAX*0x4 + 0x96cddc]
    build_patch(0x0052D5E3, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0xDC, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x184E8);
    // add_deletion(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0052DE84, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // add_deletion(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0052DE8B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // game_checksum(int_*) - MOV ESI,0x95282a
    build_patch(0x0052FB48, std::vector<uint8_t>{0xBE, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // game_checksum(int_*) - LEA EBX,[ESI + 0xc]
    build_patch(0x0052FB4D, std::vector<uint8_t>{0x8D, 0x5E, 0x0C}, -1, new_VEH_addr + 0xE);
    // game_checksum(int_*) - MOV DL,byte ptr [EBX]
    build_patch(0x0052FB52, std::vector<uint8_t>{0x8A, 0x13}, -1, new_VEH_addr + 0xE);
    // game_checksum(int_*) - LEA ECX,[ESI + -0x2]
    build_patch(0x0052FB5F, std::vector<uint8_t>{0x8D, 0x4E, 0xFE}, -1, new_VEH_addr + 0x0);
    // game_checksum(int_*) - PUSH ECX
    build_patch(0x0052FB65, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0x0);
    // game_checksum(int_*) - PUSH ESI
    build_patch(0x0052FB74, std::vector<uint8_t>{0x56}, -1, new_VEH_addr + 0x2);
    // game_checksum(int_*) - LEA ECX,[ESI + 0x8]
    build_patch(0x0052FB7D, std::vector<uint8_t>{0x8D, 0x4E, 0x08}, -1, new_VEH_addr + 0xA);
    // game_checksum(int_*) - PUSH ECX
    build_patch(0x0052FB86, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0xA);
    // game_checksum(int_*) - PUSH EBX
    build_patch(0x0052FB95, std::vector<uint8_t>{0x53}, -1, new_VEH_addr + 0xE);
    // game_checksum(int_*) - LEA ECX,[ESI + 0xe]
    build_patch(0x0052FB9E, std::vector<uint8_t>{0x8D, 0x4E, 0x0E}, -1, new_VEH_addr + 0x10);
    // game_checksum(int_*) - PUSH ECX
    build_patch(0x0052FBA7, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0x10);
    // game_checksum(int_*) - LEA EAX,[ESI + 0x22]
    build_patch(0x0052FBB0, std::vector<uint8_t>{0x8D, 0x46, 0x22}, -1, new_VEH_addr + 0x24);
    // game_checksum(int_*) - PUSH EAX
    build_patch(0x0052FBB9, std::vector<uint8_t>{0x50}, -1, new_VEH_addr + 0x24);
    // game_checksum(int_*) - LEA EDX,[ESI + 0x26]
    build_patch(0x0052FBC8, std::vector<uint8_t>{0x8D, 0x56, 0x26}, -1, new_VEH_addr + 0x28);
    // game_checksum(int_*) - PUSH EDX
    build_patch(0x0052FBCE, std::vector<uint8_t>{0x52}, -1, new_VEH_addr + 0x28);
    // game_checksum(int_*) - LEA ECX,[ESI + 0x2c]
    build_patch(0x0052FBD7, std::vector<uint8_t>{0x8D, 0x4E, 0x2C}, -1, new_VEH_addr + 0x2E);
    // game_checksum(int_*) - PUSH ECX
    build_patch(0x0052FBE0, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0x2E);
    // game_checksum(int_*) - MOV ESI,0x952828
    build_patch(0x0053019F, std::vector<uint8_t>{0xBE, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // game_checksum(int_*) - MOV DL,byte ptr [ESI + 0xe]
    build_patch(0x005301A6, std::vector<uint8_t>{0x8A, 0x56, 0x0E}, -1, new_VEH_addr + 0xE);
    // game_checksum(int_*) - PUSH ESI
    build_patch(0x005301B3, std::vector<uint8_t>{0x56}, -1, new_VEH_addr + 0x0);
    // game_checksum(int_*) - LEA EDX,[ESI + 0x2]
    build_patch(0x005301BC, std::vector<uint8_t>{0x8D, 0x56, 0x02}, -1, new_VEH_addr + 0x2);
    // game_checksum(int_*) - PUSH EDX
    build_patch(0x005301C5, std::vector<uint8_t>{0x52}, -1, new_VEH_addr + 0x2);
    // game_checksum(int_*) - LEA ECX,[ESI + 0xa]
    build_patch(0x005301CE, std::vector<uint8_t>{0x8D, 0x4E, 0x0A}, -1, new_VEH_addr + 0xA);
    // game_checksum(int_*) - PUSH ECX
    build_patch(0x005301D7, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0xA);
    // game_checksum(int_*) - LEA EAX,[ESI + 0x24]
    build_patch(0x005301E0, std::vector<uint8_t>{0x8D, 0x46, 0x24}, -1, new_VEH_addr + 0x24);
    // game_checksum(int_*) - PUSH EAX
    build_patch(0x005301E9, std::vector<uint8_t>{0x50}, -1, new_VEH_addr + 0x24);
    // game_checksum(int_*) - LEA EDX,[ESI + 0x28]
    build_patch(0x005301F2, std::vector<uint8_t>{0x8D, 0x56, 0x28}, -1, new_VEH_addr + 0x28);
    // game_checksum(int_*) - PUSH EDX
    build_patch(0x005301FB, std::vector<uint8_t>{0x52}, -1, new_VEH_addr + 0x28);
    // game_checksum(int_*) - LEA ECX,[ESI + 0x2e]
    build_patch(0x00530204, std::vector<uint8_t>{0x8D, 0x4E, 0x2E}, -1, new_VEH_addr + 0x2E);
    // game_checksum(int_*) - PUSH ECX
    build_patch(0x0053020D, std::vector<uint8_t>{0x51}, -1, new_VEH_addr + 0x2E);
    // lock_veh(int_*,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00531096, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // lock_veh(int_*,int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0053109D, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // automated_lock(int_*,int) - MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x0053117A, std::vector<uint8_t>{0x0F, 0xBE, 0x0C, 0x95, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // automated_lock(int_*,int) - MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x005312BC, std::vector<uint8_t>{0x0F, 0xBE, 0x0C, 0x95, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x00531846, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOVSX EBX,word ptr [EAX + 0x95282a]
    build_patch(0x00531873, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00531881, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV byte ptr [EAX*0x4 + 0x952854],0x0
    build_patch(0x005318AF, std::vector<uint8_t>{0xC6, 0x04, 0x85, 0x54, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x2C);
    // order_veh(int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00531964, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x005319D0, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV ESI,dword ptr [EAX + 0x95282c]
    build_patch(0x005319D7, std::vector<uint8_t>{0x8B, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EAX + 0x95282c],ESI
    build_patch(0x005319E3, std::vector<uint8_t>{0x89, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952850]
    build_patch(0x00531AEB, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x50, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00531B12, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],BL
    build_patch(0x00531BAF, std::vector<uint8_t>{0x88, 0x98, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV ESI,dword ptr [EAX + 0x95282c]
    build_patch(0x00531BB5, std::vector<uint8_t>{0x8B, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EAX + 0x95282c],ESI
    build_patch(0x00531BC1, std::vector<uint8_t>{0x89, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - TEST dword ptr [EDX*0x4 + 0x95282c],0x80000
    build_patch(0x00531CDB, std::vector<uint8_t>{0xF7, 0x04, 0x95, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x08, 0x00}, 3, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00531D20, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV ESI,dword ptr [EAX + 0x95282c]
    build_patch(0x00531D27, std::vector<uint8_t>{0x8B, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EAX + 0x95282c],ESI
    build_patch(0x00531D33, std::vector<uint8_t>{0x89, 0xB0, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00531FF3, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952850]
    build_patch(0x00532013, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x50, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x00532039, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // veh_drop(int,int,int) - MOV AL,byte ptr [EDX + 0x952836]
    build_patch(0x0053220D, std::vector<uint8_t>{0x8A, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_drop(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x005322A4, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_drop(int,int,int) - MOV EBX,dword ptr [EAX + 0x95282c]
    build_patch(0x005322AB, std::vector<uint8_t>{0x8B, 0x98, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_drop(int,int,int) - MOV dword ptr [EAX + 0x95282c],EBX
    build_patch(0x005322B7, std::vector<uint8_t>{0x89, 0x98, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_drop(int,int,int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00532382, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // action(int,int) - MOV AL,byte ptr [EAX*0x4 + 0x952839]
    build_patch(0x005325A4, std::vector<uint8_t>{0x8A, 0x04, 0x85, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // action(int,int) - MOVSX EDX,byte ptr [EAX*0x4 + 0x952839]
    build_patch(0x005326F5, std::vector<uint8_t>{0x0F, 0xBE, 0x14, 0x85, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // rebuild_vehicle_bits(void) - MOV ESI,0x95282a
    build_patch(0x00532AE1, std::vector<uint8_t>{0xBE, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // rebuild_vehicle_bits(void) - MOVSX EBX,word ptr [ESI + -0x2]
    build_patch(0x00532AE6, std::vector<uint8_t>{0x0F, 0xBF, 0x5E, 0xFE}, -1, new_VEH_addr + 0x0);
    // rebuild_vehicle_bits(void) - MOVSX EDX,word ptr [ESI]
    build_patch(0x00532AEE, std::vector<uint8_t>{0x0F, 0xBF, 0x16}, -1, new_VEH_addr + 0x2);
    // rebuild_vehicle_bits(void) - MOV CL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00532B22, std::vector<uint8_t>{0x8A, 0x0C, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x00532FAA, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x00532FB1, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x00532FD5, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x00532FDC, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x00533594, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // synch(short,int,int,int,char_*,int,short) - LEA ECX,[EAX + 0x952828]
    build_patch(0x0053359B, std::vector<uint8_t>{0x8D, 0x88, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x005335A4, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // synch(short,int,int,int,char_*,int,short) - ADD ESI,0x952828
    build_patch(0x005335B5, std::vector<uint8_t>{0x81, 0xC6, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // synch(short,int,int,int,char_*,int,short) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x00533979, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x00533987, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // synch(short,int,int,int,char_*,int,short) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0053399E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // synch(short,int,int,int,char_*,int,short) - CMP EAX,0x952830
    build_patch(0x00533DC1, std::vector<uint8_t>{0x3D, 0x30, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x8);
    // process_message(char_*,ulong,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005367AE, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // process_message(char_*,ulong,int) - MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]
    build_patch(0x005368E9, std::vector<uint8_t>{0x0F, 0xBE, 0x0C, 0x95, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // process_message(char_*,ulong,int) - MOV byte ptr [ECX*0x4 + 0x952839],DL
    build_patch(0x00536A2F, std::vector<uint8_t>{0x88, 0x14, 0x8D, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // diplomacy_check(int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x0053AFAE, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // pact_withdraw(int,int) - MOV ESI,0x95282a
    build_patch(0x0053C38F, std::vector<uint8_t>{0xBE, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // pact_withdraw(int,int) - MOV AL,byte ptr [ESI + 0xc]
    build_patch(0x0053C399, std::vector<uint8_t>{0x8A, 0x46, 0x0C}, -1, new_VEH_addr + 0xE);
    // pact_withdraw(int,int) - MOVSX ECX,word ptr [ESI]
    build_patch(0x0053C3A4, std::vector<uint8_t>{0x0F, 0xBF, 0x0E}, -1, new_VEH_addr + 0x2);
    // pact_withdraw(int,int) - MOVSX EDX,word ptr [ESI + -0x2]
    build_patch(0x0053C3A7, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xFE}, -1, new_VEH_addr + 0x0);
    // pact_withdraw(int,int) - MOVSX EDX,word ptr [ESI]
    build_patch(0x0053C3D6, std::vector<uint8_t>{0x0F, 0xBF, 0x16}, -1, new_VEH_addr + 0x2);
    // pact_withdraw(int,int) - MOVSX EAX,word ptr [ESI + -0x2]
    build_patch(0x0053C3D9, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xFE}, -1, new_VEH_addr + 0x0);
    // pact_withdraw(int,int) - MOVSX EDX,word ptr [ESI + 0x8]
    build_patch(0x0053C42D, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0x08}, -1, new_VEH_addr + 0xA);
    // pact_withdraw(int,int) - CMP byte ptr [EAX + 0x94a379],0x1
    build_patch(0x0053C442, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // pact_withdraw(int,int) - MOVSX EAX,word ptr [ESI + 0x8]
    build_patch(0x0053C47F, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x08}, -1, new_VEH_addr + 0xA);
    // pact_withdraw(int,int) - CMP byte ptr [EDX + 0x94a379],0x1
    build_patch(0x0053C496, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // pact_withdraw(int,int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x0053C49F, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0x2);
    // pact_withdraw(int,int) - MOVSX ECX,word ptr [ESI + -0x2]
    build_patch(0x0053C4A9, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xFE}, -1, new_VEH_addr + 0x0);
    // pact_withdraw(int,int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x0053C4E7, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0x2);
    // pact_withdraw(int,int) - MOVSX ECX,word ptr [ESI + -0x2]
    build_patch(0x0053C4EA, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0xFE}, -1, new_VEH_addr + 0x0);
    // pact_withdraw(int,int) - MOV byte ptr [ESI + 0xf],0x0
    build_patch(0x0053C5C7, std::vector<uint8_t>{0xC6, 0x46, 0x0F, 0x00}, -1, new_VEH_addr + 0x11);
    // pact_withdraw(int,int) - MOV EDX,dword ptr [ESI + 0x2]
    build_patch(0x0053C5CB, std::vector<uint8_t>{0x8B, 0x56, 0x02}, -1, new_VEH_addr + 0x4);
    // pact_withdraw(int,int) - MOV dword ptr [ESI + 0x2],EDX
    build_patch(0x0053C5D6, std::vector<uint8_t>{0x89, 0x56, 0x02}, -1, new_VEH_addr + 0x4);
    // pact_withdraw(int,int) - MOVSX EAX,word ptr [ESI + 0x8]
    build_patch(0x0053C5DC, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x08}, -1, new_VEH_addr + 0xA);
    // pact_withdraw(int,int) - CMP byte ptr [EDX + 0x94a379],0x2
    build_patch(0x0053C5F1, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // pact_withdraw(int,int) - MOV byte ptr [ESI + 0x23],0x0
    build_patch(0x0053C5FA, std::vector<uint8_t>{0xC6, 0x46, 0x23, 0x00}, -1, new_VEH_addr + 0x25);
    // tech_trade(int,int,int,int,int) - MOV ECX,dword ptr [EAX*0x4 + 0x96cd3c]
    build_patch(0x005413BB, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // tech_trade(int,int,int,int,int) - CMP dword ptr [EAX*0x4 + 0x96c9e4],0x5
    build_patch(0x0054178C, std::vector<uint8_t>{0x83, 0x3C, 0x85, 0xE4, 0xC9, 0x96, 0x00, 0x05}, -1, new_VEH_addr + 0x180F0);
    // propose_pact(int,int) - CMP dword ptr [EDX*0x4 + 0x96c9e4],0x6
    build_patch(0x00543C35, std::vector<uint8_t>{0x83, 0x3C, 0x95, 0xE4, 0xC9, 0x96, 0x00, 0x06}, -1, new_VEH_addr + 0x180F0);
    // propose_pact(int,int) - MOV ECX,dword ptr [EAX + 0x96c9e4]
    build_patch(0x00543D93, std::vector<uint8_t>{0x8B, 0x88, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // propose_pact(int,int) - MOV EBX,dword ptr [EAX + 0x96da40]
    build_patch(0x00543DC8, std::vector<uint8_t>{0x8B, 0x98, 0x40, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x1914C);
    // propose_pact(int,int) - CMP EDX,dword ptr [EAX*0x4 + 0x96c9e4]
    build_patch(0x0054450A, std::vector<uint8_t>{0x3B, 0x14, 0x85, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // propose_treaty(int,int) - MOV EAX,dword ptr [EAX*0x4 + 0x96da40]
    build_patch(0x00544EEC, std::vector<uint8_t>{0x8B, 0x04, 0x85, 0x40, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x1914C);
    // propose_attack(int,int) - MOV CL,byte ptr [EAX + EDX*0x4 + 0x96db5c]
    build_patch(0x005460C3, std::vector<uint8_t>{0x8A, 0x8C, 0x90, 0x5C, 0xDB, 0x96, 0x00}, -1, new_VEH_addr + 0x19269);
    // propose_attack(int,int) - MOV EDX,dword ptr [ECX + 0x96cb04]
    build_patch(0x00546108, std::vector<uint8_t>{0x8B, 0x91, 0x04, 0xCB, 0x96, 0x00}, -1, new_VEH_addr + 0x18210);
    // propose_attack(int,int) - MOV EAX,dword ptr [ECX + 0x96da40]
    build_patch(0x0054612E, std::vector<uint8_t>{0x8B, 0x81, 0x40, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x1914C);
    // propose_attack(int,int) - MOV ECX,dword ptr [ECX + 0x96c9e4]
    build_patch(0x00546137, std::vector<uint8_t>{0x8B, 0x89, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // propose_attack(int,int) - CMP dword ptr [EDX + 0x96c9e4],0x5
    build_patch(0x00546275, std::vector<uint8_t>{0x83, 0xBA, 0xE4, 0xC9, 0x96, 0x00, 0x05}, -1, new_VEH_addr + 0x180F0);
    // propose_attack(int,int) - MOV EDX,dword ptr [EDX + 0x96cb04]
    build_patch(0x005462E5, std::vector<uint8_t>{0x8B, 0x92, 0x04, 0xCB, 0x96, 0x00}, -1, new_VEH_addr + 0x18210);
    // propose_attack(int,int) - CMP dword ptr [ECX + 0x96c9e4],EAX
    build_patch(0x005463CB, std::vector<uint8_t>{0x39, 0x81, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // propose_attack(int,int) - MOV EDX,dword ptr [ECX + 0x96c9e4]
    build_patch(0x005464BC, std::vector<uint8_t>{0x8B, 0x91, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // propose_attack(int,int) - MOV EAX,dword ptr [ECX + 0x96c9e4]
    build_patch(0x005464D2, std::vector<uint8_t>{0x8B, 0x81, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // dont_withdrawal(int,int) - MOV EBX,0x952832
    build_patch(0x00548E1F, std::vector<uint8_t>{0xBB, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // dont_withdrawal(int,int) - MOV dword ptr [EBP + -0x4],EBX
    build_patch(0x00548E24, std::vector<uint8_t>{0x89, 0x5D, 0xFC}, -1, new_VEH_addr + 0xA);
    // dont_withdrawal(int,int) - MOV AL,byte ptr [EBX + 0x4]
    build_patch(0x00548E2E, std::vector<uint8_t>{0x8A, 0x43, 0x04}, -1, new_VEH_addr + 0xE);
    // dont_withdrawal(int,int) - MOVSX ECX,word ptr [EBX]
    build_patch(0x00548E39, std::vector<uint8_t>{0x0F, 0xBF, 0x0B}, -1, new_VEH_addr + 0xA);
    // dont_withdrawal(int,int) - MOVSX EDI,word ptr [EBX + -0x8]
    build_patch(0x00548E4C, std::vector<uint8_t>{0x0F, 0xBF, 0x7B, 0xF8}, -1, new_VEH_addr + 0x2);
    // dont_withdrawal(int,int) - MOVSX ESI,word ptr [EBX + -0xa]
    build_patch(0x00548E55, std::vector<uint8_t>{0x0F, 0xBF, 0x73, 0xF6}, -1, new_VEH_addr + 0x0);
    // dont_withdrawal(int,int) - CMP byte ptr [ECX + 0x7],0x18
    build_patch(0x00548EDA, std::vector<uint8_t>{0x80, 0x79, 0x07, 0x18}, -1, new_VEH_addr + 0x11);
    // dont_withdrawal(int,int) - MOVSX EAX,word ptr [ECX + 0xa]
    build_patch(0x00548EE0, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0x0A}, -1, new_VEH_addr + 0x14);
    // dont_withdrawal(int,int) - MOVSX ECX,word ptr [ECX + 0x12]
    build_patch(0x00548EE4, std::vector<uint8_t>{0x0F, 0xBF, 0x49, 0x12}, -1, new_VEH_addr + 0x1C);
    // dont_withdrawal(int,int) - MOV dword ptr [EBP + -0x4],EBX
    build_patch(0x00548F6B, std::vector<uint8_t>{0x89, 0x5D, 0xFC}, -1, new_VEH_addr + 0x3E);
    // do_withdrawal(int,int) - MOV ESI,0x952828
    build_patch(0x00548F9F, std::vector<uint8_t>{0xBE, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // do_withdrawal(int,int) - MOV AL,byte ptr [ESI + 0xe]
    build_patch(0x00548FA9, std::vector<uint8_t>{0x8A, 0x46, 0x0E}, -1, new_VEH_addr + 0xE);
    // do_withdrawal(int,int) - MOVSX EAX,word ptr [ESI + 0xa]
    build_patch(0x00548FB4, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x0A}, -1, new_VEH_addr + 0xA);
    // do_withdrawal(int,int) - MOVSX EBX,word ptr [ESI + 0x2]
    build_patch(0x00548FCE, std::vector<uint8_t>{0x0F, 0xBF, 0x5E, 0x02}, -1, new_VEH_addr + 0x2);
    // do_withdrawal(int,int) - MOVSX EDI,word ptr [ESI]
    build_patch(0x00548FDA, std::vector<uint8_t>{0x0F, 0xBF, 0x3E}, -1, new_VEH_addr + 0x0);
    // do_withdrawal(int,int) - MOV AL,byte ptr [ECX + 0x94a379]
    build_patch(0x00549023, std::vector<uint8_t>{0x8A, 0x81, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // do_withdrawal(int,int) - MOV byte ptr [ESI + 0x27],0x0
    build_patch(0x00549159, std::vector<uint8_t>{0xC6, 0x46, 0x27, 0x00}, -1, new_VEH_addr + 0x27);
    // do_withdrawal(int,int) - MOV byte ptr [ESI + 0x11],0x0
    build_patch(0x00549160, std::vector<uint8_t>{0xC6, 0x46, 0x11, 0x00}, -1, new_VEH_addr + 0x11);
    // do_withdrawal(int,int) - MOV EAX,dword ptr [ESI + 0x4]
    build_patch(0x00549164, std::vector<uint8_t>{0x8B, 0x46, 0x04}, -1, new_VEH_addr + 0x4);
    // do_withdrawal(int,int) - MOV dword ptr [ESI + 0x4],EAX
    build_patch(0x0054916E, std::vector<uint8_t>{0x89, 0x46, 0x04}, -1, new_VEH_addr + 0x4);
    // do_withdrawal(int,int) - MOV byte ptr [ESI + 0x27],0x0
    build_patch(0x005491DD, std::vector<uint8_t>{0xC6, 0x46, 0x27, 0x00}, -1, new_VEH_addr + 0x27);
    // do_withdrawal(int,int) - MOV byte ptr [ESI + 0x11],0x0
    build_patch(0x005491E1, std::vector<uint8_t>{0xC6, 0x46, 0x11, 0x00}, -1, new_VEH_addr + 0x11);
    // do_withdrawal(int,int) - MOV EAX,dword ptr [ESI + 0x4]
    build_patch(0x005491E5, std::vector<uint8_t>{0x8B, 0x46, 0x04}, -1, new_VEH_addr + 0x4);
    // do_withdrawal(int,int) - MOV dword ptr [ESI + 0x4],EAX
    build_patch(0x005491F0, std::vector<uint8_t>{0x89, 0x46, 0x04}, -1, new_VEH_addr + 0x4);
    // do_withdrawal(int,int) - MOVSX ECX,word ptr [ESI + 0xa]
    build_patch(0x005491F5, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0x0A}, -1, new_VEH_addr + 0xA);
    // threaten(int,int) - MOV EAX,dword ptr [EAX*0x4 + 0x96c9e4]
    build_patch(0x00549E88, std::vector<uint8_t>{0x8B, 0x04, 0x85, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // threaten(int,int) - MOV EAX,dword ptr [EAX*0x4 + 0x96c9e4]
    build_patch(0x00549EB8, std::vector<uint8_t>{0x8B, 0x04, 0x85, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // threaten(int,int) - MOV EAX,dword ptr [EDX*0x4 + 0x96da40]
    build_patch(0x0054A069, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x40, 0xDA, 0x96, 0x00}, -1, new_VEH_addr + 0x1914C);
    // battle_plans(int,int) - MOV ECX,0x95282c
    build_patch(0x0054B9E4, std::vector<uint8_t>{0xB9, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // battle_plans(int,int) - MOV AL,byte ptr [ECX + 0xa]
    build_patch(0x0054B9ED, std::vector<uint8_t>{0x8A, 0x41, 0x0A}, -1, new_VEH_addr + 0xE);
    // battle_plans(int,int) - MOV EAX,dword ptr [ECX]
    build_patch(0x0054B9F4, std::vector<uint8_t>{0x8B, 0x01}, -1, new_VEH_addr + 0x4);
    // battle_plans(int,int) - MOV dword ptr [ECX],EAX
    build_patch(0x0054BA02, std::vector<uint8_t>{0x89, 0x01}, -1, new_VEH_addr + 0x4);
    // value_of_base(int,int,int,int,int) - MOV AX,word ptr [EAX + 0x95285a]
    build_patch(0x0054CE96, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // value_of_base(int,int,int,int,int) - MOV AX,word ptr [EDX + 0x95285a]
    build_patch(0x0054CEAA, std::vector<uint8_t>{0x66, 0x8B, 0x82, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // value_of_base(int,int,int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x0054CEC4, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // value_of_base(int,int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952832]
    build_patch(0x0054CECE, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // value_of_base(int,int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952858]
    build_patch(0x0054CEE7, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // give_a_base(int,int) - ADD ESI,0x952832
    build_patch(0x0054D031, std::vector<uint8_t>{0x81, 0xC6, 0x32, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xA);
    // give_a_base(int,int) - CMP byte ptr [EDX + 0x94a379],0x1
    build_patch(0x0054D118, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // give_a_base(int,int) - ADD EDI,0x952856
    build_patch(0x0054D3AB, std::vector<uint8_t>{0x81, 0xC7, 0x56, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2E);
    // communicate(int,int,int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e4]
    build_patch(0x00551FB9, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // pick_top_veh(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005593FF, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // pick_top_veh(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x00559415, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // pick_top_veh(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00559456, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // pick_top_veh(int) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x00559460, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // pick_top_veh(int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x00559488, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // pick_top_veh(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x005594B0, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // pick_top_veh(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005594D3, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x00559542, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00559572, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0055974E, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV DI,word ptr [EDI + 0x952832]
    build_patch(0x005597FC, std::vector<uint8_t>{0x66, 0x8B, 0xBF, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x005599C0, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV DL,byte ptr [ECX + 0x952850]
    build_patch(0x00559A01, std::vector<uint8_t>{0x8A, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV CL,byte ptr [EDX + 0x952850]
    build_patch(0x00559A2F, std::vector<uint8_t>{0x8A, 0x8A, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00559C30, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV DL,byte ptr [ESI + 0x952838]
    build_patch(0x00559C75, std::vector<uint8_t>{0x8A, 0x96, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOVSX EAX,byte ptr [ECX + 0x952839]
    build_patch(0x00559E3D, std::vector<uint8_t>{0x0F, 0xBE, 0x81, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x00559F50, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x00559F6C, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x00559F91, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - CMP byte ptr [ESI + 0x95284e],0xb
    build_patch(0x00559FA0, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - TEST dword ptr [ESI + 0x95282c],EDI
    build_patch(0x00559FBA, std::vector<uint8_t>{0x85, 0xBE, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - CMP byte ptr [ESI + 0x95284e],0xa
    build_patch(0x00559FC2, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV DL,byte ptr [ESI + 0x952853]
    build_patch(0x0055A031, std::vector<uint8_t>{0x8A, 0x96, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x0055A040, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x0055A089, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - MOV CL,byte ptr [ESI + 0x952853]
    build_patch(0x0055A0C2, std::vector<uint8_t>{0x8A, 0x8E, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // veh_draw(Buffer_*,int,int,int,int,int,int) - TEST dword ptr [ESI + 0x95282c],0x8000000
    build_patch(0x0055A0D4, std::vector<uint8_t>{0xF7, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // veh_scoot(int,int,int,int,int) - MOV byte ptr [EDX*0x4 + 0x952851],AL
    build_patch(0x0055A525, std::vector<uint8_t>{0x88, 0x04, 0x95, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // veh_scoot(int,int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0055A548, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // veh_scoot(int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0055A59A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_scoot(int,int,int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0055A623, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_scoot(int,int,int,int,int) - MOV byte ptr [ESI + 0x952851],DL
    build_patch(0x0055A63A, std::vector<uint8_t>{0x88, 0x96, 0x51, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x29);
    // base_draw(Buffer_*,int,int,int,int,int) - MOV ECX,dword ptr [EDX*0x4 + 0x96c9e0]
    build_patch(0x0055B48A, std::vector<uint8_t>{0x8B, 0x0C, 0x95, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // enemies_trade_tech(int,int) - MOV EDX,dword ptr [EDX*0x4 + 0x96cd3c]
    build_patch(0x0055D6DD, std::vector<uint8_t>{0x8B, 0x14, 0x95, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // enemies_trade_tech(int,int) - MOV EAX,dword ptr [EAX*0x4 + 0x96cd3c]
    build_patch(0x0055D726, std::vector<uint8_t>{0x8B, 0x04, 0x85, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // territory(int,int,int,int_*,int_*) - MOV ESI,0x952832
    build_patch(0x0055ECD1, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // territory(int,int,int,int_*,int_*) - MOV EBX,dword ptr [ESI + -0x6]
    build_patch(0x0055ECD6, std::vector<uint8_t>{0x8B, 0x5E, 0xFA}, -1, new_VEH_addr + 0x4);
    // territory(int,int,int,int_*,int_*) - MOV dword ptr [ESI + -0x6],EBX
    build_patch(0x0055ECDE, std::vector<uint8_t>{0x89, 0x5E, 0xFA}, -1, new_VEH_addr + 0x4);
    // territory(int,int,int,int_*,int_*) - MOV AL,byte ptr [ESI + 0x4]
    build_patch(0x0055ECE1, std::vector<uint8_t>{0x8A, 0x46, 0x04}, -1, new_VEH_addr + 0xE);
    // territory(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI]
    build_patch(0x0055ECEC, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0xA);
    // territory(int,int,int,int_*,int_*) - CMP byte ptr [ESI + 0x7],0x3
    build_patch(0x0055ED04, std::vector<uint8_t>{0x80, 0x7E, 0x07, 0x03}, -1, new_VEH_addr + 0x11);
    // territory(int,int,int,int_*,int_*) - MOVSX EBX,word ptr [ESI + -0x8]
    build_patch(0x0055ED0E, std::vector<uint8_t>{0x0F, 0xBF, 0x5E, 0xF8}, -1, new_VEH_addr + 0x2);
    // territory(int,int,int,int_*,int_*) - MOVSX EDI,word ptr [ESI + -0xa]
    build_patch(0x0055ED17, std::vector<uint8_t>{0x0F, 0xBF, 0x7E, 0xF6}, -1, new_VEH_addr + 0x0);
    // territory(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + -0xa]
    build_patch(0x0055ED5C, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF6}, -1, new_VEH_addr + 0x0);
    // territory(int,int,int,int_*,int_*) - MOV EDX,dword ptr [ESI + -0x6]
    build_patch(0x0055ED89, std::vector<uint8_t>{0x8B, 0x56, 0xFA}, -1, new_VEH_addr + 0x4);
    // territory(int,int,int,int_*,int_*) - MOV dword ptr [ESI + -0x6],EDX
    build_patch(0x0055EDA0, std::vector<uint8_t>{0x89, 0x56, 0xFA}, -1, new_VEH_addr + 0x4);
    // territory(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + -0x8]
    build_patch(0x0055EDC6, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xF8}, -1, new_VEH_addr + 0x2);
    // territory(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + -0xa]
    build_patch(0x0055EDD0, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xF6}, -1, new_VEH_addr + 0x0);
    // territory(int,int,int,int_*,int_*) - TEST byte ptr [ESI + -0x2],0x1
    build_patch(0x0055EE4A, std::vector<uint8_t>{0xF6, 0x46, 0xFE, 0x01}, -1, new_VEH_addr + 0x8);
    // territory(int,int,int,int_*,int_*) - OR byte ptr [ESI + -0x2],0x3
    build_patch(0x0055EE52, std::vector<uint8_t>{0x80, 0x4E, 0xFE, 0x03}, -1, new_VEH_addr + 0x8);
    // territory(int,int,int,int_*,int_*) - MOV EAX,dword ptr [ESI + -0x6]
    build_patch(0x0055EE56, std::vector<uint8_t>{0x8B, 0x46, 0xFA}, -1, new_VEH_addr + 0x4);
    // territory(int,int,int,int_*,int_*) - MOV dword ptr [ESI + -0x6],EAX
    build_patch(0x0055EE71, std::vector<uint8_t>{0x89, 0x46, 0xFA}, -1, new_VEH_addr + 0x4);
    // go_to(int,char,int,int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x00560AE6, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // go_to(int,char,int,int) - MOV byte ptr [EAX + 0x952853],DL
    build_patch(0x00560AED, std::vector<uint8_t>{0x88, 0x90, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // go_to(int,char,int,int) - MOV word ptr [EAX + 0x95283c],CX
    build_patch(0x00560AF7, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // go_to(int,char,int,int) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x00560AFE, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // go_to(int,char,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00560B05, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // go_to(int,char,int,int) - MOV byte ptr [EAX + 0x95284d],0x0
    build_patch(0x00560B1C, std::vector<uint8_t>{0xC6, 0x80, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_strategy(int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x00561699, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EBX + 0x952832]
    build_patch(0x005616D7, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x00561717, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOV CL,byte ptr [EAX + 0x94a37d]
    build_patch(0x00561724, std::vector<uint8_t>{0x8A, 0x88, 0x7D, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC5);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x0056174B, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV AL,byte ptr [EDX + 0x94a37d]
    build_patch(0x00561763, std::vector<uint8_t>{0x8A, 0x82, 0x7D, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC5);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00561783, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP byte ptr [EDX + 0x94a379],0x1
    build_patch(0x005617AA, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x005617B7, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x005617C3, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x0056180F, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOV AX,word ptr [EBX + 0x952830]
    build_patch(0x00561819, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // enemy_strategy(int) - TEST byte ptr [EBX + 0x95284f],AL
    build_patch(0x0056182E, std::vector<uint8_t>{0x84, 0x83, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x00561868, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EBX + 0x95282a]
    build_patch(0x0056186F, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EBX + 0x952832]
    build_patch(0x0056188D, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV CL,byte ptr [EAX + 0x94a379]
    build_patch(0x005618EB, std::vector<uint8_t>{0x8A, 0x88, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOV AL,byte ptr [EBX + 0x952837]
    build_patch(0x005618F1, std::vector<uint8_t>{0x8A, 0x83, 0x37, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xF);
    // enemy_strategy(int) - MOV byte ptr [EBX + 0x952837],AL
    build_patch(0x00561907, std::vector<uint8_t>{0x88, 0x83, 0x37, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xF);
    // enemy_strategy(int) - AND word ptr [EBX + 0x952830],0xfbbf
    build_patch(0x0056190F, std::vector<uint8_t>{0x66, 0x81, 0xA3, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x00561929, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV AL,byte ptr [EBX + 0x952853]
    build_patch(0x00561972, std::vector<uint8_t>{0x8A, 0x83, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00561990, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952839],0x2
    build_patch(0x005619D8, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00561A92, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00561AD7, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP AL,byte ptr [EDX + 0x94a379]
    build_patch(0x00561B0D, std::vector<uint8_t>{0x3A, 0x82, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00561B93, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x00561BC9, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - TEST byte ptr [EBX + 0x952830],0x20
    build_patch(0x00561C21, std::vector<uint8_t>{0xF6, 0x83, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952839],0x2
    build_patch(0x00561C86, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952853],0x31
    build_patch(0x00561D2D, std::vector<uint8_t>{0x80, 0xBB, 0x53, 0x28, 0x95, 0x00, 0x31}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV ECX,dword ptr [EBX + 0x95282c]
    build_patch(0x00561D47, std::vector<uint8_t>{0x8B, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [EBX + 0x95282c],ECX
    build_patch(0x00561D58, std::vector<uint8_t>{0x89, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952839],0x1
    build_patch(0x00561D65, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOV byte ptr [EBX + 0x952839],0x0
    build_patch(0x00561D7C, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952839],0x1
    build_patch(0x00561DDB, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - TEST byte ptr [EBX + 0x952830],0x20
    build_patch(0x00561E2C, std::vector<uint8_t>{0xF6, 0x83, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // enemy_strategy(int) - TEST byte ptr [EBX + 0x952830],0x20
    build_patch(0x00561E4A, std::vector<uint8_t>{0xF6, 0x83, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // enemy_strategy(int) - TEST dword ptr [EBX + 0x95282c],0x40000
    build_patch(0x00561E6F, std::vector<uint8_t>{0xF7, 0x83, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x04, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00561E7F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00561E86, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952853],0x46
    build_patch(0x00561E9D, std::vector<uint8_t>{0x80, 0xBB, 0x53, 0x28, 0x95, 0x00, 0x46}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EBX + 0x952856]
    build_patch(0x00561EA6, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - OR dword ptr [EBX + 0x95282c],0x10000000
    build_patch(0x00561F24, std::vector<uint8_t>{0x81, 0x8B, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x10}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV AL,byte ptr [EBX + 0x952853]
    build_patch(0x00561F2E, std::vector<uint8_t>{0x8A, 0x83, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV AX,word ptr [EBX + 0x952856]
    build_patch(0x00561F40, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - CMP CX,word ptr [EBX + 0x952828]
    build_patch(0x00561F66, std::vector<uint8_t>{0x66, 0x3B, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_strategy(int) - CMP CX,word ptr [EBX + 0x95282a]
    build_patch(0x00561F76, std::vector<uint8_t>{0x66, 0x3B, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_strategy(int) - AND byte ptr [EBX + 0x952831],0xf7
    build_patch(0x00561F9E, std::vector<uint8_t>{0x80, 0xA3, 0x31, 0x28, 0x95, 0x00, 0xF7}, 2, new_VEH_addr + 0x9);
    // enemy_strategy(int) - MOV BX,word ptr [EBX + 0x952856]
    build_patch(0x00561FA5, std::vector<uint8_t>{0x66, 0x8B, 0x9B, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOVSX EDX,word ptr [ECX + 0x952856]
    build_patch(0x00562038, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x0056209D, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005620A4, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOV word ptr [EAX + 0x952856],CX
    build_patch(0x00562166, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x00562341, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00562362, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP byte ptr [EBX + 0x952839],0x2
    build_patch(0x005623BD, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOV ESI,dword ptr [EBX + 0x95282c]
    build_patch(0x00562405, std::vector<uint8_t>{0x8B, 0xB3, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [EBX + 0x95282c],ESI
    build_patch(0x005624AA, std::vector<uint8_t>{0x89, 0xB3, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV EBX,0x952832
    build_patch(0x00562569, std::vector<uint8_t>{0xBB, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV AL,byte ptr [EBX + 0x4]
    build_patch(0x00562573, std::vector<uint8_t>{0x8A, 0x43, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOV DX,word ptr [EBX]
    build_patch(0x0056257A, std::vector<uint8_t>{0x66, 0x8B, 0x13}, -1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP byte ptr [ECX + 0x94a379],0x1
    build_patch(0x00562593, std::vector<uint8_t>{0x80, 0xB9, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x005625D1, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - LEA EAX,[EAX + 0x95282c]
    build_patch(0x005625D7, std::vector<uint8_t>{0x8D, 0x80, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [EAX],ECX
    build_patch(0x005625E3, std::vector<uint8_t>{0x89, 0x08}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV ECX,0x952832
    build_patch(0x005625F2, std::vector<uint8_t>{0xB9, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV DL,byte ptr [ECX + 0x4]
    build_patch(0x00562604, std::vector<uint8_t>{0x8A, 0x51, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOVSX EAX,word ptr [ECX]
    build_patch(0x0056260B, std::vector<uint8_t>{0x0F, 0xBF, 0x01}, -1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOVSX EAX,word ptr [ECX + -0x8]
    build_patch(0x0056261A, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX EDX,word ptr [ECX + -0xa]
    build_patch(0x00562625, std::vector<uint8_t>{0x0F, 0xBF, 0x51, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_strategy(int) - OR word ptr [ECX + -0x2],SI
    build_patch(0x00562663, std::vector<uint8_t>{0x66, 0x09, 0x71, 0xFE}, -1, new_VEH_addr + 0x8);
    // enemy_strategy(int) - MOV AX,word ptr [ECX + 0x24]
    build_patch(0x00562667, std::vector<uint8_t>{0x66, 0x8B, 0x41, 0x24}, -1, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOV ECX,0x95282c
    build_patch(0x0056290A, std::vector<uint8_t>{0xB9, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV AL,byte ptr [ECX + 0xa]
    build_patch(0x00562913, std::vector<uint8_t>{0x8A, 0x41, 0x0A}, -1, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOV EAX,dword ptr [ECX]
    build_patch(0x0056291A, std::vector<uint8_t>{0x8B, 0x01}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [ECX],EAX
    build_patch(0x00562928, std::vector<uint8_t>{0x89, 0x01}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV ECX,0x95282c
    build_patch(0x00562F44, std::vector<uint8_t>{0xB9, 0x2C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV AL,byte ptr [ECX + 0xa]
    build_patch(0x00562F4D, std::vector<uint8_t>{0x8A, 0x41, 0x0A}, -1, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOV EAX,dword ptr [ECX]
    build_patch(0x00562F55, std::vector<uint8_t>{0x8B, 0x01}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [ECX],EAX
    build_patch(0x00562F63, std::vector<uint8_t>{0x89, 0x01}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV ESI,0x95282a
    build_patch(0x00563806, std::vector<uint8_t>{0xBE, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOV CL,byte ptr [ESI + 0xc]
    build_patch(0x00563810, std::vector<uint8_t>{0x8A, 0x4E, 0x0C}, -1, new_VEH_addr + 0xE);
    // enemy_strategy(int) - TEST dword ptr [ESI + 0x2],0x60000
    build_patch(0x0056381B, std::vector<uint8_t>{0xF7, 0x46, 0x02, 0x00, 0x00, 0x06, 0x00}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOVSX ECX,word ptr [ESI + 0x8]
    build_patch(0x00563828, std::vector<uint8_t>{0x0F, 0xBF, 0x4E, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV DL,byte ptr [EAX + 0x94a379]
    build_patch(0x0056384E, std::vector<uint8_t>{0x8A, 0x90, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOVSX ECX,word ptr [ESI]
    build_patch(0x0056386F, std::vector<uint8_t>{0x0F, 0xBF, 0x0E}, -1, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX EDX,word ptr [ESI + -0x2]
    build_patch(0x00563872, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0xFE}, -1, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOV AL,byte ptr [ESI + 0xf]
    build_patch(0x005638A2, std::vector<uint8_t>{0x8A, 0x46, 0x0F}, -1, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOVSX EDI,word ptr [ESI]
    build_patch(0x005638BF, std::vector<uint8_t>{0x0F, 0xBF, 0x3E}, -1, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX EAX,word ptr [ESI + -0x2]
    build_patch(0x005638D1, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0xFE}, -1, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOVSX EAX,word ptr [ESI + 0x8]
    build_patch(0x00563947, std::vector<uint8_t>{0x0F, 0xBF, 0x46, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOVSX EDX,word ptr [ESI + 0x8]
    build_patch(0x00563960, std::vector<uint8_t>{0x0F, 0xBF, 0x56, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV EDX,dword ptr [ESI + 0x2]
    build_patch(0x00563992, std::vector<uint8_t>{0x8B, 0x56, 0x02}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [ESI + 0x2],EDX
    build_patch(0x005639AA, std::vector<uint8_t>{0x89, 0x56, 0x02}, -1, new_VEH_addr + 0x4);
    // enemy_strategy(int) - ADD EAX,0x952853
    build_patch(0x00563A40, std::vector<uint8_t>{0x05, 0x53, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x00563A91, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_strategy(int) - CMP byte ptr [EDX + 0x952853],0x32
    build_patch(0x00563AAC, std::vector<uint8_t>{0x80, 0xBA, 0x53, 0x28, 0x95, 0x00, 0x32}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EDI + 0x95282a]
    build_patch(0x00563AC1, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x00563AC8, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EDI + 0x952832]
    build_patch(0x00563AEF, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - CMP byte ptr [EDI + 0x952853],0x31
    build_patch(0x00563B1A, std::vector<uint8_t>{0x80, 0xBF, 0x53, 0x28, 0x95, 0x00, 0x31}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00563B4A, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00563B55, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x00563B5D, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EAX + 0x952832]
    build_patch(0x00563B91, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV DL,byte ptr [EAX + 0x95284e]
    build_patch(0x00563BA4, std::vector<uint8_t>{0x8A, 0x90, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_strategy(int) - MOV DL,byte ptr [EAX + 0x95283b]
    build_patch(0x00563BD7, std::vector<uint8_t>{0x8A, 0x90, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // enemy_strategy(int) - MOV BL,byte ptr [EAX + 0x95283a]
    build_patch(0x00563BDD, std::vector<uint8_t>{0x8A, 0x98, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_strategy(int) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x00563CFD, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV dword ptr [EDI + 0x95282c],ECX
    build_patch(0x00563D3A, std::vector<uint8_t>{0x89, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00563D45, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV CL,byte ptr [EDX + 0x94a379]
    build_patch(0x00563D5F, std::vector<uint8_t>{0x8A, 0x8A, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x00563E8F, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOV byte ptr [EDI + 0x952839],0x18
    build_patch(0x00563EB3, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOV byte ptr [EDI + 0x952853],0x30
    build_patch(0x00563EBA, std::vector<uint8_t>{0xC6, 0x87, 0x53, 0x28, 0x95, 0x00, 0x30}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV word ptr [EDI + 0x95283c],AX
    build_patch(0x00563EC1, std::vector<uint8_t>{0x66, 0x89, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_strategy(int) - MOV word ptr [EDI + 0x952844],DX
    build_patch(0x00563EC8, std::vector<uint8_t>{0x66, 0x89, 0x97, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00563ECF, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x00563EE9, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_strategy(int) - CMP byte ptr [EDI + 0x952853],0x46
    build_patch(0x00563F24, std::vector<uint8_t>{0x80, 0xBF, 0x53, 0x28, 0x95, 0x00, 0x46}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV EDX,dword ptr [EDI + 0x95282c]
    build_patch(0x00563F3D, std::vector<uint8_t>{0x8B, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - CMP byte ptr [EDI + 0x952839],0x2
    build_patch(0x00563F61, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOV AX,word ptr [EDI + 0x952830]
    build_patch(0x0056401E, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // enemy_strategy(int) - CMP byte ptr [EDX + 0x952839],0x2
    build_patch(0x005640A4, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EDX + 0x952832]
    build_patch(0x00564117, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV AL,byte ptr [EAX + 0x94a379]
    build_patch(0x00564130, std::vector<uint8_t>{0x8A, 0x80, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - TEST byte ptr [EAX + 0x95282f],0x10
    build_patch(0x00564360, std::vector<uint8_t>{0xF6, 0x80, 0x2F, 0x28, 0x95, 0x00, 0x10}, 2, new_VEH_addr + 0x7);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EAX + 0x952832]
    build_patch(0x005643D3, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV AL,byte ptr [ESI + 0x94a378]
    build_patch(0x005643ED, std::vector<uint8_t>{0x8A, 0x86, 0x78, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC0);
    // enemy_strategy(int) - TEST dword ptr [EAX + 0x95282c],0x10000000
    build_patch(0x005644C0, std::vector<uint8_t>{0xF7, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x10}, 2, new_VEH_addr + 0x4);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EDX + 0x952856]
    build_patch(0x00564542, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOV dword ptr [EBP + -0x1c],0x952832
    build_patch(0x0056456B, std::vector<uint8_t>{0xC7, 0x45, 0xE4, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV AL,byte ptr [ECX + 0x4]
    build_patch(0x00564577, std::vector<uint8_t>{0x8A, 0x41, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EDX]
    build_patch(0x00564588, std::vector<uint8_t>{0x0F, 0xBF, 0x02}, -1, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOVSX ESI,word ptr [EAX + -0x8]
    build_patch(0x005645BA, std::vector<uint8_t>{0x0F, 0xBF, 0x70, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_strategy(int) - MOVSX EAX,word ptr [EAX + -0xa]
    build_patch(0x005645BE, std::vector<uint8_t>{0x0F, 0xBF, 0x40, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EDX + 0x24]
    build_patch(0x00564642, std::vector<uint8_t>{0x0F, 0xBF, 0x52, 0x24}, -1, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOV dword ptr [EBP + -0x1c],EDX
    build_patch(0x0056466B, std::vector<uint8_t>{0x89, 0x55, 0xE4}, -1, new_VEH_addr + 0x3E);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EDX + 0x952856]
    build_patch(0x00564693, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_strategy(int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x00564714, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOVSX EDX,word ptr [EDI + 0x952832]
    build_patch(0x00564728, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV CL,byte ptr [EAX + 0x94a379]
    build_patch(0x00564740, std::vector<uint8_t>{0x8A, 0x88, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_strategy(int) - MOV DL,byte ptr [ECX + 0x952853]
    build_patch(0x00564787, std::vector<uint8_t>{0x8A, 0x91, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x005647A1, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_strategy(int) - MOV byte ptr [ECX + 0x952853],0x31
    build_patch(0x005647AD, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x31}, 2, new_VEH_addr + 0x2B);
    // enemy_strategy(int) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x005647C0, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_strategy(int) - MOV word ptr [ECX + 0x952844],SI
    build_patch(0x005647C7, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_strategy(int) - MOVSX EDI,word ptr [ECX + 0x952832]
    build_patch(0x005647CE, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_strategy(int) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x005647E1, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_strategy(int) - OR dword ptr [ECX + 0x95282c],0x40000000
    build_patch(0x005647F5, std::vector<uint8_t>{0x81, 0x89, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x40}, 2, new_VEH_addr + 0x4);
    // set_course(int,char,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005648A7, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_course(int,char,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005648AE, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // set_course(int,char,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00564914, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // set_course(int,char,int,int) - MOVSX EDI,word ptr [ESI + 0x952828]
    build_patch(0x0056491B, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // set_course(int,char,int,int) - MOV byte ptr [ESI + 0x952839],0x18
    build_patch(0x00564947, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // set_course(int,char,int,int) - MOV byte ptr [ESI + 0x952853],CL
    build_patch(0x0056494E, std::vector<uint8_t>{0x88, 0x8E, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // set_course(int,char,int,int) - MOV word ptr [ESI + 0x95283c],DX
    build_patch(0x00564954, std::vector<uint8_t>{0x66, 0x89, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // set_course(int,char,int,int) - MOV word ptr [ESI + 0x952844],AX
    build_patch(0x0056495B, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // set_course(int,char,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00564962, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // set_course(int,char,int,int) - MOV byte ptr [ESI + 0x95284d],0x0
    build_patch(0x0056497D, std::vector<uint8_t>{0xC6, 0x86, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // set_course(int,char,int,int) - MOV byte ptr [ESI + 0x952839],0x18
    build_patch(0x00564B30, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // set_course(int,char,int,int) - MOV byte ptr [ESI + 0x952853],DL
    build_patch(0x00564B37, std::vector<uint8_t>{0x88, 0x96, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // set_course(int,char,int,int) - MOV word ptr [ESI + 0x95283c],BX
    build_patch(0x00564B3D, std::vector<uint8_t>{0x66, 0x89, 0x9E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // set_course(int,char,int,int) - MOV word ptr [ESI + 0x952844],AX
    build_patch(0x00564B44, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // set_course(int,char,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00564B4B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // set_course(int,char,int,int) - MOV byte ptr [ESI + 0x95284d],0x0
    build_patch(0x00564B62, std::vector<uint8_t>{0xC6, 0x86, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // compute_odds(int,int,int,int,int) - MOVSX EDI,word ptr [EBX + 0x952828]
    build_patch(0x00565F3E, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00565F50, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOVSX ESI,word ptr [EBX + 0x95282a]
    build_patch(0x00565F58, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00565FEA, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0056606D, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0056608C, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - TEST byte ptr [EBX + 0x952830],0x20
    build_patch(0x00566187, std::vector<uint8_t>{0xF6, 0x83, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005661AA, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00566220, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOV BL,byte ptr [EBX + 0x952839]
    build_patch(0x00566287, std::vector<uint8_t>{0x8A, 0x9B, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // compute_odds(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00566308, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0056636B, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005663F1, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00566498, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00566509, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // compute_odds(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00566568, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // alien_base(int,int,int) - CMP word ptr [EAX + 0x952832],0xe
    build_patch(0x0056664D, std::vector<uint8_t>{0x66, 0x83, 0xB8, 0x32, 0x28, 0x95, 0x00, 0x0E}, 3, new_VEH_addr + 0xA);
    // alien_base(int,int,int) - MOVSX EDX,word ptr [ECX + 0x952856]
    build_patch(0x0056676E, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // alien_base(int,int,int) - MOV DL,byte ptr [ECX + 0x95284e]
    build_patch(0x00566789, std::vector<uint8_t>{0x8A, 0x91, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // alien_move(int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x0056683C, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // alien_move(int) - MOV DX,word ptr [ESI + 0x952830]
    build_patch(0x00566859, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // alien_move(int) - CMP word ptr [ESI + 0x952832],0xc
    build_patch(0x0056687D, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x0C}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x00566899, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // alien_move(int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x005668A0, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // alien_move(int) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x0056694F, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // alien_move(int) - MOV byte ptr [ESI + 0x95284d],CL
    build_patch(0x0056695A, std::vector<uint8_t>{0x88, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // alien_move(int) - CMP byte ptr [ESI + 0x95284d],0x18
    build_patch(0x00566989, std::vector<uint8_t>{0x80, 0xBE, 0x4D, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x25);
    // alien_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00566B1B, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // alien_move(int) - MOVSX EDI,word ptr [EAX + 0x952844]
    build_patch(0x00566B28, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // alien_move(int) - MOVSX ECX,word ptr [EAX + 0x95283c]
    build_patch(0x00566B2F, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // alien_move(int) - MOV byte ptr [EBX + 0x952839],0x0
    build_patch(0x00566BAF, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // alien_move(int) - MOV EDX,dword ptr [EBX + 0x95282c]
    build_patch(0x00566BB6, std::vector<uint8_t>{0x8B, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // alien_move(int) - MOV dword ptr [EBX + 0x95282c],EDX
    build_patch(0x00566BC3, std::vector<uint8_t>{0x89, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // alien_move(int) - MOV AX,word ptr [EAX + 0x95285a]
    build_patch(0x00566C06, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // alien_move(int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x00566C1B, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // alien_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00566C35, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // alien_move(int) - OR byte ptr [EAX + 0x95284f],DL
    build_patch(0x00566C3C, std::vector<uint8_t>{0x08, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // alien_move(int) - MOVSX ECX,word ptr [EAX + 0x952858]
    build_patch(0x00566C46, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // alien_move(int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x00566C70, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alien_move(int) - MOV AX,word ptr [ESI + 0x952830]
    build_patch(0x00566C7A, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // alien_move(int) - MOV AL,byte ptr [ESI + 0x95284f]
    build_patch(0x00566C8C, std::vector<uint8_t>{0x8A, 0x86, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // alien_move(int) - CMP word ptr [ESI + 0x952832],0xf
    build_patch(0x00566CDF, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x0F}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - CMP word ptr [ESI + 0x952832],0xf
    build_patch(0x00566D22, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x0F}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00566DEC, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOV CL,byte ptr [ESI + 0x95284d]
    build_patch(0x00566E16, std::vector<uint8_t>{0x8A, 0x8E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // alien_move(int) - MOV CL,byte ptr [ESI + 0x95284e]
    build_patch(0x00566E76, std::vector<uint8_t>{0x8A, 0x8E, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // alien_move(int) - CMP word ptr [ESI + 0x952832],0xe
    build_patch(0x00566E8A, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x0E}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOV word ptr [ESI + 0x95283c],DX
    build_patch(0x00566EAD, std::vector<uint8_t>{0x66, 0x89, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // alien_move(int) - MOV word ptr [ESI + 0x952844],AX
    build_patch(0x00566EB4, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // alien_move(int) - MOVSX ECX,byte ptr [ESI + 0x952851]
    build_patch(0x00566EC5, std::vector<uint8_t>{0x0F, 0xBE, 0x8E, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // alien_move(int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x00566ECF, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00567369, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOV CX,word ptr [ECX + 0x952832]
    build_patch(0x0056739D, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056741B, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x005674D0, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alien_move(int) - MOV AX,word ptr [EAX + 0x952832]
    build_patch(0x005674DE, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00567532, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x005675A6, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // alien_move(int) - MOV AL,byte ptr [EBX + 0x952838]
    build_patch(0x00567652, std::vector<uint8_t>{0x8A, 0x83, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // alien_move(int) - MOV CL,byte ptr [EBX + 0x952850]
    build_patch(0x005676C3, std::vector<uint8_t>{0x8A, 0x8B, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // alien_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005676E9, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alien_move(int) - MOV AL,byte ptr [EBX + 0x952850]
    build_patch(0x005677AF, std::vector<uint8_t>{0x8A, 0x83, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // alien_move(int) - MOV AL,byte ptr [EBX + 0x952838]
    build_patch(0x005677B9, std::vector<uint8_t>{0x8A, 0x83, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // alien_move(int) - MOV byte ptr [EBX + 0x952839],0x58
    build_patch(0x00567879, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x58}, 2, new_VEH_addr + 0x11);
    // alien_move(int) - MOV word ptr [EBX + 0x95283c],AX
    build_patch(0x00567896, std::vector<uint8_t>{0x66, 0x89, 0x83, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // alien_move(int) - MOV word ptr [EBX + 0x952844],AX
    build_patch(0x005678A9, std::vector<uint8_t>{0x66, 0x89, 0x83, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x005678D8, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x95283c]
    build_patch(0x005678E4, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952844]
    build_patch(0x005678F2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00567908, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x00567932, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00567966, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x005679B4, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // air_power(int,int,int,int_*,int_*) - MOV CL,byte ptr [EDX + 0x952838]
    build_patch(0x005679D7, std::vector<uint8_t>{0x8A, 0x8A, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // air_power(int,int,int,int_*,int_*) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x005679FE, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00567A2F, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [ECX + 0x95284d]
    build_patch(0x00567A57, std::vector<uint8_t>{0x8A, 0x81, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00567A80, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [EDX + 0x95284d]
    build_patch(0x00567AAE, std::vector<uint8_t>{0x8A, 0x82, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00567AC6, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [EDX + 0x95282c]
    build_patch(0x00567ADE, std::vector<uint8_t>{0x8B, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x95284e],0xb
    build_patch(0x00567AED, std::vector<uint8_t>{0x80, 0xBA, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x95284e],0xc
    build_patch(0x00567AFA, std::vector<uint8_t>{0x80, 0xBA, 0x4E, 0x28, 0x95, 0x00, 0x0C}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [EDX + 0x952838]
    build_patch(0x00567B03, std::vector<uint8_t>{0x8A, 0x82, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x95284e],0xa
    build_patch(0x00567B2C, std::vector<uint8_t>{0x80, 0xBA, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x00567D10, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x61
    build_patch(0x00567D17, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x61}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],AX
    build_patch(0x00567D1E, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],DX
    build_patch(0x00567D25, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00567D2C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x00567D49, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x00567E32, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x63
    build_patch(0x00567E39, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x63}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x00567E54, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],AX
    build_patch(0x00567E5B, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00567E62, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x00567E7F, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x00567E93, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00567EAD, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x0056837F, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952853],0x4d
    build_patch(0x00568386, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x4D}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x95283c],CX
    build_patch(0x0056838D, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x00568394, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056839B, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x95284d],0x0
    build_patch(0x005683B5, std::vector<uint8_t>{0xC6, 0x80, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x005683E1, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x6d
    build_patch(0x005683E8, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x6D}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x005683EF, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],BX
    build_patch(0x005683F6, std::vector<uint8_t>{0x66, 0x89, 0x99, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005683FD, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x0056841A, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x00568803, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952853],0x4d
    build_patch(0x0056880A, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x4D}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x95283c],CX
    build_patch(0x00568811, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x952844],DX
    build_patch(0x00568818, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056881F, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x95284d],0x0
    build_patch(0x00568839, std::vector<uint8_t>{0xC6, 0x80, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056885E, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x6d
    build_patch(0x00568865, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x6D}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x0056886C, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],BX
    build_patch(0x00568873, std::vector<uint8_t>{0x66, 0x89, 0x99, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0056887A, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x00568895, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00568915, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x0056894F, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x00568980, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x00568987, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [EBX + 0x952839]
    build_patch(0x00568997, std::vector<uint8_t>{0x8A, 0x83, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x005689AF, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x005689C1, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x005689EB, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDI,word ptr [EBX + 0x95282a]
    build_patch(0x00568A02, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x00568A23, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x00568A7E, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOV AX,word ptr [EBX + 0x952830]
    build_patch(0x00568A88, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [EBX + 0x95284f]
    build_patch(0x00568A9D, std::vector<uint8_t>{0x8A, 0x83, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00568AD3, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x00568B00, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x00568B07, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00568C7C, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00568C8A, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00568CAE, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00568CB5, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x00568D8F, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00568D9B, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [EBX + 0x95282a]
    build_patch(0x00568E2D, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x00568E40, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x00568F3A, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDI,word ptr [EBX + 0x95282a]
    build_patch(0x00568F47, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x00568FA3, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952853],0x4d
    build_patch(0x00568FAA, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x4D}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x00568FB1, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x952844],CX
    build_patch(0x00568FB8, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00568FBF, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x00568FD9, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [EBX + 0x952828]
    build_patch(0x00568FF7, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x00568FFE, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x00569005, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x6d
    build_patch(0x0056900C, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x6D}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x00569013, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],AX
    build_patch(0x0056901A, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00569021, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x00569038, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00569057, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x00569064, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EDI + 0x95283c]
    build_patch(0x00569072, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EDI + 0x952844]
    build_patch(0x005690AF, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x005690B8, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x95284f],0x0
    build_patch(0x005690BF, std::vector<uint8_t>{0xC6, 0x87, 0x4F, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x27);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x005690ED, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005690F4, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EDI + 0x95283c]
    build_patch(0x00569186, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x005691AB, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x95284f],0x0
    build_patch(0x00569223, std::vector<uint8_t>{0xC6, 0x87, 0x4F, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x27);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x952851],BL
    build_patch(0x0056923B, std::vector<uint8_t>{0x88, 0x9F, 0x51, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x29);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x0056924D, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDX + 0x95284f],0x0
    build_patch(0x00569397, std::vector<uint8_t>{0xC6, 0x82, 0x4F, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x27);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005693BE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [ESI + 0x95284e],0xc
    build_patch(0x005693DC, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x0C}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x00569424, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00569435, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x0056946F, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x0056947B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x005694EB, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00569521, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00569564, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EBX,word ptr [ESI + 0x95282a]
    build_patch(0x0056956D, std::vector<uint8_t>{0x0F, 0xBF, 0x9E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x00569601, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x00569616, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00569624, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDI,word ptr [ESI + 0x95282a]
    build_patch(0x00569664, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x00569685, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x005696D9, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOV AX,word ptr [ESI + 0x952830]
    build_patch(0x005696E3, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [ESI + 0x95284f]
    build_patch(0x005696F5, std::vector<uint8_t>{0x8A, 0x86, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // air_power(int,int,int,int_*,int_*) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0056971C, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00569735, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00569761, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x00569778, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [ECX + 0x95284e],0xb
    build_patch(0x00569783, std::vector<uint8_t>{0x80, 0xB9, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x00569790, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00569797, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005697C7, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005697D5, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0056980C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00569888, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056989F, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x95284e],0xc
    build_patch(0x005698AA, std::vector<uint8_t>{0x80, 0xB8, 0x4E, 0x28, 0x95, 0x00, 0x0C}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005698CD, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005698E8, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005698F6, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00569966, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x0056996D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x00569987, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x0056998E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV EAX,dword ptr [EDX + 0x95282c]
    build_patch(0x005699C0, std::vector<uint8_t>{0x8B, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x95284e],0xc
    build_patch(0x005699CD, std::vector<uint8_t>{0x80, 0xB8, 0x4E, 0x28, 0x95, 0x00, 0x0C}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005699D6, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005699E4, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x00569A43, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x00569A53, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x00569AA8, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x00569AB6, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00569B4A, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOVSX ESI,word ptr [ECX + 0x952828]
    build_patch(0x00569B74, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x00569B7B, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDX + 0x952839],0x18
    build_patch(0x00569B82, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDX + 0x952853],0x61
    build_patch(0x00569B89, std::vector<uint8_t>{0xC6, 0x82, 0x53, 0x28, 0x95, 0x00, 0x61}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EDX + 0x95283c],SI
    build_patch(0x00569B90, std::vector<uint8_t>{0x66, 0x89, 0xB2, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EDX + 0x952844],AX
    build_patch(0x00569B97, std::vector<uint8_t>{0x66, 0x89, 0x82, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00569B9E, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDX + 0x95284d],0x0
    build_patch(0x00569BB5, std::vector<uint8_t>{0xC6, 0x82, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x00569BBF, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ECX + 0x95282a]
    build_patch(0x00569BD1, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOV EDX,dword ptr [EBX + 0x95282c]
    build_patch(0x00569BED, std::vector<uint8_t>{0x8B, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EBX + 0x95284e],0xb
    build_patch(0x00569BFB, std::vector<uint8_t>{0x80, 0xBB, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00569C0B, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x95284e],0xc
    build_patch(0x00569C2D, std::vector<uint8_t>{0x80, 0xBA, 0x4E, 0x28, 0x95, 0x00, 0x0C}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952828]
    build_patch(0x00569C3F, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ECX + 0x95282a]
    build_patch(0x00569C46, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EBX + 0x952839],0x18
    build_patch(0x00569CF4, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EBX + 0x952853],0x61
    build_patch(0x00569CFB, std::vector<uint8_t>{0xC6, 0x83, 0x53, 0x28, 0x95, 0x00, 0x61}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EBX + 0x95283c],CX
    build_patch(0x00569D02, std::vector<uint8_t>{0x66, 0x89, 0x8B, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EBX + 0x952844],DX
    build_patch(0x00569D0C, std::vector<uint8_t>{0x66, 0x89, 0x93, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00569D13, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EBX + 0x95284d],0x0
    build_patch(0x00569D2A, std::vector<uint8_t>{0xC6, 0x83, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EBX + 0x952839],0x18
    build_patch(0x00569D4F, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00569D67, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x00569DA7, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [ECX + 0x95284e],0xb
    build_patch(0x00569DB8, std::vector<uint8_t>{0x80, 0xB9, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00569DD5, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x00569EA7, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00569ED5, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00569F01, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - TEST byte ptr [EBX + 0x95284f],DL
    build_patch(0x00569FB9, std::vector<uint8_t>{0x84, 0x93, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00569FE7, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00569FFD, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV BL,byte ptr [EBX + 0x952839]
    build_patch(0x0056A08A, std::vector<uint8_t>{0x8A, 0x9B, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x0056A0BB, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EAX + 0x952853],0x4c
    build_patch(0x0056A0C2, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x4C}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x95283c],DI
    build_patch(0x0056A0C9, std::vector<uint8_t>{0x66, 0x89, 0xB8, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EAX + 0x952844],CX
    build_patch(0x0056A0D0, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056A0D7, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x0056A0F1, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x0056A111, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056A131, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV DX,word ptr [ECX + 0x95283e]
    build_patch(0x0056A13A, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // air_power(int,int,int,int_*,int_*) - CMP word ptr [ECX + 0x952828],DX
    build_patch(0x0056A141, std::vector<uint8_t>{0x66, 0x39, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV AX,word ptr [ECX + 0x95282a]
    build_patch(0x0056A14A, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - CMP AX,word ptr [ECX + 0x952846]
    build_patch(0x0056A151, std::vector<uint8_t>{0x66, 0x3B, 0x81, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952846]
    build_patch(0x0056A15A, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056A164, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x6c
    build_patch(0x0056A16B, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x6C}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x0056A172, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],AX
    build_patch(0x0056A179, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0056A180, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x0056A197, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [EDX + 0x952832]
    build_patch(0x0056A1B9, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EDX + 0x95284e],0xa
    build_patch(0x0056A1D9, std::vector<uint8_t>{0x80, 0xBA, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056A241, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x95284e],0xa
    build_patch(0x0056A24C, std::vector<uint8_t>{0x80, 0xB8, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - CMP DX,word ptr [EAX + 0x95283e]
    build_patch(0x0056A25B, std::vector<uint8_t>{0x66, 0x3B, 0x90, 0x3E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x16);
    // air_power(int,int,int,int_*,int_*) - CMP CX,word ptr [EDX + 0x952846]
    build_patch(0x0056A271, std::vector<uint8_t>{0x66, 0x3B, 0x8A, 0x46, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1E);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056A2A5, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x95284e],0xa
    build_patch(0x0056A2B0, std::vector<uint8_t>{0x80, 0xB8, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x0056A2CF, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x0056A2D6, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x0056A2FB, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // air_power(int,int,int,int_*,int_*) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x0056A309, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056A4AB, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x95284e],0xa
    build_patch(0x0056A4B6, std::vector<uint8_t>{0x80, 0xB8, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056A710, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x952853],0x61
    build_patch(0x0056A717, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x61}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x95283c],BX
    build_patch(0x0056A71E, std::vector<uint8_t>{0x66, 0x89, 0x99, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [ECX + 0x952844],DX
    build_patch(0x0056A725, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0056A72C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x0056A747, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x952839],0x18
    build_patch(0x0056A80C, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x952853],0x61
    build_patch(0x0056A813, std::vector<uint8_t>{0xC6, 0x87, 0x53, 0x28, 0x95, 0x00, 0x61}, 2, new_VEH_addr + 0x2B);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EDI + 0x95283c],AX
    build_patch(0x0056A81A, std::vector<uint8_t>{0x66, 0x89, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // air_power(int,int,int,int_*,int_*) - MOV word ptr [EDI + 0x952844],CX
    build_patch(0x0056A821, std::vector<uint8_t>{0x66, 0x89, 0x8F, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // air_power(int,int,int,int_*,int_*) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0056A828, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // air_power(int,int,int,int_*,int_*) - MOV byte ptr [EDI + 0x95284d],0x0
    build_patch(0x0056A83F, std::vector<uint8_t>{0xC6, 0x87, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x0056A864, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // air_power(int,int,int,int_*,int_*) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056A87C, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // air_power(int,int,int,int_*,int_*) - CMP byte ptr [EAX + 0x95284e],0xa
    build_patch(0x0056A887, std::vector<uint8_t>{0x80, 0xB8, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // enemy_planet_buster(int) - MOV BL,byte ptr [EAX + 0x952836]
    build_patch(0x0056A8BF, std::vector<uint8_t>{0x8A, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_planet_buster(int) - MOV ECX,0x952832
    build_patch(0x0056A936, std::vector<uint8_t>{0xB9, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_planet_buster(int) - MOV AL,byte ptr [ECX + 0x4]
    build_patch(0x0056A93F, std::vector<uint8_t>{0x8A, 0x41, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_planet_buster(int) - MOVSX EAX,word ptr [ECX]
    build_patch(0x0056A946, std::vector<uint8_t>{0x0F, 0xBF, 0x01}, -1, new_VEH_addr + 0xA);
    // enemy_planet_buster(int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x0056AA3B, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_planet_buster(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0056AA42, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_planet_buster(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0056B032, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_planet_buster(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0056B060, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_planet_buster(int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x0056B076, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_planet_buster(int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x0056B085, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_planet_buster(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x0056B197, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_planet_buster(int) - MOV byte ptr [EAX + 0x95284f],0x0
    build_patch(0x0056B2C9, std::vector<uint8_t>{0xC6, 0x80, 0x4F, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x27);
    // enemy_planet_buster(int) - MOV byte ptr [EDX + 0x95284f],0x0
    build_patch(0x0056B301, std::vector<uint8_t>{0xC6, 0x82, 0x4F, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x27);
    // get_there(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0056B333, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // get_there(int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0056B36B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // get_there(int,int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x0056B372, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOV DL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x0056B624, std::vector<uint8_t>{0x8A, 0x14, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x0056B64B, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x0056B66D, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EDI,word ptr [EBX + 0x95282a]
    build_patch(0x0056B685, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX ESI,word ptr [EBX + 0x952828]
    build_patch(0x0056B694, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x0056B706, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV AL,byte ptr [EBX + 0x952838]
    build_patch(0x0056B77E, std::vector<uint8_t>{0x8A, 0x83, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0056B78C, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0056B7E0, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0056B83A, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV EBX,dword ptr [EDI + 0x95282c]
    build_patch(0x0056B950, std::vector<uint8_t>{0x8B, 0x9F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV DX,word ptr [EDI + 0x952830]
    build_patch(0x0056B976, std::vector<uint8_t>{0x66, 0x8B, 0x97, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // enemy_move(int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x0056B9C5, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x0056B9E9, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0056BA47, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95284e]
    build_patch(0x0056BA52, std::vector<uint8_t>{0x8A, 0x87, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056BBBA, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056BC22, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x0056BC34, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x0056BC7C, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // enemy_move(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x0056BC91, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // enemy_move(int) - TEST dword ptr [ECX + 0x95282c],ESI
    build_patch(0x0056BCBD, std::vector<uint8_t>{0x85, 0xB1, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - OR dword ptr [ECX + 0x95282c],EDX
    build_patch(0x0056BCCE, std::vector<uint8_t>{0x09, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x0056BCD8, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV DL,byte ptr [EDI + 0x952850]
    build_patch(0x0056BCFF, std::vector<uint8_t>{0x8A, 0x97, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x0056BD67, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EDX,word ptr [EDI + 0x95282a]
    build_patch(0x0056BD76, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOV EDX,dword ptr [EDI + 0x95282c]
    build_patch(0x0056BD9B, std::vector<uint8_t>{0x8B, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV CL,byte ptr [EDI + 0x95283b]
    build_patch(0x0056BDC3, std::vector<uint8_t>{0x8A, 0x8F, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // enemy_move(int) - MOV BL,byte ptr [EDI + 0x95283a]
    build_patch(0x0056BDC9, std::vector<uint8_t>{0x8A, 0x9F, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV AX,word ptr [EDI + 0x952830]
    build_patch(0x0056BDEB, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // enemy_move(int) - MOV byte ptr [EDI + 0x95284e],0x2
    build_patch(0x0056BE14, std::vector<uint8_t>{0xC6, 0x87, 0x4E, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95284e]
    build_patch(0x0056BE33, std::vector<uint8_t>{0x8A, 0x87, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952856]
    build_patch(0x0056BE3D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV dword ptr [EDI + 0x95282c],EDX
    build_patch(0x0056BE60, std::vector<uint8_t>{0x89, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0056BEA3, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95284e]
    build_patch(0x0056BEBC, std::vector<uint8_t>{0x8A, 0x87, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - CMP byte ptr [EDI + 0x95284e],0x7
    build_patch(0x0056BED3, std::vector<uint8_t>{0x80, 0xBF, 0x4E, 0x28, 0x95, 0x00, 0x07}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0xd
    build_patch(0x0056BEF5, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x0D}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0xd
    build_patch(0x0056BF3A, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x0D}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x0056BF7F, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP byte ptr [EDI + 0x95284e],0x6
    build_patch(0x0056BF98, std::vector<uint8_t>{0x80, 0xBF, 0x4E, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x0056BFA5, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0xe
    build_patch(0x0056BFE5, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x0E}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95284e]
    build_patch(0x0056C009, std::vector<uint8_t>{0x8A, 0x87, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x0056C034, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056C21E, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x66
    build_patch(0x0056C225, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x66}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV word ptr [ECX + 0x95283c],AX
    build_patch(0x0056C22C, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV word ptr [ECX + 0x952844],DX
    build_patch(0x0056C233, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0056C23A, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ECX + 0x95284d],0x0
    build_patch(0x0056C251, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_move(int) - MOV CL,byte ptr [EDX + 0x95284e]
    build_patch(0x0056C299, std::vector<uint8_t>{0x8A, 0x8A, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x0056C2B7, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDI + 0x95284e],0x6
    build_patch(0x0056C2C4, std::vector<uint8_t>{0x80, 0xBF, 0x4E, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x0056C2D1, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0056C2D8, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x0056C2E1, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EDI + 0x95284e],0x1
    build_patch(0x0056C308, std::vector<uint8_t>{0xC6, 0x87, 0x4E, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x0056C30F, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x0056C31D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ECX,word ptr [EDI + 0x95283c]
    build_patch(0x0056C324, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x0056C356, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV DL,byte ptr [EDI + 0x95284e]
    build_patch(0x0056C35D, std::vector<uint8_t>{0x8A, 0x97, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - CMP byte ptr [EDX + 0x95284e],0x2
    build_patch(0x0056C51F, std::vector<uint8_t>{0x80, 0xBA, 0x4E, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x52
    build_patch(0x0056C5F4, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x52}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],DL
    build_patch(0x0056C5FB, std::vector<uint8_t>{0x88, 0x91, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV word ptr [ECX + 0x95283c],DX
    build_patch(0x0056C61B, std::vector<uint8_t>{0x66, 0x89, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV word ptr [ECX + 0x952844],AX
    build_patch(0x0056C622, std::vector<uint8_t>{0x66, 0x89, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV AX,word ptr [EDX + 0x952830]
    build_patch(0x0056C63D, std::vector<uint8_t>{0x66, 0x8B, 0x82, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x0056C659, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EBX,dword ptr [ESI + 0x95282c]
    build_patch(0x0056C660, std::vector<uint8_t>{0x8B, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [ESI + 0x95282c],EBX
    build_patch(0x0056C669, std::vector<uint8_t>{0x89, 0x9E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x95284e]
    build_patch(0x0056C69B, std::vector<uint8_t>{0x8A, 0x86, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952839],0xe
    build_patch(0x0056C75E, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x0E}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952839],0x4
    build_patch(0x0056C7BA, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ESI + 0x95284e],0x4
    build_patch(0x0056C824, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x7
    build_patch(0x0056C87A, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x07}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ESI + 0x95284e],0x5
    build_patch(0x0056C88F, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x05}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952839],0x6
    build_patch(0x0056C8D2, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x9
    build_patch(0x0056C950, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x09}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x4
    build_patch(0x0056C9B3, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0056C9C2, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056C9C9, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x0056C9D3, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056CA21, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0056CADC, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x0056CB40, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952836],BL
    build_patch(0x0056CBA1, std::vector<uint8_t>{0x38, 0x9F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV AX,word ptr [EDI + 0x952830]
    build_patch(0x0056CBA9, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95284f]
    build_patch(0x0056CBBB, std::vector<uint8_t>{0x8A, 0x87, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0056CC2F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0056CCDB, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x0056CD0F, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [EBX + 0x95284e],0xb
    build_patch(0x0056CD1A, std::vector<uint8_t>{0x80, 0xBB, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - CMP byte ptr [EBX + 0x952853],0x46
    build_patch(0x0056CD38, std::vector<uint8_t>{0x80, 0xBB, 0x53, 0x28, 0x95, 0x00, 0x46}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [EBX + 0x952839],0x18
    build_patch(0x0056CD45, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952853],0x2d
    build_patch(0x0056CD4E, std::vector<uint8_t>{0xC6, 0x83, 0x53, 0x28, 0x95, 0x00, 0x2D}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x0056CD55, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952853],0x2d
    build_patch(0x0056CD70, std::vector<uint8_t>{0xC6, 0x83, 0x53, 0x28, 0x95, 0x00, 0x2D}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV AX,word ptr [EBX + 0x952856]
    build_patch(0x0056CD77, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0056CE16, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x0056CE87, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952844]
    build_patch(0x0056CE94, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x95283c]
    build_patch(0x0056CE9B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - TEST byte ptr [EBX + 0x952830],0x20
    build_patch(0x0056CFCD, std::vector<uint8_t>{0xF6, 0x83, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0056D08A, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0056D382, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x952839]
    build_patch(0x0056D3D4, std::vector<uint8_t>{0x8A, 0x81, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x95284e]
    build_patch(0x0056D3E4, std::vector<uint8_t>{0x8A, 0x81, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV EAX,0x952832
    build_patch(0x0056D627, std::vector<uint8_t>{0xB8, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x4]
    build_patch(0x0056D633, std::vector<uint8_t>{0x8A, 0x48, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX]
    build_patch(0x0056D63A, std::vector<uint8_t>{0x0F, 0xBF, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + -0xa]
    build_patch(0x0056D652, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + -0x8]
    build_patch(0x0056D65A, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP byte ptr [EAX + 0x7],0x3
    build_patch(0x0056D662, std::vector<uint8_t>{0x80, 0x78, 0x07, 0x03}, -1, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x7],0x18
    build_patch(0x0056D66C, std::vector<uint8_t>{0x80, 0x78, 0x07, 0x18}, -1, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EBX,word ptr [ECX + 0x95283c]
    build_patch(0x0056D675, std::vector<uint8_t>{0x0F, 0xBF, 0x99, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952844]
    build_patch(0x0056D680, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952856]
    build_patch(0x0056D6D2, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x3
    build_patch(0x0056D750, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x03}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EAX + 0x95284e],DL
    build_patch(0x0056D757, std::vector<uint8_t>{0x88, 0x90, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - TEST byte ptr [ECX + 0x95282c],0x8
    build_patch(0x0056D85C, std::vector<uint8_t>{0xF6, 0x81, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952853],0x64
    build_patch(0x0056D899, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV DL,byte ptr [EAX + 0x952850]
    build_patch(0x0056D8E3, std::vector<uint8_t>{0x8A, 0x90, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - TEST byte ptr [EAX + 0x95282c],0x8
    build_patch(0x0056D8FC, std::vector<uint8_t>{0xF6, 0x80, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952853],0x64
    build_patch(0x0056D908, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056DA45, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AX,word ptr [EAX + 0x952832]
    build_patch(0x0056DB0D, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [EDX + 0x952850]
    build_patch(0x0056DB90, std::vector<uint8_t>{0x8A, 0x82, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056DBA0, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - TEST byte ptr [ESI + 0x95282c],0x8
    build_patch(0x0056DBF5, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x0056DC02, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AX,word ptr [ESI + 0x952832]
    build_patch(0x0056DC1C, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x64
    build_patch(0x0056DC38, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952853],0x64
    build_patch(0x0056DC68, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952838],0x0
    build_patch(0x0056DC6F, std::vector<uint8_t>{0xC6, 0x80, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // enemy_move(int) - TEST byte ptr [ESI + 0x95282c],0x8
    build_patch(0x0056DCDE, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x0056DD75, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x0056DD7F, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x0056DDB8, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x64
    build_patch(0x0056DE04, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x64
    build_patch(0x0056DE16, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0056DE43, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x0056DE76, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x0056DE91, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952853],0x64
    build_patch(0x0056DEA6, std::vector<uint8_t>{0xC6, 0x82, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952850]
    build_patch(0x0056DEEF, std::vector<uint8_t>{0x8A, 0x86, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0056DF03, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - TEST byte ptr [ESI + 0x95282c],0x8
    build_patch(0x0056DF29, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x64
    build_patch(0x0056DF4D, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x0056DF74, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x64
    build_patch(0x0056DF84, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - TEST byte ptr [ESI + 0x95282c],0x8
    build_patch(0x0056DF9D, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0056E028, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x0056E02F, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x0056E038, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0056E158, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0056E1BA, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x0056E4E2, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x0056E517, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x952850]
    build_patch(0x0056E52F, std::vector<uint8_t>{0x8A, 0x87, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0056E53D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - TEST byte ptr [EDI + 0x95282c],0x20
    build_patch(0x0056E580, std::vector<uint8_t>{0xF6, 0x87, 0x2C, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x0056E5F6, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x0056E9B6, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x0056ECB0, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952832]
    build_patch(0x0056ECBA, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056ECDA, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0056ED92, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [ESI + 0x95284e],0xb
    build_patch(0x0056ED9D, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x0056EDCC, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x0056EDD9, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOV AX,word ptr [ESI + 0x95283c]
    build_patch(0x0056EE15, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP word ptr [ESI + 0x952828],AX
    build_patch(0x0056EE1C, std::vector<uint8_t>{0x66, 0x39, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOV DX,word ptr [ESI + 0x95282a]
    build_patch(0x0056EE25, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP DX,word ptr [ESI + 0x952844]
    build_patch(0x0056EE2C, std::vector<uint8_t>{0x66, 0x3B, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ECX,word ptr [ESI + 0x952844]
    build_patch(0x0056EE44, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV CX,word ptr [ESI + 0x952828]
    build_patch(0x0056EE94, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - CMP CX,word ptr [ESI + 0x95283c]
    build_patch(0x0056EE9B, std::vector<uint8_t>{0x66, 0x3B, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DX,word ptr [ESI + 0x95282a]
    build_patch(0x0056EEA8, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP DX,word ptr [ESI + 0x952844]
    build_patch(0x0056EEAF, std::vector<uint8_t>{0x66, 0x3B, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0056EEE4, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [ESI + 0x95284e],0xa
    build_patch(0x0056EEF3, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x0A}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x0056EF00, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0056EF07, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x0056EF11, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x0056EF4C, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EDX + 0x952844]
    build_patch(0x0056EF55, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EDI,word ptr [EDX + 0x95283c]
    build_patch(0x0056EF5C, std::vector<uint8_t>{0x0F, 0xBF, 0xBA, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x0056F098, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x0056F0C5, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x0056F118, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0056F122, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0056F15D, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x0056F168, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x0056F227, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV DL,byte ptr [EAX + 0x95284f]
    build_patch(0x0056F25B, std::vector<uint8_t>{0x8A, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0056F269, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0056F270, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0056F2C6, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x0056F2CD, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0056F2F8, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0056F34D, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0056F354, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0056F373, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0056F37A, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x0056F3AA, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056F568, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x0056F5C7, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x0056F6E1, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EBX + 0x952839],0x18
    build_patch(0x0056F927, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952844]
    build_patch(0x0056F930, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ESI,word ptr [EBX + 0x95283c]
    build_patch(0x0056F93D, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [EBX + 0x952844]
    build_patch(0x0056F968, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x95283c]
    build_patch(0x0056F96F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x0056FC8A, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x0056FD6A, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x95284d]
    build_patch(0x0056FDC9, std::vector<uint8_t>{0x8A, 0x81, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_move(int) - MOV byte ptr [ECX + 0x95284d],AL
    build_patch(0x0056FDD1, std::vector<uint8_t>{0x88, 0x81, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_move(int) - MOV EDI,0x952832
    build_patch(0x0056FE94, std::vector<uint8_t>{0xBF, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x4]
    build_patch(0x0056FE9B, std::vector<uint8_t>{0x8A, 0x47, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI]
    build_patch(0x0056FEA2, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x62
    build_patch(0x0056FEE4, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x62}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00570019, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00570268, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x005702FA, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00570404, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00570AEF, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EDI + 0x952844]
    build_patch(0x00570B05, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EDX,word ptr [EDI + 0x95283c]
    build_patch(0x00570B0C, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x00570B22, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ECX,word ptr [EDI + 0x95283c]
    build_patch(0x00570B29, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00570B54, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EDX,word ptr [EDI + 0x952844]
    build_patch(0x00570B6F, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x95283c]
    build_patch(0x00570B76, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00570BE8, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00570CDA, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00570E3F, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00570FB4, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - OR dword ptr [EDX + 0x95282c],ECX
    build_patch(0x005710EB, std::vector<uint8_t>{0x09, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - TEST dword ptr [EDX + 0x95282c],ECX
    build_patch(0x00571119, std::vector<uint8_t>{0x85, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX ECX,word ptr [EDX + 0x952856]
    build_patch(0x00571126, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV CL,byte ptr [EDX + 0x952839]
    build_patch(0x00571188, std::vector<uint8_t>{0x8A, 0x8A, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [EDX + 0x95282c]
    build_patch(0x0057119C, std::vector<uint8_t>{0x8B, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952853],0x58
    build_patch(0x005711EF, std::vector<uint8_t>{0x80, 0xBA, 0x53, 0x28, 0x95, 0x00, 0x58}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - TEST dword ptr [EDX + 0x95282c],0x40000000
    build_patch(0x005711F8, std::vector<uint8_t>{0xF7, 0x82, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x40}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00571273, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952853],0x58
    build_patch(0x0057127C, std::vector<uint8_t>{0x80, 0xB8, 0x53, 0x28, 0x95, 0x00, 0x58}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952838],CL
    build_patch(0x00571466, std::vector<uint8_t>{0x38, 0x8A, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // enemy_move(int) - TEST dword ptr [ECX + 0x95282c],0x40000000
    build_patch(0x0057153A, std::vector<uint8_t>{0xF7, 0x81, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x40}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV EAX,dword ptr [EDX + 0x95282c]
    build_patch(0x005715FB, std::vector<uint8_t>{0x8B, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005717F4, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP word ptr [EAX + 0x952856],0x0
    build_patch(0x005718C4, std::vector<uint8_t>{0x66, 0x83, 0xB8, 0x56, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV word ptr [EAX + 0x952856],DX
    build_patch(0x005718DF, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x005718E6, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00571985, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x005719AF, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00571A8E, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x00571AE3, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00571AFF, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00571B26, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x00571B7D, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV AX,word ptr [ESI + 0x952856]
    build_patch(0x00571BB3, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - CMP byte ptr [ESI + 0x952853],CL
    build_patch(0x00571BE0, std::vector<uint8_t>{0x38, 0x8E, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00571C19, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + 0x952856]
    build_patch(0x00571CD2, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x00571EC0, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - OR dword ptr [ESI + 0x95282c],0x40000
    build_patch(0x00571F08, std::vector<uint8_t>{0x81, 0x8E, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x04, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00571F28, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952844]
    build_patch(0x00571F3D, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ESI,word ptr [EBX + 0x95283c]
    build_patch(0x00571F44, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952844]
    build_patch(0x00571F73, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ECX,word ptr [EBX + 0x95283c]
    build_patch(0x00571F7A, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00572072, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x0057207C, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005720B5, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00572151, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x0057215F, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952853]
    build_patch(0x0057219C, std::vector<uint8_t>{0x8A, 0x91, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV DI,word ptr [ECX + 0x95283c]
    build_patch(0x005721AF, std::vector<uint8_t>{0x66, 0x8B, 0xB9, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP DI,word ptr [EDX + 0x95283c]
    build_patch(0x005721B6, std::vector<uint8_t>{0x66, 0x3B, 0xBA, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DI,word ptr [ECX + 0x952844]
    build_patch(0x005721BF, std::vector<uint8_t>{0x66, 0x8B, 0xB9, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP DI,word ptr [EDX + 0x952844]
    build_patch(0x005721C6, std::vector<uint8_t>{0x66, 0x3B, 0xBA, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952850]
    build_patch(0x005721CF, std::vector<uint8_t>{0x8A, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x00572231, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x005722D6, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x005722E4, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP byte ptr [EDX*0x4 + 0x952853],0x33
    build_patch(0x0057231D, std::vector<uint8_t>{0x80, 0x3C, 0x95, 0x53, 0x28, 0x95, 0x00, 0x33}, 3, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [EBX + 0x952853],0x35
    build_patch(0x00572327, std::vector<uint8_t>{0x80, 0xBB, 0x53, 0x28, 0x95, 0x00, 0x35}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - TEST dword ptr [ECX*0x4 + 0x95282c],EDI
    build_patch(0x0057234D, std::vector<uint8_t>{0x85, 0x3C, 0x8D, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV DX,word ptr [ECX + 0x95283c]
    build_patch(0x0057235F, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP DX,word ptr [EBX + 0x95283c]
    build_patch(0x00572366, std::vector<uint8_t>{0x66, 0x3B, 0x93, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV CX,word ptr [ECX + 0x952844]
    build_patch(0x0057236F, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP CX,word ptr [EBX + 0x952844]
    build_patch(0x00572376, std::vector<uint8_t>{0x66, 0x3B, 0x8B, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x0057238C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952853],0x35
    build_patch(0x005725A4, std::vector<uint8_t>{0xC6, 0x82, 0x53, 0x28, 0x95, 0x00, 0x35}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952853],0x34
    build_patch(0x005725BD, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x34}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x34
    build_patch(0x005725D6, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x34}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0057272B, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x952850]
    build_patch(0x00572780, std::vector<uint8_t>{0x8A, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005727C6, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00572841, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CX,word ptr [EBX + 0x952832]
    build_patch(0x00572889, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952853],0x33
    build_patch(0x00572916, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x33}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x00572987, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00572992, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP byte ptr [ECX + 0x95284e],0x3
    build_patch(0x005729A9, std::vector<uint8_t>{0x80, 0xB9, 0x4E, 0x28, 0x95, 0x00, 0x03}, 2, new_VEH_addr + 0x26);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952839]
    build_patch(0x005729C1, std::vector<uint8_t>{0x8A, 0x91, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AX,word ptr [ECX + 0x952856]
    build_patch(0x005729EB, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOVSX EDI,word ptr [EAX + 0x952856]
    build_patch(0x00572A52, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV EAX,0x952832
    build_patch(0x00572BF3, std::vector<uint8_t>{0xB8, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x4]
    build_patch(0x00572BFA, std::vector<uint8_t>{0x8A, 0x48, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX]
    build_patch(0x00572C01, std::vector<uint8_t>{0x0F, 0xBF, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EBX,word ptr [EAX + -0xa]
    build_patch(0x00572C19, std::vector<uint8_t>{0x0F, 0xBF, 0x58, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EBX,word ptr [EAX + -0x8]
    build_patch(0x00572C23, std::vector<uint8_t>{0x0F, 0xBF, 0x58, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP byte ptr [EAX + 0x7],0x18
    build_patch(0x00572C2C, std::vector<uint8_t>{0x80, 0x78, 0x07, 0x18}, -1, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EBX,word ptr [EAX + 0xa]
    build_patch(0x00572C32, std::vector<uint8_t>{0x0F, 0xBF, 0x58, 0x0A}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x12]
    build_patch(0x00572C3A, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x12}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EDI,word ptr [ECX + 0x952856]
    build_patch(0x00572C56, std::vector<uint8_t>{0x0F, 0xBF, 0xB9, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x00572C96, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00572D2F, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00572D59, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00572D73, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AX,word ptr [ECX + 0x952856]
    build_patch(0x00572DBF, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952856]
    build_patch(0x00572F2E, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV EAX,0x952832
    build_patch(0x00572F78, std::vector<uint8_t>{0xB8, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x4]
    build_patch(0x00572F82, std::vector<uint8_t>{0x8A, 0x48, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX]
    build_patch(0x00572F89, std::vector<uint8_t>{0x0F, 0xBF, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + -0xa]
    build_patch(0x00572FA1, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + -0x8]
    build_patch(0x00572FA9, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP byte ptr [EAX + 0x7],0x18
    build_patch(0x00572FB2, std::vector<uint8_t>{0x80, 0x78, 0x07, 0x18}, -1, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0xa]
    build_patch(0x00572FB8, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x0A}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x12]
    build_patch(0x00572FC0, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x12}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV EDX,0x952832
    build_patch(0x0057304D, std::vector<uint8_t>{0xBA, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EDX + 0x4]
    build_patch(0x00573054, std::vector<uint8_t>{0x8A, 0x4A, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EDX]
    build_patch(0x0057305B, std::vector<uint8_t>{0x0F, 0xBF, 0x0A}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00573087, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x0057308E, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005730FE, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952839],0xd
    build_patch(0x0057318E, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x0D}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952839],0x14
    build_patch(0x00573215, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x14}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952839],0x10
    build_patch(0x00573250, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x10}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952839],0x11
    build_patch(0x00573283, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x11}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EBX + 0x952839],0x12
    build_patch(0x005732B6, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x12}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x14
    build_patch(0x005733CB, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x14}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952839],0x9
    build_patch(0x00573445, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x09}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EDX,word ptr [ESI + 0x95283c]
    build_patch(0x005734C6, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952844]
    build_patch(0x005734D2, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0057356A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0xe
    build_patch(0x005735F0, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x0E}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x4
    build_patch(0x0057362F, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x2b
    build_patch(0x00573636, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x2B}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x9
    build_patch(0x00573715, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x09}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x52
    build_patch(0x0057371C, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x52}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x9
    build_patch(0x0057374F, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x09}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x72
    build_patch(0x00573756, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x72}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x0057378E, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],DL
    build_patch(0x0057379B, std::vector<uint8_t>{0x88, 0x96, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952853],0x2b
    build_patch(0x005737A1, std::vector<uint8_t>{0xC6, 0x86, 0x53, 0x28, 0x95, 0x00, 0x2B}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005737D4, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0xb
    build_patch(0x00573852, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0xd
    build_patch(0x00573878, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x0D}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0xb
    build_patch(0x00573936, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0xd
    build_patch(0x0057399E, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x0D}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x005739AD, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952856]
    build_patch(0x005739D1, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV EDX,dword ptr [ECX + 0x95282c]
    build_patch(0x00573A03, std::vector<uint8_t>{0x8B, 0x91, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00573ADE, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00573DAC, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV ECX,0x952832
    build_patch(0x00573EC3, std::vector<uint8_t>{0xB9, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x4]
    build_patch(0x00573ECA, std::vector<uint8_t>{0x8A, 0x51, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX]
    build_patch(0x00573ED2, std::vector<uint8_t>{0x0F, 0xBF, 0x11}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + -0xa]
    build_patch(0x00573EEA, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + -0x8]
    build_patch(0x00573EF2, std::vector<uint8_t>{0x0F, 0xBF, 0x51, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP byte ptr [ECX + 0x7],0x18
    build_patch(0x00573EFA, std::vector<uint8_t>{0x80, 0x79, 0x07, 0x18}, -1, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0xa]
    build_patch(0x00573F00, std::vector<uint8_t>{0x0F, 0xBF, 0x41, 0x0A}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + 0x12]
    build_patch(0x00573F08, std::vector<uint8_t>{0x0F, 0xBF, 0x51, 0x12}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00573F4F, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0xd
    build_patch(0x00573FC4, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x0D}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,0x952832
    build_patch(0x00574016, std::vector<uint8_t>{0xB8, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x4]
    build_patch(0x00574020, std::vector<uint8_t>{0x8A, 0x48, 0x04}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX]
    build_patch(0x00574027, std::vector<uint8_t>{0x0F, 0xBF, 0x08}, -1, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + -0xa]
    build_patch(0x0057403F, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xF6}, -1, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + -0x8]
    build_patch(0x00574047, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0xF8}, -1, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP byte ptr [EAX + 0x7],0x18
    build_patch(0x0057404F, std::vector<uint8_t>{0x80, 0x78, 0x07, 0x18}, -1, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0xa]
    build_patch(0x00574055, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x0A}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x12]
    build_patch(0x0057405D, std::vector<uint8_t>{0x0F, 0xBF, 0x48, 0x12}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV AX,word ptr [EDI + 0x952856]
    build_patch(0x005740B9, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x005741A6, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x005741B0, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x005741B9, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x005741BF, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EBX + 0x952839],0x18
    build_patch(0x0057422F, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ESI,byte ptr [EBX + 0x952851]
    build_patch(0x00574262, std::vector<uint8_t>{0x0F, 0xBE, 0xB3, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // enemy_move(int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x005742B2, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005742C6, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - TEST dword ptr [EBX + 0x95282c],0x80000000
    build_patch(0x005742E1, std::vector<uint8_t>{0xF7, 0x83, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x80}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX ECX,byte ptr [EBX + 0x952851]
    build_patch(0x005742F3, std::vector<uint8_t>{0x0F, 0xBE, 0x8B, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x70
    build_patch(0x005744E2, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x70}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV EDI,0x95283c
    build_patch(0x0057456C, std::vector<uint8_t>{0xBF, 0x3C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DL,byte ptr [EDI + -0x6]
    build_patch(0x0057457C, std::vector<uint8_t>{0x8A, 0x57, 0xFA}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI]
    build_patch(0x00574583, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [EDI + 0x8]
    build_patch(0x0057458A, std::vector<uint8_t>{0x0F, 0xBF, 0x57, 0x08}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00574617, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952853],0x2f
    build_patch(0x00574620, std::vector<uint8_t>{0x80, 0xB8, 0x53, 0x28, 0x95, 0x00, 0x2F}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x0057492A, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00574941, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952844]
    build_patch(0x0057494E, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EDI,word ptr [EAX + 0x95283c]
    build_patch(0x00574955, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x005749B5, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x005749BC, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00574A3F, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00574A71, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00574B00, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00574B4F, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV ECX,dword ptr [ECX + 0x95282c]
    build_patch(0x00574B5D, std::vector<uint8_t>{0x8B, 0x89, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV CL,byte ptr [ESI + 0x952838]
    build_patch(0x00574BA7, std::vector<uint8_t>{0x8A, 0x8E, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x00574BBE, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CX,word ptr [ESI + 0x95283c]
    build_patch(0x00574BD7, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00574BFA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00574C2B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00574C42, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x2
    build_patch(0x00574C75, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x00574C89, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00574CAA, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x952853]
    build_patch(0x00574CB7, std::vector<uint8_t>{0x8A, 0x81, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x00574CD1, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x00574CE9, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00574CF4, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00574D39, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - TEST dword ptr [ESI + 0x95282c],0x10000000
    build_patch(0x00574D70, std::vector<uint8_t>{0xF7, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x10}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00574D9D, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x00574E0C, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x00574E13, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x952853]
    build_patch(0x00574E75, std::vector<uint8_t>{0x8A, 0x81, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00574E8E, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952853],0x2d
    build_patch(0x00574E97, std::vector<uint8_t>{0xC6, 0x81, 0x53, 0x28, 0x95, 0x00, 0x2D}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00574EAC, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952853],0x64
    build_patch(0x00574EB5, std::vector<uint8_t>{0x80, 0xB9, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV EAX,dword ptr [EDX + 0x95282c]
    build_patch(0x00574FCC, std::vector<uint8_t>{0x8B, 0x82, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP word ptr [EDX + 0x95283c],DI
    build_patch(0x00575152, std::vector<uint8_t>{0x66, 0x39, 0xBA, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP word ptr [EDX + 0x952844],CX
    build_patch(0x0057515B, std::vector<uint8_t>{0x66, 0x39, 0x8A, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x005751A2, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CX,word ptr [EDI + 0x95283c]
    build_patch(0x005751AB, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DX,word ptr [EDI + 0x952844]
    build_patch(0x005751B8, std::vector<uint8_t>{0x66, 0x8B, 0x97, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV DX,word ptr [EDI + 0x95283c]
    build_patch(0x00575201, std::vector<uint8_t>{0x66, 0x8B, 0x97, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV AX,word ptr [EDI + 0x952844]
    build_patch(0x0057520E, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV DX,word ptr [ECX + 0x95283c]
    build_patch(0x00575302, std::vector<uint8_t>{0x66, 0x8B, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV CX,word ptr [ECX + 0x952844]
    build_patch(0x0057530F, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x952853]
    build_patch(0x00575445, std::vector<uint8_t>{0x8A, 0x88, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x95283c]
    build_patch(0x00575450, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952844]
    build_patch(0x0057545C, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x005757C1, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952844]
    build_patch(0x005757CA, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + 0x95283c]
    build_patch(0x005757D8, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952853],0x65
    build_patch(0x005757F9, std::vector<uint8_t>{0x80, 0xB9, 0x53, 0x28, 0x95, 0x00, 0x65}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x00575826, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x0057584E, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CX,word ptr [ESI + 0x95283c]
    build_patch(0x00575857, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV CX,word ptr [ESI + 0x952856]
    build_patch(0x0057586B, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x005758B9, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // enemy_move(int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x00575ACB, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x00575AF1, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x00575AFC, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952853],0x75
    build_patch(0x00575B0D, std::vector<uint8_t>{0xC6, 0x80, 0x53, 0x28, 0x95, 0x00, 0x75}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x952839]
    build_patch(0x00575B46, std::vector<uint8_t>{0x8A, 0x81, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952853],0x64
    build_patch(0x00575B50, std::vector<uint8_t>{0x80, 0xB9, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00575DBE, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x00575F9D, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [ESI + 0x952856]
    build_patch(0x00576136, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x00576187, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x0057644B, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x0057657E, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x0057666D, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952853],0x64
    build_patch(0x00576678, std::vector<uint8_t>{0x80, 0xB8, 0x53, 0x28, 0x95, 0x00, 0x64}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00576692, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x005766D4, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x005766E2, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005766FD, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x00576704, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOV CL,byte ptr [EDX + 0x952839]
    build_patch(0x0057681D, std::vector<uint8_t>{0x8A, 0x8A, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952853],0x36
    build_patch(0x0057683A, std::vector<uint8_t>{0x80, 0xBA, 0x53, 0x28, 0x95, 0x00, 0x36}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00576956, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00576964, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x0057697E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EBX,word ptr [ECX + 0x952828]
    build_patch(0x00576989, std::vector<uint8_t>{0x0F, 0xBF, 0x99, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - CMP byte ptr [EAX + 0x952853],0x36
    build_patch(0x005769C0, std::vector<uint8_t>{0x80, 0xB8, 0x53, 0x28, 0x95, 0x00, 0x36}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV CX,word ptr [EAX + 0x95283c]
    build_patch(0x005769C9, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DX,word ptr [EAX + 0x952844]
    build_patch(0x005769D6, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00576A89, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00576A98, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,0x95283c
    build_patch(0x00576B8D, std::vector<uint8_t>{0xB8, 0x3C, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV BL,byte ptr [EAX + -0x6]
    build_patch(0x00576B94, std::vector<uint8_t>{0x8A, 0x58, 0xFA}, -1, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EBX,word ptr [EAX]
    build_patch(0x00576BA1, std::vector<uint8_t>{0x0F, 0xBF, 0x18}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EBX,word ptr [EAX + 0x8]
    build_patch(0x00576BA8, std::vector<uint8_t>{0x0F, 0xBF, 0x58, 0x08}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00576DB2, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00577182, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0057718F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x952850]
    build_patch(0x005771B2, std::vector<uint8_t>{0x8A, 0x87, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - TEST byte ptr [EDI + 0x95282c],0x8
    build_patch(0x005771F2, std::vector<uint8_t>{0xF6, 0x87, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x005771FF, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX ESI,word ptr [EDI + 0x95283c]
    build_patch(0x0057720C, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00577301, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00577324, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00577344, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0057734B, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00577356, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00577361, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x005773A3, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EBX,word ptr [EDI + 0x95283c]
    build_patch(0x005773B0, std::vector<uint8_t>{0x0F, 0xBF, 0x9F, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [EDI + 0x952844]
    build_patch(0x005773E1, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x95283c]
    build_patch(0x005773E8, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952853],0x70
    build_patch(0x00577420, std::vector<uint8_t>{0x80, 0xBF, 0x53, 0x28, 0x95, 0x00, 0x70}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00577429, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00577430, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x005775EF, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0057762D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - TEST byte ptr [EDI + 0x95282c],0x8
    build_patch(0x00577671, std::vector<uint8_t>{0xF6, 0x87, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV AL,byte ptr [EDX + 0x952850]
    build_patch(0x005776D0, std::vector<uint8_t>{0x8A, 0x82, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0057775C, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x00577787, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x005777BC, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV CL,byte ptr [EAX + 0x952838]
    build_patch(0x005777D4, std::vector<uint8_t>{0x8A, 0x88, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00577889, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - TEST dword ptr [ECX + 0x95282c],0x10000
    build_patch(0x005778CD, std::vector<uint8_t>{0xF7, 0x81, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x01, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX ECX,byte ptr [ECX + 0x952851]
    build_patch(0x00577913, std::vector<uint8_t>{0x0F, 0xBE, 0x89, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00577A6E, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00577C2F, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00577CE3, std::vector<uint8_t>{0x8A, 0x14, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV DL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x00577D59, std::vector<uint8_t>{0x8A, 0x14, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00577FDF, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV BL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x005780E5, std::vector<uint8_t>{0x8A, 0x1C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005780F9, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV AL,byte ptr [EDX + 0x95284d]
    build_patch(0x00578121, std::vector<uint8_t>{0x8A, 0x82, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x0057812B, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x95283c]
    build_patch(0x00578134, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [EDX + 0x952844]
    build_patch(0x00578144, std::vector<uint8_t>{0x0F, 0xBF, 0x92, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x0057819A, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x005781B5, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0057836E, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00578387, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x00578399, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005783A0, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x00578417, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057844C, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005784E0, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_move(int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005784E7, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_move(int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057854B, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x0057866D, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV DL,byte ptr [ECX*0x4 + 0x95284e]
    build_patch(0x005786C9, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x4E, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x26);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0057874B, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005787C8, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00578B15, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [EDX + 0x952853],0x78
    build_patch(0x00578B1F, std::vector<uint8_t>{0xC6, 0x82, 0x53, 0x28, 0x95, 0x00, 0x78}, 2, new_VEH_addr + 0x2B);
    // enemy_move(int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00578B37, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x00578B43, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00578B49, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x00578B69, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [EDX + 0x952839],0x18
    build_patch(0x00578B7D, std::vector<uint8_t>{0x80, 0xBA, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [ECX + 0x952839]
    build_patch(0x00578BA6, std::vector<uint8_t>{0x8A, 0x81, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x58
    build_patch(0x00578DC9, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x58}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV word ptr [ESI + 0x95283c],AX
    build_patch(0x00578DD0, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV word ptr [ESI + 0x952844],CX
    build_patch(0x00578DDD, std::vector<uint8_t>{0x66, 0x89, 0x8E, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00578DE9, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV CL,byte ptr [EDI + 0x95283b]
    build_patch(0x00578E04, std::vector<uint8_t>{0x8A, 0x8F, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // enemy_move(int) - MOV DL,byte ptr [EDI + 0x95283a]
    build_patch(0x00578E0A, std::vector<uint8_t>{0x8A, 0x97, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV byte ptr [EDI + 0x952839],0x18
    build_patch(0x00578E1B, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95283a]
    build_patch(0x00578E22, std::vector<uint8_t>{0x8A, 0x87, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - LEA EAX,[EDI + 0x95283c]
    build_patch(0x00578E2E, std::vector<uint8_t>{0x8D, 0x87, 0x3C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DX,word ptr [EAX + 0x2]
    build_patch(0x00578E34, std::vector<uint8_t>{0x66, 0x8B, 0x50, 0x02}, -1, new_VEH_addr + 0x16);
    // enemy_move(int) - MOV word ptr [EAX],DX
    build_patch(0x00578E39, std::vector<uint8_t>{0x66, 0x89, 0x10}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV DX,word ptr [EAX + 0xa]
    build_patch(0x00578E3C, std::vector<uint8_t>{0x66, 0x8B, 0x50, 0x0A}, -1, new_VEH_addr + 0x1E);
    // enemy_move(int) - MOV word ptr [EAX + 0x8],DX
    build_patch(0x00578E40, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x08}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV DL,byte ptr [EDI + 0x95283a]
    build_patch(0x00578E46, std::vector<uint8_t>{0x8A, 0x97, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV AL,byte ptr [EDI + 0x95283a]
    build_patch(0x00578E53, std::vector<uint8_t>{0x8A, 0x87, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV byte ptr [EDI + 0x95283a],AL
    build_patch(0x00578E5B, std::vector<uint8_t>{0x88, 0x87, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - AND dword ptr [EDI + 0x95282c],0xfdfefdff
    build_patch(0x00578E67, std::vector<uint8_t>{0x81, 0xA7, 0x2C, 0x28, 0x95, 0x00, 0xFF, 0xFD, 0xFE, 0xFD}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EDI,word ptr [EAX + 0x95283c]
    build_patch(0x00578E7B, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [EAX + 0x952844]
    build_patch(0x00578E82, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV BL,byte ptr [EAX + 0x95283a]
    build_patch(0x00578E89, std::vector<uint8_t>{0x8A, 0x98, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - LEA ESI,[EAX + 0x95283c]
    build_patch(0x00578E8F, std::vector<uint8_t>{0x8D, 0xB0, 0x3C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV BX,word ptr [EAX + 0x2]
    build_patch(0x00578EA4, std::vector<uint8_t>{0x66, 0x8B, 0x58, 0x02}, -1, new_VEH_addr + 0x16);
    // enemy_move(int) - MOV word ptr [EAX],BX
    build_patch(0x00578EA9, std::vector<uint8_t>{0x66, 0x89, 0x18}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV BX,word ptr [EAX + 0xa]
    build_patch(0x00578EAC, std::vector<uint8_t>{0x66, 0x8B, 0x58, 0x0A}, -1, new_VEH_addr + 0x1E);
    // enemy_move(int) - MOV word ptr [EAX + 0x8],BX
    build_patch(0x00578EB0, std::vector<uint8_t>{0x66, 0x89, 0x58, 0x08}, -1, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV BL,byte ptr [EDX + 0x95283a]
    build_patch(0x00578EB6, std::vector<uint8_t>{0x8A, 0x9A, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV BL,byte ptr [ECX + 0x95283a]
    build_patch(0x00578ED6, std::vector<uint8_t>{0x8A, 0x99, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV word ptr [EBX*0x2 + 0x95283c],DI
    build_patch(0x00578EDE, std::vector<uint8_t>{0x66, 0x89, 0x3C, 0x5D, 0x3C, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x14);
    // enemy_move(int) - MOV BL,byte ptr [ECX + 0x95283a]
    build_patch(0x00578EE8, std::vector<uint8_t>{0x8A, 0x99, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV word ptr [EBX*0x2 + 0x952844],DX
    build_patch(0x00578EF0, std::vector<uint8_t>{0x66, 0x89, 0x14, 0x5D, 0x44, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV EBX,dword ptr [ECX + 0x95282c]
    build_patch(0x00578EF8, std::vector<uint8_t>{0x8B, 0x99, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [ECX + 0x95282c],EBX
    build_patch(0x00578F04, std::vector<uint8_t>{0x89, 0x99, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOVSX EAX,word ptr [ESI]
    build_patch(0x00578F0A, std::vector<uint8_t>{0x0F, 0xBF, 0x06}, -1, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EAX,word ptr [ECX + 0x952844]
    build_patch(0x00578F11, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - CMP byte ptr [ECX + 0x95283a],0x1
    build_patch(0x00578F1C, std::vector<uint8_t>{0x80, 0xB9, 0x3A, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x12);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x00578F25, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x00578F2C, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV dword ptr [ECX + 0x95282c],EAX
    build_patch(0x00578F37, std::vector<uint8_t>{0x89, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [ECX + 0x952839],0x18
    build_patch(0x00578F3F, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x00578F49, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - AND dword ptr [ESI + 0x95282c],0xfffeffff
    build_patch(0x00578F52, std::vector<uint8_t>{0x81, 0xA6, 0x2C, 0x28, 0x95, 0x00, 0xFF, 0xFF, 0xFE, 0xFF}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x00578F5C, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x00578FBF, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],AL
    build_patch(0x00578FD6, std::vector<uint8_t>{0x88, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x00578FEA, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOVSX ECX,word ptr [ESI + 0x95283c]
    build_patch(0x00578FF3, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_move(int) - MOVSX EDX,word ptr [ESI + 0x952844]
    build_patch(0x00578FFF, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_move(int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x0057900C, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x0057901B, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_move(int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x00579049, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00579177, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_move(int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x005791A2, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_move(int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x005791F8, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // enemy_veh(int) - MOV CL,byte ptr [EDI + 0x952836]
    build_patch(0x0057925C, std::vector<uint8_t>{0x8A, 0x8F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // enemy_veh(int) - MOV AL,byte ptr [EDI + 0x952850]
    build_patch(0x0057930B, std::vector<uint8_t>{0x8A, 0x87, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_veh(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00579315, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // enemy_veh(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0057931E, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_veh(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00579335, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // enemy_veh(int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x00579340, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_veh(int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x00579347, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_veh(int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00579387, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // enemy_veh(int) - MOVSX EDX,word ptr [EDI + 0x952844]
    build_patch(0x00579448, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // enemy_veh(int) - MOVSX EAX,word ptr [EDI + 0x95283c]
    build_patch(0x0057944F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // enemy_veh(int) - MOVSX ECX,byte ptr [EDI + 0x952839]
    build_patch(0x00579456, std::vector<uint8_t>{0x0F, 0xBE, 0x8F, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // enemy_veh(int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x00579490, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // enemy_veh(int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x00579497, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // enemy_veh(int) - MOV AL,byte ptr [EDI + 0x952853]
    build_patch(0x0057949E, std::vector<uint8_t>{0x8A, 0x87, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // enemy_turn(int) - LEA ESI,[EAX*0x4 + 0x952832]
    build_patch(0x00579534, std::vector<uint8_t>{0x8D, 0x34, 0x85, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // enemy_turn(int) - CMP byte ptr [ECX + 0x94a379],DL
    build_patch(0x00579600, std::vector<uint8_t>{0x38, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // enemy_turn(int) - CMP byte ptr [EDX + 0x94a379],0x2
    build_patch(0x0057973F, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // veh_top(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x00579935, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_top(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x0057994B, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_moves(int) - MOV CL,byte ptr [EDX*0x4 + 0x952850]
    build_patch(0x0057997B, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x50, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x28);
    // proto_power(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005799AC, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // want_monolith(int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x00579F90, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // want_monolith(int) - CMP byte ptr [ESI + 0x95284c],0x6
    build_patch(0x00579FAD, std::vector<uint8_t>{0x80, 0xBE, 0x4C, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x24);
    // want_monolith(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00579FB6, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // monolith(int) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x0057A067, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // monolith(int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x0057A06E, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // monolith(int) - MOVSX EBX,word ptr [EDI + 0x952828]
    build_patch(0x0057A074, std::vector<uint8_t>{0x0F, 0xBF, 0x9F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // monolith(int) - MOVSX ESI,word ptr [EDI + 0x95282a]
    build_patch(0x0057A07B, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // monolith(int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x0057A0B4, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // monolith(int) - MOVSX EDX,word ptr [EDI + 0x95283c]
    build_patch(0x0057A0BD, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // monolith(int) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x0057A0C8, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // monolith(int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x0057A0D3, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // monolith(int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x0057A0DA, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // monolith(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0057A0E8, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // monolith(int) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x0057A10F, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // monolith(int) - MOV byte ptr [EDI + 0x952838],0x0
    build_patch(0x0057A11A, std::vector<uint8_t>{0xC6, 0x87, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // monolith(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0057A159, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x0057A171, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x0057A25E, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // monolith(int) - MOV byte ptr [EDI + 0x952838],0x0
    build_patch(0x0057A26F, std::vector<uint8_t>{0xC6, 0x87, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // monolith(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0057A285, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0057A332, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - CMP byte ptr [EDI + 0x95284c],0x6
    build_patch(0x0057A352, std::vector<uint8_t>{0x80, 0xBF, 0x4C, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x24);
    // monolith(int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0057A35B, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // monolith(int) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x0057A382, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // monolith(int) - MOV byte ptr [EDI + 0x952838],0x0
    build_patch(0x0057A38F, std::vector<uint8_t>{0xC6, 0x87, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // monolith(int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0057A407, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - MOV EDX,dword ptr [EDI + 0x95282c]
    build_patch(0x0057A48B, std::vector<uint8_t>{0x8B, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - MOV dword ptr [EDI + 0x95282c],EDX
    build_patch(0x0057A496, std::vector<uint8_t>{0x89, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // monolith(int) - MOV AL,byte ptr [EDI + 0x95284c]
    build_patch(0x0057A49C, std::vector<uint8_t>{0x8A, 0x87, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // monolith(int) - MOV byte ptr [EDI + 0x95284c],AL
    build_patch(0x0057A4B3, std::vector<uint8_t>{0x88, 0x87, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x0057A686, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // goody_box(int,int) - MOVSX ESI,word ptr [EBX + 0x952828]
    build_patch(0x0057A68D, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // goody_box(int,int) - MOV DL,byte ptr [EBX + 0x952836]
    build_patch(0x0057A697, std::vector<uint8_t>{0x8A, 0x93, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // goody_box(int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x0057A884, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x0057A8D5, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // goody_box(int,int) - MOVSX ESI,word ptr [EBX + 0x95282a]
    build_patch(0x0057A8DC, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057A96C, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - TEST byte ptr [EBX + 0x952830],0x20
    build_patch(0x0057A994, std::vector<uint8_t>{0xF6, 0x83, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057AA57, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x0057AF19, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // goody_box(int,int) - MOVSX ECX,word ptr [EBX + 0x95282a]
    build_patch(0x0057AF20, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057B506, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOV byte ptr [ESI + 0x952850],0x0
    build_patch(0x0057B76C, std::vector<uint8_t>{0xC6, 0x86, 0x50, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x28);
    // goody_box(int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x0057B773, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // goody_box(int,int) - MOV EDI,dword ptr [ESI + 0x95282c]
    build_patch(0x0057B77A, std::vector<uint8_t>{0x8B, 0xBE, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // goody_box(int,int) - MOV dword ptr [ESI + 0x95282c],EDI
    build_patch(0x0057B786, std::vector<uint8_t>{0x89, 0xBE, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // goody_box(int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x0057B7A8, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // goody_box(int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x0057B7B7, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0057B957, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOV word ptr [ECX*0x4 + 0x952856],0xffff
    build_patch(0x0057BD2F, std::vector<uint8_t>{0x66, 0xC7, 0x04, 0x8D, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 4, new_VEH_addr + 0x2E);
    // goody_box(int,int) - MOV byte ptr [ECX + 0x95284c],0x2
    build_patch(0x0057BD45, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOV byte ptr [ECX + 0x95284c],0x2
    build_patch(0x0057BD4E, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOV byte ptr [ECX + 0x95284c],0x4
    build_patch(0x0057BD5C, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOV byte ptr [ECX + 0x95284c],0x6
    build_patch(0x0057BD6A, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x06}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOVSX ECX,word ptr [ECX + 0x952832]
    build_patch(0x0057BD78, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - ADD byte ptr [EAX + 0x952850],CL
    build_patch(0x0057C6E9, std::vector<uint8_t>{0x00, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // goody_box(int,int) - MOV BL,byte ptr [ECX*0x4 + 0x95284f]
    build_patch(0x0057C851, std::vector<uint8_t>{0x8A, 0x1C, 0x8D, 0x4F, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x27);
    // goody_box(int,int) - MOV byte ptr [ECX*0x4 + 0x95284f],BL
    build_patch(0x0057C86B, std::vector<uint8_t>{0x88, 0x1C, 0x8D, 0x4F, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x27);
    // goody_box(int,int) - MOV DL,byte ptr [ECX*0x4 + 0x95284f]
    build_patch(0x0057C93C, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x4F, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x27);
    // goody_box(int,int) - MOV byte ptr [ECX*0x4 + 0x95284f],DL
    build_patch(0x0057C945, std::vector<uint8_t>{0x88, 0x14, 0x8D, 0x4F, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x27);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057CA78, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057CA9F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057CB81, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // goody_box(int,int) - MOV word ptr [EAX + 0x952856],0xffff
    build_patch(0x0057CBA7, std::vector<uint8_t>{0x66, 0xC7, 0x80, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x2E);
    // goody_box(int,int) - MOV CL,byte ptr [EBX + 0x95284c]
    build_patch(0x0057CBB0, std::vector<uint8_t>{0x8A, 0x8B, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOV byte ptr [EAX + 0x95284c],CL
    build_patch(0x0057CBB6, std::vector<uint8_t>{0x88, 0x88, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // goody_box(int,int) - MOV DL,byte ptr [EBX + 0x952838]
    build_patch(0x0057CBBC, std::vector<uint8_t>{0x8A, 0x93, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // goody_box(int,int) - MOV byte ptr [EAX + 0x952838],DL
    build_patch(0x0057CBC2, std::vector<uint8_t>{0x88, 0x90, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // goody_box(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x0057CBC8, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // valid_tech_leap(int,int) - CMP EAX,0x952830
    build_patch(0x0057CF2B, std::vector<uint8_t>{0x3D, 0x30, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x8);
    // study_artifact(int) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x0057CFC4, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // study_artifact(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x0057CFCB, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // study_artifact(int) - MOV BL,byte ptr [EAX + 0x952836]
    build_patch(0x0057CFD2, std::vector<uint8_t>{0x8A, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // retire_proto(int,int) - LEA EDI,[EDX*0x4 + 0x95282a]
    build_patch(0x0057F286, std::vector<uint8_t>{0x8D, 0x3C, 0x95, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // prune_protos(int,int,int) - MOV DL,byte ptr [EAX + 0x94a379]
    build_patch(0x0057F79C, std::vector<uint8_t>{0x8A, 0x90, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // prune_protos(int,int,int) - MOV AL,byte ptr [EAX + 0x94a37a]
    build_patch(0x0057F7E1, std::vector<uint8_t>{0x8A, 0x80, 0x7A, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC2);
    // prune_protos(int,int,int) - MOV AL,byte ptr [EDX + 0x94a378]
    build_patch(0x0057F98D, std::vector<uint8_t>{0x8A, 0x82, 0x78, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC0);
    // hq_list_draw(GraphicWin_*,int,int,int,int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x1
    build_patch(0x00583DE1, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x01}, 3, new_VEH_addr + 0x11);
    // read_rules(int) - CMP ESI,0x95282c
    build_patch(0x005878E8, std::vector<uint8_t>{0x81, 0xFE, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // alien_start(void) - ADD EDI,0x952836
    build_patch(0x0058910F, std::vector<uint8_t>{0x81, 0xC7, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alt_set(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x005915D5, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // alt_set(int,int,int) - MOVSX EDI,word ptr [ESI + 0x952858]
    build_patch(0x005915DF, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // alt_set(int,int,int) - TEST byte ptr [ESI + 0x952830],0x20
    build_patch(0x005915FC, std::vector<uint8_t>{0xF6, 0x86, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // alt_set(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0059161B, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // alt_set(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0059162C, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // supply_options(int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x00593A52, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // supply_options(int,int) - MOV AL,byte ptr [EBX + 0x952839]
    build_patch(0x00593ADC, std::vector<uint8_t>{0x8A, 0x83, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // supply_options(int,int) - MOV ECX,dword ptr [EBX + 0x95282c]
    build_patch(0x00593AFA, std::vector<uint8_t>{0x8B, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // supply_options(int,int) - MOVSX ECX,word ptr [EBX + 0x952844]
    build_patch(0x00593B11, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // supply_options(int,int) - MOVSX EAX,word ptr [EBX + 0x952828]
    build_patch(0x00593B18, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // supply_options(int,int) - MOVSX ECX,word ptr [EBX + 0x95283c]
    build_patch(0x00593B22, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // supply_options(int,int) - MOVSX EDI,word ptr [EBX + 0x95282a]
    build_patch(0x00593B29, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // supply_options(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00593C9F, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // supply_options(int,int) - MOVSX EAX,word ptr [EBX + 0x952856]
    build_patch(0x00593CD1, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // supply_options(int,int) - MOV byte ptr [EBX + 0x952854],AL
    build_patch(0x005941CC, std::vector<uint8_t>{0x88, 0x83, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // supply_options(int,int) - MOV AL,byte ptr [EBX + 0x952854]
    build_patch(0x005941D6, std::vector<uint8_t>{0x8A, 0x83, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // supply_options(int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x005942D6, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // supply_options(int,int) - MOV byte ptr [EBX + 0x952839],0x3
    build_patch(0x00594564, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x03}, 2, new_VEH_addr + 0x11);
    // supply_options(int,int) - MOV byte ptr [EBX + 0x95284e],AL
    build_patch(0x0059456B, std::vector<uint8_t>{0x88, 0x83, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x0059483A, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x00594841, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOV BL,byte ptr [EAX + 0x952836]
    build_patch(0x00594848, std::vector<uint8_t>{0x8A, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00594929, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005949C6, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005949D8, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x00594A0B, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952844]
    build_patch(0x00594A14, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [ESI + 0x95283c]
    build_patch(0x00594A1B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00594A5F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - TEST byte ptr [ESI + 0x952830],0x20
    build_patch(0x00594A7A, std::vector<uint8_t>{0xF6, 0x86, 0x30, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x95284d],0x0
    build_patch(0x00594A97, std::vector<uint8_t>{0xC6, 0x86, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV byte ptr [ECX + 0x95284d],0x1
    build_patch(0x00594C7F, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV byte ptr [ECX + 0x95284d],0x1
    build_patch(0x00594CD0, std::vector<uint8_t>{0xC6, 0x81, 0x4D, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV byte ptr [EDX + 0x95284d],0x2
    build_patch(0x00594D3E, std::vector<uint8_t>{0xC6, 0x82, 0x4D, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV byte ptr [EDX + 0x95284d],AL
    build_patch(0x00594DD7, std::vector<uint8_t>{0x88, 0x82, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - OR dword ptr [ESI + 0x95282c],0x4
    build_patch(0x00594E13, std::vector<uint8_t>{0x83, 0x8E, 0x2C, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00594E1A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - AND byte ptr [ESI + 0x952830],0xfb
    build_patch(0x00594E54, std::vector<uint8_t>{0x80, 0xA6, 0x30, 0x28, 0x95, 0x00, 0xFB}, 2, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - OR byte ptr [ESI + 0x952830],0x4
    build_patch(0x00594F35, std::vector<uint8_t>{0x80, 0x8E, 0x30, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOV CX,word ptr [ESI + 0x95283c]
    build_patch(0x00594FA1, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV DX,word ptr [ESI + 0x952844]
    build_patch(0x00594FBB, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x00595077, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005950DC, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV DX,word ptr [EBX + 0x952830]
    build_patch(0x00595143, std::vector<uint8_t>{0x66, 0x8B, 0x93, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x00595188, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - TEST byte ptr [ESI + 0x952830],0x4
    build_patch(0x005951A3, std::vector<uint8_t>{0xF6, 0x86, 0x30, 0x28, 0x95, 0x00, 0x04}, 2, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x005951CF, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV CL,byte ptr [EBX + 0x95284f]
    build_patch(0x005951E9, std::vector<uint8_t>{0x8A, 0x8B, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x0059526C, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x005952A9, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x005952E8, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0059534B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005953BA, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00595432, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x005954CA, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV CX,word ptr [ECX + 0x952832]
    build_patch(0x005955D4, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [ESI + 0x952832]
    build_patch(0x0059573A, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00595771, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x005957A6, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005957BC, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005957D7, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00595812, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00595839, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00595900, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005959F0, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDX + 0x952850]
    build_patch(0x00595AA5, std::vector<uint8_t>{0x8A, 0x8A, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV AX,word ptr [EAX + 0x952832]
    build_patch(0x00595ACE, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX + 0x952850]
    build_patch(0x00595B3E, std::vector<uint8_t>{0x8A, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX + 0x952850]
    build_patch(0x00595BB0, std::vector<uint8_t>{0x8A, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x00595C04, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EBX + 0x952832]
    build_patch(0x00595C2D, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX + 0x952850]
    build_patch(0x00595C81, std::vector<uint8_t>{0x8A, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x00595CB1, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EBX + 0x95284e]
    build_patch(0x00595CEF, std::vector<uint8_t>{0x8A, 0x8B, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x00595D2D, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x00595D51, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EBX + 0x952830]
    build_patch(0x00595D6C, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00595DC8, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x00595E05, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EBX + 0x95285a]
    build_patch(0x00595E26, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x00595E3B, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x952836],BL
    build_patch(0x00595E5B, std::vector<uint8_t>{0x88, 0x9E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x95284c],AL
    build_patch(0x00595E69, std::vector<uint8_t>{0x88, 0x86, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // order_veh(int,int,int) - MOV word ptr [ESI + 0x952856],AX
    build_patch(0x00595E9D, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // order_veh(int,int,int) - MOV word ptr [ESI + 0x952856],0xffff
    build_patch(0x00595EA6, std::vector<uint8_t>{0x66, 0xC7, 0x86, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x2E);
    // order_veh(int,int,int) - MOVSX EDI,word ptr [ESI + 0x952858]
    build_patch(0x00595EBC, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00595F29, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x00595F45, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x00596077, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00596140, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x00596147, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EDX + 0x95285a]
    build_patch(0x005961C7, std::vector<uint8_t>{0x66, 0x8B, 0x82, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005961DC, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - CMP byte ptr [EDI + 0x952839],0x1
    build_patch(0x005961FA, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x95283c]
    build_patch(0x00596207, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00596227, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0059623C, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX ESI,word ptr [EDI + 0x952858]
    build_patch(0x00596291, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x0
    build_patch(0x005962CF, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x0
    build_patch(0x005962E5, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005962FE, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EDI + 0x95285a]
    build_patch(0x005963A1, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005963B6, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005963C7, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005963ED, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX ESI,word ptr [ECX + 0x952858]
    build_patch(0x00596427, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x0059643F, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0059645C, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x95284d]
    build_patch(0x00596483, std::vector<uint8_t>{0x8A, 0x87, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x00596499, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0059658D, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00596598, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005967E2, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x00596A93, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV BL,byte ptr [EAX + 0x95284f]
    build_patch(0x00596ABC, std::vector<uint8_t>{0x8A, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOV byte ptr [ECX*0x4 + 0x952839],0x0
    build_patch(0x00596BE7, std::vector<uint8_t>{0xC6, 0x04, 0x8D, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x00596C55, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x0
    build_patch(0x00596CB0, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00596D16, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV byte ptr [EDX*0x4 + 0x952839],0x0
    build_patch(0x00596D6E, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x00596DC4, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EDX*0x4 + 0x95282c]
    build_patch(0x00596E67, std::vector<uint8_t>{0x8B, 0x0C, 0x95, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV byte ptr [ECX*0x4 + 0x95284f],0x0
    build_patch(0x00597082, std::vector<uint8_t>{0xC6, 0x04, 0x8D, 0x4F, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - OR byte ptr [EAX*0x4 + 0x952831],0x20
    build_patch(0x005971DA, std::vector<uint8_t>{0x80, 0x0C, 0x85, 0x31, 0x28, 0x95, 0x00, 0x20}, 3, new_VEH_addr + 0x9);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00597394, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x00597468, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x005974C4, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - CMP byte ptr [ESI + 0x952839],0x18
    build_patch(0x00597599, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ESI + 0x95283c]
    build_patch(0x005975A6, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952844]
    build_patch(0x005975B4, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005975C0, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005975E7, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x00597623, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0059762F, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x00597657, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EDI + 0x952832]
    build_patch(0x0059768B, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV BL,byte ptr [EDI + 0x952850]
    build_patch(0x0059769D, std::vector<uint8_t>{0x8A, 0x9F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV BL,byte ptr [EDI + 0x952850]
    build_patch(0x005976E1, std::vector<uint8_t>{0x8A, 0x9F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x00597753, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV BL,byte ptr [EDI + 0x952850]
    build_patch(0x005977FF, std::vector<uint8_t>{0x8A, 0x9F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV EDX,dword ptr [EDI + 0x95282c]
    build_patch(0x0059782C, std::vector<uint8_t>{0x8B, 0x97, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x0059785F, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x0059788E, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x005979B2, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005979BC, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952839]
    build_patch(0x00597A48, std::vector<uint8_t>{0x8A, 0x87, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00597AC3, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x00597AD8, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EDI + 0x95282c],ECX
    build_patch(0x00597AEB, std::vector<uint8_t>{0x89, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV byte ptr [EDX + 0x952850],BL
    build_patch(0x00597B43, std::vector<uint8_t>{0x88, 0x9A, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EDX + 0x95282c]
    build_patch(0x00597B49, std::vector<uint8_t>{0x8B, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EDX + 0x95282c],ECX
    build_patch(0x00597B57, std::vector<uint8_t>{0x89, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDX + 0x952836]
    build_patch(0x00597CD4, std::vector<uint8_t>{0x8A, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV AX,word ptr [EDX + 0x952830]
    build_patch(0x00597CDE, std::vector<uint8_t>{0x66, 0x8B, 0x82, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOV BL,byte ptr [EDX + 0x95284f]
    build_patch(0x00597CF0, std::vector<uint8_t>{0x8A, 0x9A, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOV EDX,dword ptr [EAX*0x4 + 0x96c9e0]
    build_patch(0x00597D31, std::vector<uint8_t>{0x8B, 0x14, 0x85, 0xE0, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180EC);
    // order_veh(int,int,int) - TEST byte ptr [ECX + 0x95282d],0x42
    build_patch(0x00597FFB, std::vector<uint8_t>{0xF6, 0x81, 0x2D, 0x28, 0x95, 0x00, 0x42}, 2, new_VEH_addr + 0x5);
    // order_veh(int,int,int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00598004, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x00598027, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x00598032, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV byte ptr [EDX + 0x952851],CL
    build_patch(0x00598185, std::vector<uint8_t>{0x88, 0x8A, 0x51, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x29);
    // order_veh(int,int,int) - MOV AL,byte ptr [ESI + 0x95284f]
    build_patch(0x005981CA, std::vector<uint8_t>{0x8A, 0x86, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x95284f],AL
    build_patch(0x005981D2, std::vector<uint8_t>{0x88, 0x86, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOV AL,byte ptr [ESI + 0x95284f]
    build_patch(0x005981E0, std::vector<uint8_t>{0x8A, 0x86, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOV CL,byte ptr [ESI + 0x95284f]
    build_patch(0x00598227, std::vector<uint8_t>{0x8A, 0x8E, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x95284f],CL
    build_patch(0x00598231, std::vector<uint8_t>{0x88, 0x8E, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00598274, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x00598457, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX + 0x952836]
    build_patch(0x00598593, std::vector<uint8_t>{0x8A, 0x91, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x0059859D, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005985B2, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOVSX EBX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005985E4, std::vector<uint8_t>{0x0F, 0xBF, 0x1C, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOV AX,word ptr [ECX + 0x952832]
    build_patch(0x00598744, std::vector<uint8_t>{0x66, 0x8B, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV byte ptr [ECX + 0x952838],0x0
    build_patch(0x0059875D, std::vector<uint8_t>{0xC6, 0x81, 0x38, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0059879A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EDI + 0x952832]
    build_patch(0x00598848, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00598860, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x00598886, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - CMP byte ptr [EDX + 0x952836],AL
    build_patch(0x005988BA, std::vector<uint8_t>{0x38, 0x82, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV AX,word ptr [EDX + 0x952830]
    build_patch(0x005988C2, std::vector<uint8_t>{0x66, 0x8B, 0x82, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // order_veh(int,int,int) - MOV BL,byte ptr [EDX + 0x95284f]
    build_patch(0x005988D4, std::vector<uint8_t>{0x8A, 0x9A, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - MOVSX ESI,word ptr [EDI + 0x952858]
    build_patch(0x00598907, std::vector<uint8_t>{0x0F, 0xBF, 0xB7, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOV DL,byte ptr [ECX + 0x952850]
    build_patch(0x00598940, std::vector<uint8_t>{0x8A, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV byte ptr [ECX + 0x952850],DL
    build_patch(0x0059894D, std::vector<uint8_t>{0x88, 0x91, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x005989E5, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ECX + 0x95283c]
    build_patch(0x005989EE, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952844]
    build_patch(0x005989FE, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x00598A10, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x00598A25, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x00598A43, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - CMP byte ptr [EAX + 0x952839],0x1
    build_patch(0x00598A4D, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV DX,word ptr [EAX + 0x95283c]
    build_patch(0x00598A56, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x00598A69, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EAX + 0x952858]
    build_patch(0x00598A74, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x00598AA5, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EBX + 0x952850]
    build_patch(0x00598AF7, std::vector<uint8_t>{0x8A, 0x8B, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - CMP byte ptr [EBX + 0x952839],0x18
    build_patch(0x00598B14, std::vector<uint8_t>{0x80, 0xBB, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EBX + 0x95283c]
    build_patch(0x00598B1D, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EBX + 0x952844]
    build_patch(0x00598B2D, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOV AX,word ptr [EBX + 0x95285a]
    build_patch(0x00598BE5, std::vector<uint8_t>{0x66, 0x8B, 0x83, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x00598BFA, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x00598C16, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x00598C3C, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x00598C52, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x00598C67, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EDI,word ptr [ESI + 0x952858]
    build_patch(0x00598C78, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00598CC5, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x00598D29, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952838],AL
    build_patch(0x00598D35, std::vector<uint8_t>{0x88, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00598DB1, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EDI + 0x95285a]
    build_patch(0x00598E2B, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x00598E40, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x00598E63, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOVSX ESI,word ptr [ESI + 0x952858]
    build_patch(0x00598E79, std::vector<uint8_t>{0x0F, 0xBF, 0xB6, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00598E9D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00598ED1, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV DL,byte ptr [EDI + 0x952850]
    build_patch(0x00598F03, std::vector<uint8_t>{0x8A, 0x97, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00598F2D, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00598F4F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x95284d]
    build_patch(0x00598F69, std::vector<uint8_t>{0x8A, 0x8F, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00598F9E, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00598FEF, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00598FFA, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV DL,byte ptr [EDI + 0x95283b]
    build_patch(0x0059901C, std::vector<uint8_t>{0x8A, 0x97, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x95283a]
    build_patch(0x00599022, std::vector<uint8_t>{0x8A, 0x87, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952850]
    build_patch(0x00599044, std::vector<uint8_t>{0x8A, 0x8F, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00599061, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x95284d]
    build_patch(0x0059907B, std::vector<uint8_t>{0x8A, 0x8F, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x00599098, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EDI + 0x95282c],ECX
    build_patch(0x005990A6, std::vector<uint8_t>{0x89, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005990AE, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005990B5, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005990CB, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - ADD byte ptr [EDI + 0x952838],AL
    build_patch(0x0059910E, std::vector<uint8_t>{0x00, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x95284d],0x0
    build_patch(0x00599124, std::vector<uint8_t>{0xC6, 0x87, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EDI + 0x95282a]
    build_patch(0x00599137, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952828]
    build_patch(0x0059913E, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00599188, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x005991AB, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x005991B5, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005991F6, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x005992A8, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952838],AL
    build_patch(0x005992CC, std::vector<uint8_t>{0x88, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005992D2, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952838]
    build_patch(0x00599319, std::vector<uint8_t>{0x8A, 0x8F, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x95284d],0x0
    build_patch(0x0059936C, std::vector<uint8_t>{0xC6, 0x87, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x00599375, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x0059937C, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x005993ED, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x005993F8, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x95283b]
    build_patch(0x0059941A, std::vector<uint8_t>{0x8A, 0x87, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x95283a]
    build_patch(0x00599420, std::vector<uint8_t>{0x8A, 0x8F, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // order_veh(int,int,int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x0059942A, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - INC byte ptr [EDI + 0x95284d]
    build_patch(0x0059943E, std::vector<uint8_t>{0xFE, 0x87, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOV DL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005994C8, std::vector<uint8_t>{0x8A, 0x14, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0059955A, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952836],DL
    build_patch(0x00599560, std::vector<uint8_t>{0x88, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00599566, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x952836]
    build_patch(0x00599577, std::vector<uint8_t>{0x8A, 0x8F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x00599598, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x00599602, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0059960C, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x00599683, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00599692, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x95284d]
    build_patch(0x005996B3, std::vector<uint8_t>{0x8A, 0x8F, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00599740, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV AX,word ptr [EDI + 0x95285a]
    build_patch(0x005997A1, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005997B6, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV CL,byte ptr [EBX + 0x952850]
    build_patch(0x005997EA, std::vector<uint8_t>{0x8A, 0x8B, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOV byte ptr [EBX + 0x952839],0x0
    build_patch(0x005997F4, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EDI + 0x95283c]
    build_patch(0x00599805, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOVSX ESI,word ptr [ECX*0x4 + 0x952858]
    build_patch(0x0059981D, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x8D, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOV byte ptr [EAX*0x4 + 0x952839],0x0
    build_patch(0x00599837, std::vector<uint8_t>{0xC6, 0x04, 0x85, 0x39, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x0059986F, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV DL,byte ptr [EDI + 0x952850]
    build_patch(0x005998C9, std::vector<uint8_t>{0x8A, 0x97, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // order_veh(int,int,int) - MOVSX ECX,word ptr [EDI + 0x95282a]
    build_patch(0x005998E6, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x005998F0, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOV CL,byte ptr [EDI + 0x95284f]
    build_patch(0x0059990B, std::vector<uint8_t>{0x8A, 0x8F, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // order_veh(int,int,int) - CMP byte ptr [EDI + 0x952853],0x75
    build_patch(0x00599915, std::vector<uint8_t>{0x80, 0xBF, 0x53, 0x28, 0x95, 0x00, 0x75}, 2, new_VEH_addr + 0x2B);
    // order_veh(int,int,int) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x00599924, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x00599939, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // order_veh(int,int,int) - CMP byte ptr [ECX + 0x952839],0x1
    build_patch(0x00599953, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ECX + 0x95283c]
    build_patch(0x0059995C, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00599967, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x00599972, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // order_veh(int,int,int) - MOV DL,byte ptr [EDI + 0x952839]
    build_patch(0x0059997D, std::vector<uint8_t>{0x8A, 0x97, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x95283c]
    build_patch(0x0059999A, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952844]
    build_patch(0x005999AD, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - CMP byte ptr [EDI + 0x952839],0x18
    build_patch(0x00599A34, std::vector<uint8_t>{0x80, 0xBF, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00599A3D, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV DL,byte ptr [EDI + 0x952852]
    build_patch(0x00599A4C, std::vector<uint8_t>{0x8A, 0x97, 0x52, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952852],DL
    build_patch(0x00599A54, std::vector<uint8_t>{0x88, 0x97, 0x52, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EDI + 0x95282c]
    build_patch(0x00599A5A, std::vector<uint8_t>{0x8B, 0x8F, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EDX,byte ptr [EDI + 0x952851]
    build_patch(0x00599A6A, std::vector<uint8_t>{0x0F, 0xBE, 0x97, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952852],AL
    build_patch(0x00599A7D, std::vector<uint8_t>{0x88, 0x87, 0x52, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - CMP byte ptr [EDI + 0x952852],0x20
    build_patch(0x00599A83, std::vector<uint8_t>{0x80, 0xBF, 0x52, 0x28, 0x95, 0x00, 0x20}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x00599A8C, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952839],0x0
    build_patch(0x00599ACB, std::vector<uint8_t>{0xC6, 0x87, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00599AD2, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00599ADD, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952852],0x0
    build_patch(0x00599AE3, std::vector<uint8_t>{0xC6, 0x87, 0x52, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - MOV byte ptr [EDI + 0x952851],AL
    build_patch(0x00599AF6, std::vector<uint8_t>{0x88, 0x87, 0x51, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x29);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00599AFC, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV EAX,dword ptr [EDI + 0x95282c]
    build_patch(0x00599B09, std::vector<uint8_t>{0x8B, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EDI + 0x95282c],EAX
    build_patch(0x00599B14, std::vector<uint8_t>{0x89, 0x87, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],BL
    build_patch(0x00599FC0, std::vector<uint8_t>{0x88, 0x98, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x00599FC8, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV CL,byte ptr [EAX + 0x952852]
    build_patch(0x00599FD3, std::vector<uint8_t>{0x8A, 0x88, 0x52, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952852],CL
    build_patch(0x00599FDE, std::vector<uint8_t>{0x88, 0x88, 0x52, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952852],0x0
    build_patch(0x00599FEB, std::vector<uint8_t>{0xC6, 0x80, 0x52, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x2A);
    // order_veh(int,int,int) - TEST byte ptr [ESI + 0x95282c],0x8
    build_patch(0x0059A05E, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x08}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x0059A067, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x0059A075, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0059A095, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x0059A09D, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - CMP byte ptr [EAX + 0x952839],0x18
    build_patch(0x0059A0CB, std::vector<uint8_t>{0x80, 0xB8, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV CX,word ptr [EAX + 0x952828]
    build_patch(0x0059A0D8, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // order_veh(int,int,int) - CMP CX,word ptr [EAX + 0x95283c]
    build_patch(0x0059A0DF, std::vector<uint8_t>{0x66, 0x3B, 0x88, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV DX,word ptr [EAX + 0x95282a]
    build_patch(0x0059A0EC, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // order_veh(int,int,int) - CMP DX,word ptr [EAX + 0x952844]
    build_patch(0x0059A0F3, std::vector<uint8_t>{0x66, 0x3B, 0x90, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x0059A100, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0059A107, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV CL,byte ptr [EAX + 0x95283b]
    build_patch(0x0059A11B, std::vector<uint8_t>{0x8A, 0x88, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // order_veh(int,int,int) - MOV DL,byte ptr [EAX + 0x95283a]
    build_patch(0x0059A121, std::vector<uint8_t>{0x8A, 0x90, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x95283b],CL
    build_patch(0x0059A130, std::vector<uint8_t>{0x88, 0x88, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // order_veh(int,int,int) - MOV byte ptr [EAX + 0x952839],0x18
    build_patch(0x0059A136, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // order_veh(int,int,int) - MOV DL,byte ptr [EAX + 0x95283b]
    build_patch(0x0059A142, std::vector<uint8_t>{0x8A, 0x90, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // order_veh(int,int,int) - MOV DX,word ptr [EDX*0x2 + 0x95283c]
    build_patch(0x0059A14C, std::vector<uint8_t>{0x66, 0x8B, 0x14, 0x55, 0x3C, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV word ptr [EAX + 0x95283c],DX
    build_patch(0x0059A154, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // order_veh(int,int,int) - MOV DL,byte ptr [EAX + 0x95283b]
    build_patch(0x0059A15D, std::vector<uint8_t>{0x8A, 0x90, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // order_veh(int,int,int) - MOV CX,word ptr [EDX*0x2 + 0x952844]
    build_patch(0x0059A165, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x55, 0x44, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOV word ptr [EAX + 0x952844],CX
    build_patch(0x0059A16D, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // order_veh(int,int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x0059A174, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // order_veh(int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x0059A180, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // zoc_path(int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x0059A4C6, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // zoc_path(int,int,int) - MOV DX,word ptr [EAX + 0x952830]
    build_patch(0x0059A4D0, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // zoc_path(int,int,int) - TEST byte ptr [EAX + 0x95284f],BL
    build_patch(0x0059A4E4, std::vector<uint8_t>{0x84, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // zoc_path(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x0059A4EC, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // find(int,int,int,int,int,int,int,int) - CMP byte ptr [EAX + 0x94a379],0x1
    build_patch(0x0059A57C, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // find(int,int,int,int,int,int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x0059B2C7, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // find(int,int,int,int,int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0059B2ED, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // find(int,int,int,int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x0059B30A, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // find(int,int,int,int,int,int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x0059BB38, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // find(int,int,int,int,int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x0059BB5E, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // find(int,int,int,int,int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x0059BB78, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // move(int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x0059BC3A, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // move(int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x0059BC50, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // move(int,int) - MOVSX EBX,word ptr [ESI + 0x952828]
    build_patch(0x0059BC57, std::vector<uint8_t>{0x0F, 0xBF, 0x9E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // move(int,int) - MOVSX EAX,word ptr [ESI + 0x95283c]
    build_patch(0x0059BC5E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // move(int,int) - MOVSX ECX,word ptr [ESI + 0x952844]
    build_patch(0x0059BC6B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // move(int,int) - MOV EDX,dword ptr [ESI + 0x95282c]
    build_patch(0x0059BCC5, std::vector<uint8_t>{0x8B, 0x96, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0059BCE0, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOV CL,byte ptr [ESI + 0x952850]
    build_patch(0x0059BD06, std::vector<uint8_t>{0x8A, 0x8E, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // move(int,int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x0059BD3E, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // move(int,int) - CMP word ptr [ESI + 0x952832],0x8
    build_patch(0x0059BD5A, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x08}, 3, new_VEH_addr + 0xA);
    // move(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x0059BD73, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // move(int,int) - TEST dword ptr [ESI + 0x95282c],0x10000
    build_patch(0x0059BE2D, std::vector<uint8_t>{0xF7, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x01, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOVSX EAX,byte ptr [ESI + 0x952851]
    build_patch(0x0059BE39, std::vector<uint8_t>{0x0F, 0xBE, 0x86, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // move(int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x0059BE45, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // move(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0059BE73, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x0059BE85, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // move(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x0059BE8C, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x0059BE98, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0059BFEA, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // move(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0059C0FD, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // move(int,int) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x0059C14A, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // move(int,int) - MOV ECX,dword ptr [EDX + 0x95282c]
    build_patch(0x0059C162, std::vector<uint8_t>{0x8B, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOVSX EAX,byte ptr [EDX + 0x952851]
    build_patch(0x0059C170, std::vector<uint8_t>{0x0F, 0xBE, 0x82, 0x51, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x29);
    // move(int,int) - MOVSX ESI,word ptr [EDX + 0x952832]
    build_patch(0x0059C17E, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // move(int,int) - MOV dword ptr [EDX + 0x95282c],ECX
    build_patch(0x0059C1B0, std::vector<uint8_t>{0x89, 0x8A, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // move(int,int) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x0059C1BB, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // success_rates(int,int,int,int) - MOV ECX,dword ptr [ECX*0x4 + 0x96cc78]
    build_patch(0x0059EF79, std::vector<uint8_t>{0x8B, 0x0C, 0x8D, 0x78, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x18384);
    // success_rates(int,int,int,int) - MOV ECX,dword ptr [ECX*0x4 + 0x96cc78]
    build_patch(0x0059F063, std::vector<uint8_t>{0x8B, 0x0C, 0x8D, 0x78, 0xCC, 0x96, 0x00}, -1, new_VEH_addr + 0x18384);
    // probe(int,int,int,int) - MOV BL,byte ptr [EAX + 0x952836]
    build_patch(0x0059F179, std::vector<uint8_t>{0x8A, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // probe(int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x0059F19E, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0059F1E2, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0059F1E9, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0059F239, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0059F240, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x0059F26D, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x0059F29D, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0059F377, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0059F37E, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x0059F3AF, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x0059F49B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x0059F4A2, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [ECX + 0x952832]
    build_patch(0x0059F4C8, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV byte ptr [EAX + 0x952854],DL
    build_patch(0x0059FB2E, std::vector<uint8_t>{0x88, 0x90, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV AL,byte ptr [ECX + 0x952854]
    build_patch(0x0059FB4F, std::vector<uint8_t>{0x8A, 0x81, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - OR byte ptr [ESI*0x4 + 0x952854],CL
    build_patch(0x005A01DD, std::vector<uint8_t>{0x08, 0x0C, 0xB5, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV AL,byte ptr [EAX*0x4 + 0x952854]
    build_patch(0x005A01EC, std::vector<uint8_t>{0x8A, 0x04, 0x85, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - OR byte ptr [EDI + 0x952854],DL
    build_patch(0x005A084A, std::vector<uint8_t>{0x08, 0x97, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV AL,byte ptr [EDI + 0x952854]
    build_patch(0x005A085E, std::vector<uint8_t>{0x8A, 0x87, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV byte ptr [EAX + 0x952855],CL
    build_patch(0x005A0AED, std::vector<uint8_t>{0x88, 0x88, 0x55, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2D);
    // probe(int,int,int,int) - MOVSX EDX,byte ptr [EDI + 0x952855]
    build_patch(0x005A0AF5, std::vector<uint8_t>{0x0F, 0xBE, 0x97, 0x55, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2D);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A12ED, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005A1321, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x005A1426, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005A1460, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005A1467, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOV AX,word ptr [EDI + 0x952856]
    build_patch(0x005A14C4, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x005A152A, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A17B9, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A17D7, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV EDX,dword ptr [ECX*0x4 + 0x95282c]
    build_patch(0x005A182E, std::vector<uint8_t>{0x8B, 0x14, 0x8D, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A1883, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A18A4, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A18C6, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EDI + 0x95282a]
    build_patch(0x005A18DE, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952828]
    build_patch(0x005A18F8, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005A1A76, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005A1A7D, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005A1C1A, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005A1C28, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005A1C70, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - OR byte ptr [ESI*0x4 + 0x952854],DL
    build_patch(0x005A1FB5, std::vector<uint8_t>{0x08, 0x14, 0xB5, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952854]
    build_patch(0x005A1FC7, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005A2786, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // probe(int,int,int,int) - OR byte ptr [ECX*0x4 + 0x952854],DL
    build_patch(0x005A2D2A, std::vector<uint8_t>{0x08, 0x14, 0x8D, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952854]
    build_patch(0x005A2D3C, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952854]
    build_patch(0x005A30C7, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV byte ptr [EAX*0x4 + 0x952854],CL
    build_patch(0x005A30D0, std::vector<uint8_t>{0x88, 0x0C, 0x85, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952854]
    build_patch(0x005A30E7, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x54, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2C);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005A34E6, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x005A3521, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005A3537, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005A3592, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x005A35B6, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952856]
    build_patch(0x005A3C67, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // probe(int,int,int,int) - ADD byte ptr [EAX*0x4 + 0x952838],DL
    build_patch(0x005A4006, std::vector<uint8_t>{0x00, 0x14, 0x85, 0x38, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x10);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005A4119, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV word ptr [ESI + 0x952832],AX
    build_patch(0x005A417F, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x005A4194, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV byte ptr [ESI + 0x952836],BL
    build_patch(0x005A419E, std::vector<uint8_t>{0x88, 0x9E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005A41DC, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005A41EA, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005A41F8, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005A41FF, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOV word ptr [ESI + 0x952856],AX
    build_patch(0x005A4211, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // probe(int,int,int,int) - MOV byte ptr [ESI + 0x952850],0x0
    build_patch(0x005A4218, std::vector<uint8_t>{0xC6, 0x86, 0x50, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x28);
    // probe(int,int,int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x005A421F, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // probe(int,int,int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005A4226, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // probe(int,int,int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005A4233, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005A423E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005A4245, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x005A4261, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x005A4268, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005A431C, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005A4323, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005A433C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005A43B8, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005A43BF, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x005A43D7, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005A43DE, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005A447F, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005A4486, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005A449F, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005A451B, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952828]
    build_patch(0x005A4522, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x005A453A, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // probe(int,int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005A4541, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005A45A5, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - MOV byte ptr [EAX + 0x95284d],0x0
    build_patch(0x005A4604, std::vector<uint8_t>{0xC6, 0x80, 0x4D, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x25);
    // probe(int,int,int,int) - MOV DL,byte ptr [ESI + 0x95284c]
    build_patch(0x005A466D, std::vector<uint8_t>{0x8A, 0x96, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // probe(int,int,int,int) - MOV byte ptr [ESI + 0x95284c],AL
    build_patch(0x005A467E, std::vector<uint8_t>{0x88, 0x86, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // probe(int,int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005A46A3, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // probe(int,int,int,int) - LEA ESI,[EDX*0x4 + 0x952832]
    build_patch(0x005A4924, std::vector<uint8_t>{0x8D, 0x34, 0x95, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_health(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005A59EF, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_health(int) - MOV DL,byte ptr [ECX + 0x952838]
    build_patch(0x005A5A36, std::vector<uint8_t>{0x8A, 0x91, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // game_data(FILE_*,int) - PUSH 0x952828
    build_patch(0x005A7D20, std::vector<uint8_t>{0x68, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // game_data(FILE_*,int) - CALL 0x005a67b0
    build_patch(0x005A7D2E, std::vector<uint8_t>{0xE8, 0x7D, 0xEA, 0xFF, 0xFF}, -1, new_VEH_addr + 0x0);
    // game_data(FILE_*,int) - PUSH 0x952828
    build_patch(0x005A7D3B, std::vector<uint8_t>{0x68, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // game_data(FILE_*,int) - MOV EAX,0x95282a
    build_patch(0x005A7DE1, std::vector<uint8_t>{0xB8, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // game_data(FILE_*,int) - LEA ESI,[EAX + 0x1a]
    build_patch(0x005A7DF0, std::vector<uint8_t>{0x8D, 0x70, 0x1A}, -1, new_VEH_addr + 0x1C);
    // game_data(FILE_*,int) - MOV word ptr [EAX + -0x2],DX
    build_patch(0x005A7DF3, std::vector<uint8_t>{0x66, 0x89, 0x50, 0xFE}, -1, new_VEH_addr + 0x0);
    // game_data(FILE_*,int) - MOV word ptr [EAX],DX
    build_patch(0x005A7DFB, std::vector<uint8_t>{0x66, 0x89, 0x10}, -1, new_VEH_addr + 0x2);
    // game_data(FILE_*,int) - MOV dword ptr [EAX + 0x2],EDX
    build_patch(0x005A7E00, std::vector<uint8_t>{0x89, 0x50, 0x02}, -1, new_VEH_addr + 0x4);
    // game_data(FILE_*,int) - MOV word ptr [EAX + 0x6],DX
    build_patch(0x005A7E07, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x06}, -1, new_VEH_addr + 0x8);
    // game_data(FILE_*,int) - MOV word ptr [EAX + 0x8],DX
    build_patch(0x005A7E17, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x08}, -1, new_VEH_addr + 0xA);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0xc],DL
    build_patch(0x005A7E1E, std::vector<uint8_t>{0x88, 0x50, 0x0C}, -1, new_VEH_addr + 0xE);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0xe],DL
    build_patch(0x005A7E24, std::vector<uint8_t>{0x88, 0x50, 0x0E}, -1, new_VEH_addr + 0x10);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0xf],DL
    build_patch(0x005A7E2A, std::vector<uint8_t>{0x88, 0x50, 0x0F}, -1, new_VEH_addr + 0x11);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x10],DL
    build_patch(0x005A7E30, std::vector<uint8_t>{0x88, 0x50, 0x10}, -1, new_VEH_addr + 0x12);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x11],DL
    build_patch(0x005A7E36, std::vector<uint8_t>{0x88, 0x50, 0x11}, -1, new_VEH_addr + 0x13);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0xd],0x0
    build_patch(0x005A7E39, std::vector<uint8_t>{0xC6, 0x40, 0x0D, 0x00}, -1, new_VEH_addr + 0xF);
    // game_data(FILE_*,int) - MOV word ptr [EAX + 0xa],0x0
    build_patch(0x005A7E3D, std::vector<uint8_t>{0x66, 0xC7, 0x40, 0x0A, 0x00, 0x00}, -1, new_VEH_addr + 0xC);
    // game_data(FILE_*,int) - MOV word ptr [ESI + -0x8],DI
    build_patch(0x005A7E4D, std::vector<uint8_t>{0x66, 0x89, 0x7E, 0xF8}, -1, new_VEH_addr + 0x14);
    // game_data(FILE_*,int) - MOV word ptr [ESI],DI
    build_patch(0x005A7E55, std::vector<uint8_t>{0x66, 0x89, 0x3E}, -1, new_VEH_addr + 0x1C);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x22],DL
    build_patch(0x005A7E6A, std::vector<uint8_t>{0x88, 0x50, 0x22}, -1, new_VEH_addr + 0x24);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x23],DL
    build_patch(0x005A7E70, std::vector<uint8_t>{0x88, 0x50, 0x23}, -1, new_VEH_addr + 0x25);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x24],DL
    build_patch(0x005A7E76, std::vector<uint8_t>{0x88, 0x50, 0x24}, -1, new_VEH_addr + 0x26);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x25],DL
    build_patch(0x005A7E7C, std::vector<uint8_t>{0x88, 0x50, 0x25}, -1, new_VEH_addr + 0x27);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x26],DL
    build_patch(0x005A7E82, std::vector<uint8_t>{0x88, 0x50, 0x26}, -1, new_VEH_addr + 0x28);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x27],DL
    build_patch(0x005A7E88, std::vector<uint8_t>{0x88, 0x50, 0x27}, -1, new_VEH_addr + 0x29);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x28],DL
    build_patch(0x005A7E8E, std::vector<uint8_t>{0x88, 0x50, 0x28}, -1, new_VEH_addr + 0x2A);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x29],DL
    build_patch(0x005A7E94, std::vector<uint8_t>{0x88, 0x50, 0x29}, -1, new_VEH_addr + 0x2B);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x2a],DL
    build_patch(0x005A7E9A, std::vector<uint8_t>{0x88, 0x50, 0x2A}, -1, new_VEH_addr + 0x2C);
    // game_data(FILE_*,int) - MOV byte ptr [EAX + 0x2b],DL
    build_patch(0x005A7EA0, std::vector<uint8_t>{0x88, 0x50, 0x2B}, -1, new_VEH_addr + 0x2D);
    // game_data(FILE_*,int) - MOV word ptr [EAX + 0x2c],DX
    build_patch(0x005A7EA7, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x2C}, -1, new_VEH_addr + 0x2E);
    // game_data(FILE_*,int) - MOV word ptr [EAX + 0x2e],DX
    build_patch(0x005A7EAF, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x2E}, -1, new_VEH_addr + 0x30);
    // game_data(FILE_*,int) - MOV word ptr [EAX + 0x30],DX
    build_patch(0x005A7EB7, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x30}, -1, new_VEH_addr + 0x32);
    // game_data(FILE_*,int) - MOV ESI,0x952832
    build_patch(0x005A818A, std::vector<uint8_t>{0xBE, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // game_data(FILE_*,int) - MOVSX EDI,word ptr [ESI]
    build_patch(0x005A8192, std::vector<uint8_t>{0x0F, 0xBF, 0x3E}, -1, new_VEH_addr + 0xA);
    // game_data(FILE_*,int) - MOV word ptr [ESI],AX
    build_patch(0x005A81B2, std::vector<uint8_t>{0x66, 0x89, 0x06}, -1, new_VEH_addr + 0xA);
    // load_daemon(char_*,int) - MOV EDX,0x952832
    build_patch(0x005A9990, std::vector<uint8_t>{0xBA, 0x32, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xA);
    // load_daemon(char_*,int) - MOV AL,byte ptr [EDX + 0x4]
    build_patch(0x005A9997, std::vector<uint8_t>{0x8A, 0x42, 0x04}, -1, new_VEH_addr + 0xE);
    // load_daemon(char_*,int) - MOVSX EAX,word ptr [EDX]
    build_patch(0x005A999E, std::vector<uint8_t>{0x0F, 0xBF, 0x02}, -1, new_VEH_addr + 0xA);
    // num_objectives(int,int) - MOV EAX,0x95282a
    build_patch(0x005AC167, std::vector<uint8_t>{0xB8, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // num_objectives(int,int) - MOV dword ptr [EBP + -0x8],EAX
    build_patch(0x005AC16C, std::vector<uint8_t>{0x89, 0x45, 0xF8}, -1, new_VEH_addr + 0x2);
    // num_objectives(int,int) - MOV DL,byte ptr [EAX + 0xc]
    build_patch(0x005AC171, std::vector<uint8_t>{0x8A, 0x50, 0x0C}, -1, new_VEH_addr + 0xE);
    // num_objectives(int,int) - TEST byte ptr [EAX + 0x6],0x20
    build_patch(0x005AC17C, std::vector<uint8_t>{0xF6, 0x40, 0x06, 0x20}, -1, new_VEH_addr + 0x8);
    // num_objectives(int,int) - MOVSX ECX,word ptr [EAX]
    build_patch(0x005AC198, std::vector<uint8_t>{0x0F, 0xBF, 0x08}, -1, new_VEH_addr + 0x2);
    // num_objectives(int,int) - MOVSX EDX,word ptr [EAX + -0x2]
    build_patch(0x005AC19B, std::vector<uint8_t>{0x0F, 0xBF, 0x50, 0xFE}, -1, new_VEH_addr + 0x0);
    // num_objectives(int,int) - MOVSX ECX,word ptr [EAX]
    build_patch(0x005AC296, std::vector<uint8_t>{0x0F, 0xBF, 0x08}, -1, new_VEH_addr + 0x2);
    // num_objectives(int,int) - MOVSX EDX,word ptr [EAX + -0x2]
    build_patch(0x005AC299, std::vector<uint8_t>{0x0F, 0xBF, 0x50, 0xFE}, -1, new_VEH_addr + 0x0);
    // num_objectives(int,int) - MOV dword ptr [EBP + -0x8],EAX
    build_patch(0x005AC331, std::vector<uint8_t>{0x89, 0x45, 0xF8}, -1, new_VEH_addr + 0x36);
    // crash_landing(int) - MOV ECX,0x952836
    build_patch(0x005AE1EF, std::vector<uint8_t>{0xB9, 0x36, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0xE);
    // crash_landing(int) - MOV DL,byte ptr [ECX]
    build_patch(0x005AE1F9, std::vector<uint8_t>{0x8A, 0x11}, -1, new_VEH_addr + 0xE);
    // crash_landing(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x005AE35C, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // crash_landing(int) - MOVSX EBX,word ptr [EAX + 0x952828]
    build_patch(0x005AE363, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // time_warp(void) - MOV byte ptr [EAX + 0x952839],0x2
    build_patch(0x005AF299, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // time_warp(void) - MOV DL,byte ptr [EAX + 0x95284c]
    build_patch(0x005AF2A0, std::vector<uint8_t>{0x8A, 0x90, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX + 0x95284c],DL
    build_patch(0x005AF2A8, std::vector<uint8_t>{0x88, 0x90, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX + 0x952839],0x2
    build_patch(0x005AF2C4, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // time_warp(void) - MOV DL,byte ptr [EAX + 0x95284c]
    build_patch(0x005AF3B1, std::vector<uint8_t>{0x8A, 0x90, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - LEA EAX,[EAX + 0x95284c]
    build_patch(0x005AF3B7, std::vector<uint8_t>{0x8D, 0x80, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX],DL
    build_patch(0x005AF3C5, std::vector<uint8_t>{0x88, 0x10}, -1, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX],0x2
    build_patch(0x005AF3C9, std::vector<uint8_t>{0xC6, 0x00, 0x02}, -1, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX + 0x95284c],0x2
    build_patch(0x005AF507, std::vector<uint8_t>{0xC6, 0x80, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV CL,byte ptr [EAX + 0x95284c]
    build_patch(0x005AF530, std::vector<uint8_t>{0x8A, 0x88, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - LEA EAX,[EAX + 0x95284c]
    build_patch(0x005AF539, std::vector<uint8_t>{0x8D, 0x80, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX],CL
    build_patch(0x005AF544, std::vector<uint8_t>{0x88, 0x08}, -1, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [ECX + 0x95284c],0x2
    build_patch(0x005AFA8D, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX + 0x952839],0x2
    build_patch(0x005AFA9A, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // time_warp(void) - MOV byte ptr [ECX + 0x95284c],0x2
    build_patch(0x005AFAC6, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX + 0x952839],0x2
    build_patch(0x005AFAD0, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // time_warp(void) - MOV CL,byte ptr [EAX + 0x95284c]
    build_patch(0x005AFC26, std::vector<uint8_t>{0x8A, 0x88, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - LEA EAX,[EAX + 0x95284c]
    build_patch(0x005AFC2F, std::vector<uint8_t>{0x8D, 0x80, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [EAX],CL
    build_patch(0x005AFC37, std::vector<uint8_t>{0x88, 0x08}, -1, new_VEH_addr + 0x24);
    // time_warp(void) - MOV byte ptr [ECX + 0x95284c],0x2
    build_patch(0x005AFDC5, std::vector<uint8_t>{0xC6, 0x81, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // time_warp(void) - MOV dword ptr [EBP + -0x10],0x952832
    build_patch(0x005B0208, std::vector<uint8_t>{0xC7, 0x45, 0xF0, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // time_warp(void) - MOV DL,byte ptr [EAX + 0x4]
    build_patch(0x005B0214, std::vector<uint8_t>{0x8A, 0x50, 0x04}, -1, new_VEH_addr + 0xE);
    // time_warp(void) - MOVSX EAX,word ptr [ECX]
    build_patch(0x005B0225, std::vector<uint8_t>{0x0F, 0xBF, 0x01}, -1, new_VEH_addr + 0xA);
    // time_warp(void) - CMP byte ptr [EDX + 0x94a379],0x1
    build_patch(0x005B0256, std::vector<uint8_t>{0x80, 0xBA, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // time_warp(void) - MOV AL,byte ptr [EDX + 0x94a379]
    build_patch(0x005B0275, std::vector<uint8_t>{0x8A, 0x82, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // time_warp(void) - MOVSX ECX,word ptr [EDX + -0xa]
    build_patch(0x005B0291, std::vector<uint8_t>{0x0F, 0xBF, 0x4A, 0xF6}, -1, new_VEH_addr + 0x0);
    // time_warp(void) - MOVSX EDX,word ptr [EDX + -0x8]
    build_patch(0x005B02BF, std::vector<uint8_t>{0x0F, 0xBF, 0x52, 0xF8}, -1, new_VEH_addr + 0x2);
    // time_warp(void) - MOV dword ptr [EBP + -0x10],EDX
    build_patch(0x005B03E9, std::vector<uint8_t>{0x89, 0x55, 0xF0}, -1, new_VEH_addr + 0x3E);
    // balance(void) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x005B0455, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // balance(void) - MOVSX ESI,word ptr [ECX + 0x952828]
    build_patch(0x005B045C, std::vector<uint8_t>{0x0F, 0xBF, 0xB1, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // balance(void) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005B04D7, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // balance(void) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x005B04DE, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // balance(void) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x005B053C, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // balance(void) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x005B0543, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // balance(void) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005B07ED, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // balance(void) - MOVSX EAX,word ptr [EAX + 0x95282a]
    build_patch(0x005B07F4, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // balance(void) - MOV word ptr [EDX*0x4 + 0x952856],0xffff
    build_patch(0x005B08C6, std::vector<uint8_t>{0x66, 0xC7, 0x04, 0x95, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 4, new_VEH_addr + 0x2E);
    // scenario_setup(void) - LEA ECX,[EDX*0x4 + 0x952830]
    build_patch(0x005B0A50, std::vector<uint8_t>{0x8D, 0x0C, 0x95, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // scenario_setup(void) - CMP byte ptr [EAX + 0x94a379],0x2
    build_patch(0x005B0B06, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x02}, -1, new_VEH_addr + 0xAC1);
    // scenario_setup(void) - CMP byte ptr [EAX + 0x94a379],0x1
    build_patch(0x005B0B56, std::vector<uint8_t>{0x80, 0xB8, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // scenario_setup(void) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B0C10, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // scenario_setup(void) - MOV EDI,0x952828
    build_patch(0x005B0C61, std::vector<uint8_t>{0xBF, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // scenario_setup(void) - MOVSX EAX,word ptr [EDI]
    build_patch(0x005B0C6B, std::vector<uint8_t>{0x0F, 0xBF, 0x07}, -1, new_VEH_addr + 0x0);
    // scenario_setup(void) - MOVSX EBX,word ptr [EDI + 0x2]
    build_patch(0x005B0C71, std::vector<uint8_t>{0x0F, 0xBF, 0x5F, 0x02}, -1, new_VEH_addr + 0x2);
    // setup_player(int,int,int) - ADD EBX,0x952832
    build_patch(0x005B1016, std::vector<uint8_t>{0x81, 0xC3, 0x32, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xA);
    // setup_player(int,int,int) - MOV EBX,0x95282a
    build_patch(0x005B1A09, std::vector<uint8_t>{0xBB, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // setup_player(int,int,int) - MOVSX EDI,word ptr [EBX]
    build_patch(0x005B1A0E, std::vector<uint8_t>{0x0F, 0xBF, 0x3B}, -1, new_VEH_addr + 0x2);
    // setup_player(int,int,int) - MOVSX EAX,word ptr [EBX + -0x2]
    build_patch(0x005B1A1D, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0xFE}, -1, new_VEH_addr + 0x0);
    // setup_player(int,int,int) - MOV CL,byte ptr [EBX + 0xc]
    build_patch(0x005B1A3E, std::vector<uint8_t>{0x8A, 0x4B, 0x0C}, -1, new_VEH_addr + 0xE);
    // setup_player(int,int,int) - MOV EBX,0x952828
    build_patch(0x005B2048, std::vector<uint8_t>{0xBB, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // setup_player(int,int,int) - MOVSX EAX,word ptr [EBX]
    build_patch(0x005B204D, std::vector<uint8_t>{0x0F, 0xBF, 0x03}, -1, new_VEH_addr + 0x0);
    // setup_player(int,int,int) - MOVSX EDI,word ptr [EBX + 0x2]
    build_patch(0x005B2053, std::vector<uint8_t>{0x0F, 0xBF, 0x7B, 0x02}, -1, new_VEH_addr + 0x2);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],DI
    build_patch(0x005B2C61, std::vector<uint8_t>{0x66, 0x89, 0xB9, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],DI
    build_patch(0x005B2C9F, std::vector<uint8_t>{0x66, 0x89, 0xB9, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],DI
    build_patch(0x005B2CC1, std::vector<uint8_t>{0x66, 0x89, 0xB9, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV byte ptr [EDI + 0x95284c],0x2
    build_patch(0x005B2DC3, std::vector<uint8_t>{0xC6, 0x87, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // setup_player(int,int,int) - MOV word ptr [EDI + 0x952856],0xffff
    build_patch(0x005B2DCF, std::vector<uint8_t>{0x66, 0xC7, 0x87, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV byte ptr [EDI + 0x95284c],0x2
    build_patch(0x005B2E4E, std::vector<uint8_t>{0xC6, 0x87, 0x4C, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x24);
    // setup_player(int,int,int) - MOV word ptr [EDI + 0x952856],0xffff
    build_patch(0x005B2E5D, std::vector<uint8_t>{0x66, 0xC7, 0x87, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],0xffff
    build_patch(0x005B2F00, std::vector<uint8_t>{0x66, 0xC7, 0x81, 0x56, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],SI
    build_patch(0x005B2F66, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],SI
    build_patch(0x005B2F88, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],SI
    build_patch(0x005B3060, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - MOV word ptr [ECX + 0x952856],SI
    build_patch(0x005B3082, std::vector<uint8_t>{0x66, 0x89, 0xB1, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // setup_player(int,int,int) - CMP byte ptr [ECX + 0x94a379],0x1
    build_patch(0x005B311F, std::vector<uint8_t>{0x80, 0xB9, 0x79, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC1);
    // setup_player(int,int,int) - MOV AL,byte ptr [EDX + 0x94a379]
    build_patch(0x005B3138, std::vector<uint8_t>{0x8A, 0x82, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // setup_player(int,int,int) - MOV DL,byte ptr [EAX + 0x94a378]
    build_patch(0x005B3190, std::vector<uint8_t>{0x8A, 0x90, 0x78, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC0);
    // setup_player(int,int,int) - MOV DL,byte ptr [EAX + 0x94a378]
    build_patch(0x005B31C0, std::vector<uint8_t>{0x8A, 0x90, 0x78, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC0);
    // setup_player(int,int,int) - CMP byte ptr [EDX + 0x94a378],0x1
    build_patch(0x005B31EB, std::vector<uint8_t>{0x80, 0xBA, 0x78, 0xA3, 0x94, 0x00, 0x01}, -1, new_VEH_addr + 0xAC0);
    // eliminate_player(int,int) - LEA EBX,[EDX*0x4 + 0x952836]
    build_patch(0x005B33D2, std::vector<uint8_t>{0x8D, 0x1C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // eliminate_player(int,int) - MOVSX EDI,word ptr [EDX + 0x952828]
    build_patch(0x005B371E, std::vector<uint8_t>{0x0F, 0xBF, 0xBA, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // eliminate_player(int,int) - MOVSX EAX,word ptr [EDX + 0x95282a]
    build_patch(0x005B374C, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // eliminate_player(int,int) - MOV DX,word ptr [EDX + 0x95285a]
    build_patch(0x005B3793, std::vector<uint8_t>{0x66, 0x8B, 0x92, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // eliminate_player(int,int) - MOV DX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B37B2, std::vector<uint8_t>{0x66, 0x8B, 0x14, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // eliminate_player(int,int) - MOV byte ptr [EAX + 0x95284f],0x0
    build_patch(0x005B37CC, std::vector<uint8_t>{0xC6, 0x80, 0x4F, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x27);
    // eliminate_player(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x005B37D3, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // eliminate_player(int,int) - MOV byte ptr [EAX + 0x95284f],DL
    build_patch(0x005B37FE, std::vector<uint8_t>{0x88, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // eliminate_player(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B3804, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // social_ai(int,int,int,int,int,int_*) - MOV EAX,dword ptr [EDX*0x4 + 0x96cd3c]
    build_patch(0x005B4A0D, std::vector<uint8_t>{0x8B, 0x04, 0x95, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // social_ai(int,int,int,int,int,int_*) - CMP EDX,dword ptr [ECX + 0x96cd3c]
    build_patch(0x005B505E, std::vector<uint8_t>{0x3B, 0x91, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // social_ai(int,int,int,int,int,int_*) - CMP EDI,dword ptr [ECX + 0x96c9e4]
    build_patch(0x005B506C, std::vector<uint8_t>{0x3B, 0xB9, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // social_ai(int,int,int,int,int,int_*) - CMP EDX,dword ptr [ECX + 0x96cd3c]
    build_patch(0x005B508F, std::vector<uint8_t>{0x3B, 0x91, 0x3C, 0xCD, 0x96, 0x00}, -1, new_VEH_addr + 0x18448);
    // social_ai(int,int,int,int,int,int_*) - MOV EDI,dword ptr [ECX + 0x96c9e4]
    build_patch(0x005B509A, std::vector<uint8_t>{0x8B, 0xB9, 0xE4, 0xC9, 0x96, 0x00}, -1, new_VEH_addr + 0x180F0);
    // spot_stack(int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x005B58FD, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_stack(int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005B5904, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_stack(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B5A05, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_stack(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B5A1B, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_stack(int,int) - OR byte ptr [EAX + 0x95284f],DL
    build_patch(0x005B5A40, std::vector<uint8_t>{0x08, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_stack(int,int) - AND word ptr [EAX + 0x952830],CX
    build_patch(0x005B5A4A, std::vector<uint8_t>{0x66, 0x21, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_stack(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B5A51, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // unspot_stack(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B5A82, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // unspot_stack(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B5A98, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // unspot_stack(int) - MOV byte ptr [EAX + 0x95284f],DL
    build_patch(0x005B5AB2, std::vector<uint8_t>{0x88, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // unspot_stack(int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B5AB8, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_loc(int,int,int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x005B5CB7, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_loc(int,int,int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005B5CBE, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_loc(int,int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x005B5DAA, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_loc(int,int,int) - MOV CX,word ptr [EDX + 0x95285a]
    build_patch(0x005B5DBE, std::vector<uint8_t>{0x66, 0x8B, 0x8A, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_loc(int,int,int) - MOV BL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B5DDC, std::vector<uint8_t>{0x8A, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_loc(int,int,int) - MOV byte ptr [EAX + 0x95284f],BL
    build_patch(0x005B5DE6, std::vector<uint8_t>{0x88, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_loc(int,int,int) - AND word ptr [EAX + 0x952830],CX
    build_patch(0x005B5DEE, std::vector<uint8_t>{0x66, 0x21, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_loc(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B5DF5, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // FUN_005b5e10 - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x005B5E1F, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // FUN_005b5e10 - MOV DL,byte ptr [EAX + 0x95283b]
    build_patch(0x005B5E35, std::vector<uint8_t>{0x8A, 0x90, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // FUN_005b5e10 - MOV BL,byte ptr [EAX + 0x95283a]
    build_patch(0x005B5E3C, std::vector<uint8_t>{0x8A, 0x98, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // FUN_005b5e10 - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x005B5E4D, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // FUN_005b5e10 - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x005B5E53, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // FUN_005b5e10 - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x005B5E6F, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // FUN_005b5e10 - MOV EDX,dword ptr [EAX + 0x95282c]
    build_patch(0x005B5E75, std::vector<uint8_t>{0x8B, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // FUN_005b5e10 - MOV dword ptr [EAX + 0x95282c],EDX
    build_patch(0x005B5E7E, std::vector<uint8_t>{0x89, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // FUN_005b5e10 - MOV CL,byte ptr [EAX + 0x952839]
    build_patch(0x005B5E84, std::vector<uint8_t>{0x8A, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // FUN_005b5e10 - MOV byte ptr [EAX + 0x952839],0x0
    build_patch(0x005B5E8F, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // want_to_wake(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005B5EB1, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // want_to_wake(int,int,int) - MOV AL,byte ptr [ECX + 0x95284d]
    build_patch(0x005B5EDC, std::vector<uint8_t>{0x8A, 0x81, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // want_to_wake(int,int,int) - CMP byte ptr [ECX + 0x952839],0x18
    build_patch(0x005B5EE6, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x18}, 2, new_VEH_addr + 0x11);
    // want_to_wake(int,int,int) - MOVSX EAX,word ptr [ECX + 0x952844]
    build_patch(0x005B5EEF, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x44, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x1C);
    // want_to_wake(int,int,int) - MOVSX EDX,word ptr [ECX + 0x95283c]
    build_patch(0x005B5EFD, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // want_to_wake(int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x005B5F2E, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // want_to_wake(int,int,int) - MOV AL,byte ptr [ECX + 0x952836]
    build_patch(0x005B5F5F, std::vector<uint8_t>{0x8A, 0x81, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // want_to_wake(int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005B6014, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // want_to_wake(int,int,int) - MOV ECX,dword ptr [ECX + 0x95282c]
    build_patch(0x005B6040, std::vector<uint8_t>{0x8B, 0x89, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // wake_stack(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B6074, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // wake_stack(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B608A, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // wake_stack(int) - CMP byte ptr [ECX + 0x952839],0x1
    build_patch(0x005B60B7, std::vector<uint8_t>{0x80, 0xB9, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // wake_stack(int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005B60C4, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // wake_stack(int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x005B60F0, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // wake_stack(int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x005B60F7, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // wake_stack(int) - MOVSX EAX,word ptr [ECX + 0x95283c]
    build_patch(0x005B6119, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // wake_stack(int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005B612A, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // wake_stack(int) - MOV byte ptr [ECX + 0x952839],0x0
    build_patch(0x005B6170, std::vector<uint8_t>{0xC6, 0x81, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // wake_stack(int) - MOV EAX,dword ptr [ECX + 0x95282c]
    build_patch(0x005B6177, std::vector<uint8_t>{0x8B, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // wake_stack(int) - MOV dword ptr [ECX + 0x95282c],EAX
    build_patch(0x005B6180, std::vector<uint8_t>{0x89, 0x81, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // wake_stack(int) - MOVSX EAX,word ptr [ECX + 0x952858]
    build_patch(0x005B6186, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // FUN_005b61a0 - MOVSX EDX,word ptr [ESI + 0x952832]
    build_patch(0x005B61B2, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // FUN_005b61a0 - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005B61CE, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // FUN_005b61a0 - MOV CX,word ptr [ESI + 0x952830]
    build_patch(0x005B61EC, std::vector<uint8_t>{0x66, 0x8B, 0x8E, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // FUN_005b61a0 - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005B6206, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // FUN_005b61a0 - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005B6214, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // FUN_005b61a0 - CMP word ptr [ESI + 0x952832],0x13
    build_patch(0x005B6242, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005B6297, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EDX,word ptr [EDI + 0x95282a]
    build_patch(0x005B629E, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EBX,word ptr [EDI + 0x952828]
    build_patch(0x005B62AB, std::vector<uint8_t>{0x0F, 0xBF, 0x9F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005B62E7, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV CX,word ptr [EDI + 0x952830]
    build_patch(0x005B6302, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005B6319, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EDX,word ptr [EDI + 0x952828]
    build_patch(0x005B6327, std::vector<uint8_t>{0x0F, 0xBF, 0x97, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - CMP word ptr [EDI + 0x952832],0x13
    build_patch(0x005B6355, std::vector<uint8_t>{0x66, 0x83, 0xBF, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x005B6374, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005B6388, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV BL,byte ptr [EDI + 0x95284f]
    build_patch(0x005B6411, std::vector<uint8_t>{0x8A, 0x9F, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EDI + 0x95284f],BL
    build_patch(0x005B6419, std::vector<uint8_t>{0x88, 0x9F, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x005B65E3, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B65F1, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B67B3, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B67C9, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x005B67EF, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x005B67F9, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005B680F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [ESI + 0x952858]
    build_patch(0x005B686F, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x005B6DFB, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B6E10, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x005B6E32, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x005B6E45, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x005B6E4C, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CX,word ptr [EBX + 0x95285a]
    build_patch(0x005B6E76, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B6E8D, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B6EAD, std::vector<uint8_t>{0x8A, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x005B6EB7, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],0xfbbf
    build_patch(0x005B6EBF, std::vector<uint8_t>{0x66, 0x81, 0xA0, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B6EC8, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX ESI,word ptr [EBX + 0x952858]
    build_patch(0x005B6ED3, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005B6FCC, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005B6FD3, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x005B7004, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B7019, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - OR byte ptr [EAX + 0x95284f],DL
    build_patch(0x005B703E, std::vector<uint8_t>{0x08, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],CX
    build_patch(0x005B7044, std::vector<uint8_t>{0x66, 0x21, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B704B, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x005B710E, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005B72E3, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005B72EA, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x005B731D, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B7332, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV BL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B735B, std::vector<uint8_t>{0x8A, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],BL
    build_patch(0x005B7365, std::vector<uint8_t>{0x88, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],CX
    build_patch(0x005B736D, std::vector<uint8_t>{0x66, 0x21, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B7374, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX ECX,word ptr [EAX + 0x952832]
    build_patch(0x005B7413, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV AL,byte ptr [EBX + 0x952836]
    build_patch(0x005B7460, std::vector<uint8_t>{0x8A, 0x83, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005B7478, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x005B749A, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x005B74D2, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x005B74D9, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B75D0, std::vector<uint8_t>{0x8A, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x005B75D8, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],0xfbbf
    build_patch(0x005B75E5, std::vector<uint8_t>{0x66, 0x81, 0xA0, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B75EE, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x005B7679, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV DL,byte ptr [EBX + 0x95283b]
    build_patch(0x005B768F, std::vector<uint8_t>{0x8A, 0x93, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // spot_all(int,int) - MOV CL,byte ptr [EBX + 0x95283a]
    build_patch(0x005B7695, std::vector<uint8_t>{0x8A, 0x8B, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // spot_all(int,int) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005B76A4, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x005B76AA, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005B76C5, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV ECX,dword ptr [EBX + 0x95282c]
    build_patch(0x005B76CB, std::vector<uint8_t>{0x8B, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [EBX + 0x95282c],ECX
    build_patch(0x005B76D4, std::vector<uint8_t>{0x89, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV AL,byte ptr [EBX + 0x952839]
    build_patch(0x005B76DA, std::vector<uint8_t>{0x8A, 0x83, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x005B7709, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV CL,byte ptr [EBX + 0x95283b]
    build_patch(0x005B771F, std::vector<uint8_t>{0x8A, 0x8B, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // spot_all(int,int) - MOV DL,byte ptr [EBX + 0x95283a]
    build_patch(0x005B7725, std::vector<uint8_t>{0x8A, 0x93, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // spot_all(int,int) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005B7734, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x005B773A, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005B7755, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV ECX,dword ptr [EBX + 0x95282c]
    build_patch(0x005B775B, std::vector<uint8_t>{0x8B, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [EBX + 0x95282c],ECX
    build_patch(0x005B7764, std::vector<uint8_t>{0x89, 0x8B, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV AL,byte ptr [EBX + 0x952839]
    build_patch(0x005B776A, std::vector<uint8_t>{0x8A, 0x83, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOV byte ptr [EBX + 0x952839],0x0
    build_patch(0x005B7774, std::vector<uint8_t>{0xC6, 0x83, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005B777B, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX ECX,word ptr [EBX + 0x952832]
    build_patch(0x005B7791, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV DX,word ptr [EBX + 0x952830]
    build_patch(0x005B77A7, std::vector<uint8_t>{0x66, 0x8B, 0x93, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EBX + 0x95282a]
    build_patch(0x005B77B9, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX ECX,word ptr [EBX + 0x952828]
    build_patch(0x005B77C7, std::vector<uint8_t>{0x0F, 0xBF, 0x8B, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - CMP word ptr [EBX + 0x952832],0x13
    build_patch(0x005B77F3, std::vector<uint8_t>{0x66, 0x83, 0xBB, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV CL,byte ptr [EBX + 0x952836]
    build_patch(0x005B7822, std::vector<uint8_t>{0x8A, 0x8B, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // spot_all(int,int) - MOV CL,byte ptr [EBX + 0x95284f]
    build_patch(0x005B785B, std::vector<uint8_t>{0x8A, 0x8B, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOVSX ESI,word ptr [EBX + 0x95282a]
    build_patch(0x005B7874, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EDI,word ptr [EBX + 0x952828]
    build_patch(0x005B787B, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B796C, std::vector<uint8_t>{0x8A, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x005B7974, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],0xfbbf
    build_patch(0x005B7981, std::vector<uint8_t>{0x66, 0x81, 0xA0, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B798A, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B79D8, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV DL,byte ptr [ESI + 0x95283b]
    build_patch(0x005B79EE, std::vector<uint8_t>{0x8A, 0x96, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // spot_all(int,int) - MOV CL,byte ptr [ESI + 0x95283a]
    build_patch(0x005B79F4, std::vector<uint8_t>{0x8A, 0x8E, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // spot_all(int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005B7A03, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B7A09, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005B7A24, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B7A2A, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [ESI + 0x95282c],ECX
    build_patch(0x005B7A33, std::vector<uint8_t>{0x89, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005B7A39, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x005B7A47, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B7A80, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV DL,byte ptr [ESI + 0x95283b]
    build_patch(0x005B7A96, std::vector<uint8_t>{0x8A, 0x96, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // spot_all(int,int) - MOV CL,byte ptr [ESI + 0x95283a]
    build_patch(0x005B7A9C, std::vector<uint8_t>{0x8A, 0x8E, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // spot_all(int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005B7AAB, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B7AB1, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005B7ACC, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV ECX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B7AD2, std::vector<uint8_t>{0x8B, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [ESI + 0x95282c],ECX
    build_patch(0x005B7ADB, std::vector<uint8_t>{0x89, 0x8E, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005B7AE1, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOV byte ptr [EDX + 0x952839],0x0
    build_patch(0x005B7AEE, std::vector<uint8_t>{0xC6, 0x82, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // spot_all(int,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x005B7B18, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005B7B84, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005B7BC1, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [ECX + 0x952832]
    build_patch(0x005B7C17, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV DX,word ptr [EBX + 0x952832]
    build_patch(0x005B7C43, std::vector<uint8_t>{0x66, 0x8B, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EDI,word ptr [EAX + 0x95282a]
    build_patch(0x005B7DD4, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EBX,word ptr [EAX + 0x952828]
    build_patch(0x005B7DDB, std::vector<uint8_t>{0x0F, 0xBF, 0x98, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x005B7EB4, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B7EC9, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV BL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B7EEE, std::vector<uint8_t>{0x8A, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],BL
    build_patch(0x005B7EF6, std::vector<uint8_t>{0x88, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],CX
    build_patch(0x005B7EFC, std::vector<uint8_t>{0x66, 0x21, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B7F03, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX EDX,word ptr [EBX + 0x952832]
    build_patch(0x005B81A3, std::vector<uint8_t>{0x0F, 0xBF, 0x93, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005B81BB, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV CX,word ptr [EBX + 0x952830]
    build_patch(0x005B81D5, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX ESI,word ptr [EBX + 0x95282a]
    build_patch(0x005B81EB, std::vector<uint8_t>{0x0F, 0xBF, 0xB3, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EDI,word ptr [EBX + 0x952828]
    build_patch(0x005B81F2, std::vector<uint8_t>{0x0F, 0xBF, 0xBB, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - CMP word ptr [EBX + 0x952832],0x13
    build_patch(0x005B822B, std::vector<uint8_t>{0x66, 0x83, 0xBB, 0x32, 0x28, 0x95, 0x00, 0x13}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - TEST byte ptr [ECX + 0x95284f],AL
    build_patch(0x005B8254, std::vector<uint8_t>{0x84, 0x81, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV CX,word ptr [EBX + 0x95285a]
    build_patch(0x005B8334, std::vector<uint8_t>{0x66, 0x8B, 0x8B, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B834C, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV BL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B8370, std::vector<uint8_t>{0x8A, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],BL
    build_patch(0x005B837A, std::vector<uint8_t>{0x88, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],0xfbbf
    build_patch(0x005B8382, std::vector<uint8_t>{0x66, 0x81, 0xA0, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B838B, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX EDX,word ptr [ESI*0x4 + 0x952832]
    build_patch(0x005B8424, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0xB5, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX EAX,word ptr [ESI*0x4 + 0x952832]
    build_patch(0x005B843D, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0xB5, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x005B84EC, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x005B84F3, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x005B85E0, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B85F5, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV BL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B8619, std::vector<uint8_t>{0x8A, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],BL
    build_patch(0x005B8623, std::vector<uint8_t>{0x88, 0x98, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],0xfbbf
    build_patch(0x005B862B, std::vector<uint8_t>{0x66, 0x81, 0xA0, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B8634, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX ESI,word ptr [EAX + 0x95282a]
    build_patch(0x005B8772, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // spot_all(int,int) - MOVSX EDI,word ptr [EAX + 0x952828]
    build_patch(0x005B8779, std::vector<uint8_t>{0x0F, 0xBF, 0xB8, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // spot_all(int,int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x005B885A, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B886F, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // spot_all(int,int) - MOV CL,byte ptr [EAX + 0x95284f]
    build_patch(0x005B8892, std::vector<uint8_t>{0x8A, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x005B889C, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // spot_all(int,int) - AND word ptr [EAX + 0x952830],0xfbbf
    build_patch(0x005B88A4, std::vector<uint8_t>{0x66, 0x81, 0xA0, 0x30, 0x28, 0x95, 0x00, 0xBF, 0xFB}, 3, new_VEH_addr + 0x8);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B88AD, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005B88C0, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // spot_all(int,int) - MOV ECX,dword ptr [EAX + 0x95282c]
    build_patch(0x005B895E, std::vector<uint8_t>{0x8B, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x005B8972, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B8978, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // spot_all(int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x005B8986, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_put(int,int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B8B00, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_put(int,int,int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B8B16, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_put(int,int,int) - MOVSX ESI,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005B8B39, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_sort(int) - MOVSX ECX,word ptr [EAX + 0x952828]
    build_patch(0x005B8B77, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_sort(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005B8B7E, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_sort(int) - MOV AX,word ptr [EAX + 0x95285a]
    build_patch(0x005B8B91, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // stack_sort(int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B8BA6, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_sort(int) - MOVSX EDI,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x005B8BCA, std::vector<uint8_t>{0x0F, 0xBF, 0x3C, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_sort(int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B8BEA, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_sort(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B8C2A, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_sort(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B8C40, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_sort(int) - MOVSX ESI,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005B8C5F, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_sort_2(int) - MOVSX EDX,word ptr [ECX + 0x952828]
    build_patch(0x005B8CA7, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_sort_2(int) - MOVSX EDX,word ptr [ECX + 0x95282a]
    build_patch(0x005B8CB1, std::vector<uint8_t>{0x0F, 0xBF, 0x91, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_sort_2(int) - MOV CX,word ptr [ECX + 0x95285a]
    build_patch(0x005B8CBD, std::vector<uint8_t>{0x66, 0x8B, 0x89, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // stack_sort_2(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B8CD2, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_sort_2(int) - MOVSX ESI,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005B8CF1, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_sort_2(int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B8CFF, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_sort_2(int) - MOVSX ESI,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005B8D57, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_sort_2(int) - MOVSX ECX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B8D65, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_sort_2(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B8DA7, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_sort_2(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B8DBD, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_sort_2(int) - MOVSX ESI,word ptr [ECX*0x4 + 0x952858]
    build_patch(0x005B8DDC, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x8D, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_fix(int) - CMP word ptr [ESI + 0x952858],0x0
    build_patch(0x005B8E3F, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x58, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x30);
    // stack_fix(int) - CMP word ptr [ESI + 0x95285a],0x0
    build_patch(0x005B8E49, std::vector<uint8_t>{0x66, 0x83, 0xBE, 0x5A, 0x28, 0x95, 0x00, 0x00}, 3, new_VEH_addr + 0x32);
    // stack_fix(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005B8E5B, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_fix(int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x005B8E62, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_fix(int) - MOVSX EAX,word ptr [ESI + 0x952828]
    build_patch(0x005B8E7B, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_fix(int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005B8E87, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_fix(int) - MOV SI,word ptr [ESI + 0x95285a]
    build_patch(0x005B8EAC, std::vector<uint8_t>{0x66, 0x8B, 0xB6, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // stack_fix(int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B8EC6, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_veh(int,int) - MOVSX EDX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B8F1A, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x005B8F6C, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_veh(int,int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x005B8F7A, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_veh(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B8FC0, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_veh(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B8FD6, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_veh(int,int) - AND dword ptr [EAX + 0x95282c],EDX
    build_patch(0x005B8FF0, std::vector<uint8_t>{0x21, 0x90, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005B8FF6, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // stack_veh(int,int) - MOVSX EAX,word ptr [EDI + 0x95282a]
    build_patch(0x005B900D, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_veh(int,int) - MOVSX ECX,word ptr [EDI + 0x952828]
    build_patch(0x005B9014, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_veh(int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005B907A, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_veh(int,int) - MOV BL,byte ptr [EDI + 0x952836]
    build_patch(0x005B9088, std::vector<uint8_t>{0x8A, 0x9F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // stack_veh(int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x005B90B8, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_veh(int,int) - MOV CX,word ptr [EDI + 0x95285a]
    build_patch(0x005B9132, std::vector<uint8_t>{0x66, 0x8B, 0x8F, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // stack_veh(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B9147, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_veh(int,int) - MOVSX EDX,word ptr [ECX*0x4 + 0x952858]
    build_patch(0x005B9188, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x8D, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_veh(int,int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x005B91A1, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005B91B6, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005B91F7, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ECX + 0x95282a]
    build_patch(0x005B9261, std::vector<uint8_t>{0x0F, 0xBF, 0x81, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_veh(int,int) - MOVSX ECX,word ptr [ECX + 0x952828]
    build_patch(0x005B9268, std::vector<uint8_t>{0x0F, 0xBF, 0x89, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_veh(int,int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x005B92AC, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // stack_veh(int,int) - TEST dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005B92C9, std::vector<uint8_t>{0x85, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - TEST dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005B92D1, std::vector<uint8_t>{0x85, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x005B92D9, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // stack_veh(int,int) - CMP word ptr [ESI + 0x95283c],AX
    build_patch(0x005B92E8, std::vector<uint8_t>{0x66, 0x39, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // stack_veh(int,int) - TEST byte ptr [ESI + 0x95282c],0x1
    build_patch(0x005B9301, std::vector<uint8_t>{0xF6, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - MOV word ptr [ESI + 0x95283c],AX
    build_patch(0x005B931E, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // stack_veh(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B9343, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B9356, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005B936E, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_veh(int,int) - MOVSX EDI,word ptr [ESI + 0x952828]
    build_patch(0x005B9378, std::vector<uint8_t>{0x0F, 0xBF, 0xBE, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_veh(int,int) - CMP byte ptr [ESI + 0x952839],0x2
    build_patch(0x005B93B3, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x11);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005B93BC, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_veh(int,int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005B93F5, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // stack_veh(int,int) - MOVSX EDX,word ptr [ESI + 0x952828]
    build_patch(0x005B93FC, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // stack_veh(int,int) - CMP byte ptr [ESI + 0x952839],0x1
    build_patch(0x005B946C, std::vector<uint8_t>{0x80, 0xBE, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // stack_veh(int,int) - MOVSX EDX,word ptr [ESI + 0x95283c]
    build_patch(0x005B9475, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // stack_veh(int,int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005B9487, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_veh(int,int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005B948F, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // stack_kill(int) - MOV AX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005B9521, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_kill(int) - MOV AX,word ptr [EAX*0x4 + 0x95285a]
    build_patch(0x005B9537, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_kill(int) - MOVSX EDI,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005B9557, std::vector<uint8_t>{0x0F, 0xBF, 0x3C, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // stack_check(int,int,int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B959B, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_check(int,int,int,int,int) - MOV AX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005B95B1, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B95ED, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX ECX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005B9602, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x005B9627, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B964A, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B965F, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B9692, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B96A7, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B96E7, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B96FC, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x005B9733, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005B9748, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B9782, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EDX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B9798, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B97C2, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B97D7, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x005B9804, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005B9819, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B987A, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EDX,byte ptr [ECX*0x4 + 0x952839]
    build_patch(0x005B988F, std::vector<uint8_t>{0x0F, 0xBE, 0x14, 0x8D, 0x39, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x11);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B98AC, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B98CF, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOV ECX,dword ptr [EAX*0x4 + 0x95282c]
    build_patch(0x005B98E4, std::vector<uint8_t>{0x8B, 0x0C, 0x85, 0x2C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x4);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EAX*0x4 + 0x952836]
    build_patch(0x005B9909, std::vector<uint8_t>{0x8A, 0x0C, 0x85, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOV AL,byte ptr [EDI + 0x952836]
    build_patch(0x005B9923, std::vector<uint8_t>{0x8A, 0x87, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005B992A, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005B994A, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EDI + 0x952836]
    build_patch(0x005B9951, std::vector<uint8_t>{0x8A, 0x8F, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B998F, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B99A4, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B99E2, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B99F7, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B9A33, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B9A48, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B9A7E, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EDX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B9A95, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV CL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B9AC2, std::vector<uint8_t>{0x8A, 0x0C, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EAX*0x4 + 0x952832]
    build_patch(0x005B9AD7, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x85, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV AL,byte ptr [EDX*0x4 + 0x952836]
    build_patch(0x005B9B07, std::vector<uint8_t>{0x8A, 0x04, 0x95, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005B9B18, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOV DL,byte ptr [ECX*0x4 + 0x952836]
    build_patch(0x005B9B55, std::vector<uint8_t>{0x8A, 0x14, 0x8D, 0x36, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xE);
    // stack_check(int,int,int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005B9B66, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // stack_check(int,int,int,int,int) - MOVSX ESI,word ptr [EAX*0x4 + 0x952858]
    build_patch(0x005B9B97, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // do_unity_crash(int,int,int) - MOV byte ptr [EDX*0x4 + 0x95284c],0x2
    build_patch(0x005BEE0B, std::vector<uint8_t>{0xC6, 0x04, 0x95, 0x4C, 0x28, 0x95, 0x00, 0x02}, 3, new_VEH_addr + 0x24);
    // veh_at(int,int) - MOV ECX,0x952828
    build_patch(0x005BFEE5, std::vector<uint8_t>{0xB9, 0x28, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x0);
    // veh_at(int,int) - MOVSX EDI,word ptr [ECX]
    build_patch(0x005BFEEC, std::vector<uint8_t>{0x0F, 0xBF, 0x39}, -1, new_VEH_addr + 0x0);
    // veh_at(int,int) - MOVSX EDI,word ptr [ECX + 0x2]
    build_patch(0x005BFEF4, std::vector<uint8_t>{0x0F, 0xBF, 0x79, 0x02}, -1, new_VEH_addr + 0x2);
    // veh_at(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005BFF76, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_at(int,int) - MOV CX,word ptr [ECX*0x4 + 0x95285a]
    build_patch(0x005BFF8C, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x8D, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_lift(int) - MOV AX,word ptr [ESI + 0x95285a]
    build_patch(0x005BFFB3, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // veh_lift(int) - MOV DX,word ptr [ESI + 0x952858]
    build_patch(0x005BFFCD, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_lift(int) - MOV word ptr [EAX*0x4 + 0x952858],DX
    build_patch(0x005BFFD4, std::vector<uint8_t>{0x66, 0x89, 0x14, 0x85, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // veh_lift(int) - MOV AX,word ptr [ESI + 0x952858]
    build_patch(0x005BFFDC, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_lift(int) - MOV AX,word ptr [ESI + 0x95285a]
    build_patch(0x005BFFF1, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // veh_lift(int) - MOV word ptr [EDX*0x4 + 0x95285a],AX
    build_patch(0x005BFFF8, std::vector<uint8_t>{0x66, 0x89, 0x04, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_lift(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005C0006, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_lift(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005C000D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_lift(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005C003A, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_lift(int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x005C0041, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_lift(int) - MOV word ptr [ESI + 0x952828],AX
    build_patch(0x005C0051, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_lift(int) - MOV word ptr [ESI + 0x95282a],AX
    build_patch(0x005C0058, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_lift(int) - MOV word ptr [ESI + 0x952858],AX
    build_patch(0x005C005F, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_lift(int) - MOV word ptr [ESI + 0x95285a],AX
    build_patch(0x005C0066, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // veh_drop(int,int,int) - MOV word ptr [ESI + 0x952858],AX
    build_patch(0x005C00A7, std::vector<uint8_t>{0x66, 0x89, 0x86, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_drop(int,int,int) - MOV word ptr [ESI + 0x95285a],DX
    build_patch(0x005C00AE, std::vector<uint8_t>{0x66, 0x89, 0x96, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // veh_drop(int,int,int) - MOV word ptr [ESI + 0x952828],BX
    build_patch(0x005C00B5, std::vector<uint8_t>{0x66, 0x89, 0x9E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_drop(int,int,int) - MOV word ptr [ESI + 0x95282a],DI
    build_patch(0x005C00BC, std::vector<uint8_t>{0x66, 0x89, 0xBE, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_drop(int,int,int) - MOV word ptr [EAX*0x4 + 0x95285a],CX
    build_patch(0x005C00D1, std::vector<uint8_t>{0x66, 0x89, 0x0C, 0x85, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_drop(int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x005C011A, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_drop(int,int,int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x005C0146, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_drop(int,int,int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005C0150, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // sleep(int) - MOV byte ptr [EAX + 0x952839],0x1
    build_patch(0x005C01AF, std::vector<uint8_t>{0xC6, 0x80, 0x39, 0x28, 0x95, 0x00, 0x01}, 2, new_VEH_addr + 0x11);
    // sleep(int) - MOV word ptr [EAX + 0x95283c],0xffff
    build_patch(0x005C01B6, std::vector<uint8_t>{0x66, 0xC7, 0x80, 0x3C, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x14);
    // sleep(int) - MOV word ptr [EAX + 0x952844],0x0
    build_patch(0x005C01BF, std::vector<uint8_t>{0x66, 0xC7, 0x80, 0x44, 0x28, 0x95, 0x00, 0x00, 0x00}, 3, new_VEH_addr + 0x1C);
    // veh_demote(int) - MOV AX,word ptr [EDI + 0x952858]
    build_patch(0x005C01E6, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_demote(int) - MOV AX,word ptr [EDX*0x4 + 0x952858]
    build_patch(0x005C01FB, std::vector<uint8_t>{0x66, 0x8B, 0x04, 0x95, 0x58, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x30);
    // veh_demote(int) - MOV word ptr [EAX + 0x952858],BX
    build_patch(0x005C021E, std::vector<uint8_t>{0x66, 0x89, 0x98, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_demote(int) - MOV word ptr [EDI + 0x95285a],SI
    build_patch(0x005C0225, std::vector<uint8_t>{0x66, 0x89, 0xB7, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // veh_demote(int) - MOV word ptr [EDI + 0x952858],0xffff
    build_patch(0x005C022C, std::vector<uint8_t>{0x66, 0xC7, 0x87, 0x58, 0x28, 0x95, 0x00, 0xFF, 0xFF}, 3, new_VEH_addr + 0x30);
    // veh_demote(int) - MOV CX,word ptr [EAX + 0x952828]
    build_patch(0x005C0235, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_demote(int) - MOV word ptr [EDI + 0x952828],CX
    build_patch(0x005C023C, std::vector<uint8_t>{0x66, 0x89, 0x8F, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_demote(int) - MOV DX,word ptr [EAX + 0x95282a]
    build_patch(0x005C0243, std::vector<uint8_t>{0x66, 0x8B, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_demote(int) - MOV word ptr [EDI + 0x95282a],DX
    build_patch(0x005C024A, std::vector<uint8_t>{0x66, 0x89, 0x97, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_promote(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005C0279, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_promote(int) - MOV CX,word ptr [EDX*0x4 + 0x95285a]
    build_patch(0x005C028F, std::vector<uint8_t>{0x66, 0x8B, 0x0C, 0x95, 0x5A, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x32);
    // veh_promote(int) - MOVSX ECX,word ptr [EAX + 0x95282a]
    build_patch(0x005C02B1, std::vector<uint8_t>{0x0F, 0xBF, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_promote(int) - MOVSX EDX,word ptr [EAX + 0x952828]
    build_patch(0x005C02B8, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x952828],CX
    build_patch(0x005C02F3, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x95282a],CX
    build_patch(0x005C02FA, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952837],CL
    build_patch(0x005C0306, std::vector<uint8_t>{0x88, 0x88, 0x37, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xF);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x952834],CX
    build_patch(0x005C030C, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x34, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xC);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x952830],CX
    build_patch(0x005C0313, std::vector<uint8_t>{0x66, 0x89, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952836],BL
    build_patch(0x005C031A, std::vector<uint8_t>{0x88, 0x98, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x952832],DX
    build_patch(0x005C0320, std::vector<uint8_t>{0x66, 0x89, 0x90, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x952858],DI
    build_patch(0x005C0327, std::vector<uint8_t>{0x66, 0x89, 0xB8, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x95285a],DI
    build_patch(0x005C032E, std::vector<uint8_t>{0x66, 0x89, 0xB8, 0x5A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x32);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x95283a],CL
    build_patch(0x005C0335, std::vector<uint8_t>{0x88, 0x88, 0x3A, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x12);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x95283b],CL
    build_patch(0x005C033B, std::vector<uint8_t>{0x88, 0x88, 0x3B, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x13);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952839],CL
    build_patch(0x005C0341, std::vector<uint8_t>{0x88, 0x88, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_clear(int,int,int) - LEA EDX,[EAX + 0x952844]
    build_patch(0x005C0347, std::vector<uint8_t>{0x8D, 0x90, 0x44, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x1C);
    // veh_clear(int,int,int) - MOV word ptr [EDX + -0x8],DI
    build_patch(0x005C034D, std::vector<uint8_t>{0x66, 0x89, 0x7A, 0xF8}, -1, new_VEH_addr + 0x14);
    // veh_clear(int,int,int) - MOV word ptr [EDX],DI
    build_patch(0x005C0351, std::vector<uint8_t>{0x66, 0x89, 0x3A}, -1, new_VEH_addr + 0x1C);
    // veh_clear(int,int,int) - MOV dword ptr [EAX + 0x95282c],ECX
    build_patch(0x005C035D, std::vector<uint8_t>{0x89, 0x88, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952850],CL
    build_patch(0x005C0363, std::vector<uint8_t>{0x88, 0x88, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952838],CL
    build_patch(0x005C0369, std::vector<uint8_t>{0x88, 0x88, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x95284e],CL
    build_patch(0x005C0372, std::vector<uint8_t>{0x88, 0x88, 0x4E, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x26);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x95284d],CL
    build_patch(0x005C037D, std::vector<uint8_t>{0x88, 0x88, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952852],CL
    build_patch(0x005C0383, std::vector<uint8_t>{0x88, 0x88, 0x52, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2A);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952853],CL
    build_patch(0x005C0389, std::vector<uint8_t>{0x88, 0x88, 0x53, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2B);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x95284f],CL
    build_patch(0x005C0396, std::vector<uint8_t>{0x88, 0x88, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // veh_clear(int,int,int) - MOV word ptr [EAX + 0x952856],DI
    build_patch(0x005C039E, std::vector<uint8_t>{0x66, 0x89, 0xB8, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x95284c],DL
    build_patch(0x005C03A5, std::vector<uint8_t>{0x88, 0x90, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952851],0x2
    build_patch(0x005C03AB, std::vector<uint8_t>{0xC6, 0x80, 0x51, 0x28, 0x95, 0x00, 0x02}, 2, new_VEH_addr + 0x29);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952854],CL
    build_patch(0x005C03B3, std::vector<uint8_t>{0x88, 0x88, 0x54, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2C);
    // veh_clear(int,int,int) - MOV byte ptr [EAX + 0x952855],CL
    build_patch(0x005C03BA, std::vector<uint8_t>{0x88, 0x88, 0x55, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x2D);
    // veh_init(int,int,int,int) - OR byte ptr [ECX*0x4 + 0x952830],0x20
    build_patch(0x005C0491, std::vector<uint8_t>{0x80, 0x0C, 0x8D, 0x30, 0x28, 0x95, 0x00, 0x20}, 3, new_VEH_addr + 0x8);
    // veh_init(int,int,int,int) - MOV word ptr [ECX*0x4 + 0x952856],AX
    build_patch(0x005C04BE, std::vector<uint8_t>{0x66, 0x89, 0x04, 0x8D, 0x56, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0x2E);
    // veh_init(int,int,int,int) - MOVSX EAX,word ptr [EAX + 0x952832]
    build_patch(0x005C0544, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_init(int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005C0711, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_init(int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005C0731, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_init(int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005C0752, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_init(int,int,int,int) - MOV DL,byte ptr [ECX + 0x94a379]
    build_patch(0x005C0771, std::vector<uint8_t>{0x8A, 0x91, 0x79, 0xA3, 0x94, 0x00}, -1, new_VEH_addr + 0xAC1);
    // veh_init(int,int,int,int) - MOVSX EAX,word ptr [EBX + 0x952832]
    build_patch(0x005C0792, std::vector<uint8_t>{0x0F, 0xBF, 0x83, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_init(int,int,int,int) - MOV EDX,dword ptr [EBX + 0x95282c]
    build_patch(0x005C07B6, std::vector<uint8_t>{0x8B, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_init(int,int,int,int) - MOV dword ptr [EBX + 0x95282c],EDX
    build_patch(0x005C07E1, std::vector<uint8_t>{0x89, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_init(int,int,int,int) - MOV EAX,dword ptr [EBX + 0x95282c]
    build_patch(0x005C0864, std::vector<uint8_t>{0x8B, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_init(int,int,int,int) - MOV dword ptr [EBX + 0x95282c],EAX
    build_patch(0x005C0871, std::vector<uint8_t>{0x89, 0x83, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_init(int,int,int,int) - MOV EDX,dword ptr [EBX + 0x95282c]
    build_patch(0x005C0882, std::vector<uint8_t>{0x8B, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_init(int,int,int,int) - MOV dword ptr [EBX + 0x95282c],EDX
    build_patch(0x005C089A, std::vector<uint8_t>{0x89, 0x93, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_kill(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x005C08F3, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_kill(int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x005C08FA, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_kill(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005C090D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_kill(int) - LEA EBX,[ESI + 0x952828]
    build_patch(0x005C0914, std::vector<uint8_t>{0x8D, 0x9E, 0x28, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x0);
    // veh_kill(int) - MOVSX ECX,word ptr [ESI + 0x952856]
    build_patch(0x005C091D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // veh_kill(int) - MOVSX EDX,word ptr [ESI + 0x95282a]
    build_patch(0x005C0924, std::vector<uint8_t>{0x0F, 0xBF, 0x96, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_kill(int) - MOVSX ECX,word ptr [ESI + 0x952832]
    build_patch(0x005C0931, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_kill(int) - MOV AL,byte ptr [ESI + 0x952836]
    build_patch(0x005C093D, std::vector<uint8_t>{0x8A, 0x86, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_kill(int) - LEA EDX,[ESI + 0x95285c]
    build_patch(0x005C09AF, std::vector<uint8_t>{0x8D, 0x96, 0x5C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x34);
    // veh_kill(int) - MOV EAX,0x952858
    build_patch(0x005C09D9, std::vector<uint8_t>{0xB8, 0x58, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x30);
    // veh_kill(int) - MOV DX,word ptr [EAX + 0x2]
    build_patch(0x005C09E0, std::vector<uint8_t>{0x66, 0x8B, 0x50, 0x02}, -1, new_VEH_addr + 0x32);
    // veh_kill(int) - MOV word ptr [EAX + 0x2],DX
    build_patch(0x005C09EC, std::vector<uint8_t>{0x66, 0x89, 0x50, 0x02}, -1, new_VEH_addr + 0x32);
    // veh_kill(int) - MOV DX,word ptr [EAX]
    build_patch(0x005C09F0, std::vector<uint8_t>{0x66, 0x8B, 0x10}, -1, new_VEH_addr + 0x30);
    // veh_kill(int) - MOV word ptr [EAX],DX
    build_patch(0x005C09FB, std::vector<uint8_t>{0x66, 0x89, 0x10}, -1, new_VEH_addr + 0x30);
    // veh_kill(int) - CMP byte ptr [EAX + -0x1f],BL
    build_patch(0x005C09FE, std::vector<uint8_t>{0x38, 0x58, 0xE1}, -1, new_VEH_addr + 0x11);
    // veh_kill(int) - MOV SI,word ptr [EAX + -0x1c]
    build_patch(0x005C0A03, std::vector<uint8_t>{0x66, 0x8B, 0x70, 0xE4}, -1, new_VEH_addr + 0x14);
    // veh_kill(int) - MOV byte ptr [EAX + -0x1f],0x0
    build_patch(0x005C0A0E, std::vector<uint8_t>{0xC6, 0x40, 0xE1, 0x00}, -1, new_VEH_addr + 0x11);
    // veh_kill(int) - MOV word ptr [EAX + -0x1c],SI
    build_patch(0x005C0A17, std::vector<uint8_t>{0x66, 0x89, 0x70, 0xE4}, -1, new_VEH_addr + 0x14);
    // kill(int) - MOVSX EAX,word ptr [ESI + 0x952832]
    build_patch(0x005C0B19, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // kill(int) - MOVSX EBX,word ptr [ESI + 0x952828]
    build_patch(0x005C0B20, std::vector<uint8_t>{0x0F, 0xBF, 0x9E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // kill(int) - MOVSX ECX,word ptr [ESI + 0x95282a]
    build_patch(0x005C0B27, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // kill(int) - MOV DL,byte ptr [ESI + 0x952836]
    build_patch(0x005C0B2E, std::vector<uint8_t>{0x8A, 0x96, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // kill(int) - MOV DX,word ptr [ESI + 0x952832]
    build_patch(0x005C0B43, std::vector<uint8_t>{0x66, 0x8B, 0x96, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // kill(int) - MOVSX ECX,word ptr [ESI + 0x952856]
    build_patch(0x005C0B4D, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // kill(int) - MOV CL,byte ptr [ESI + 0x95284c]
    build_patch(0x005C0B96, std::vector<uint8_t>{0x8A, 0x8E, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // veh_find(int,int,int,int) - MOV EBX,0x95282a
    build_patch(0x005C0CE0, std::vector<uint8_t>{0xBB, 0x2A, 0x28, 0x95, 0x00}, 1, new_VEH_addr + 0x2);
    // veh_find(int,int,int,int) - MOV CL,byte ptr [EBX + 0xc]
    build_patch(0x005C0CEE, std::vector<uint8_t>{0x8A, 0x4B, 0x0C}, -1, new_VEH_addr + 0xE);
    // veh_find(int,int,int,int) - MOVSX EAX,word ptr [EBX + -0x2]
    build_patch(0x005C0CFE, std::vector<uint8_t>{0x0F, 0xBF, 0x43, 0xFE}, -1, new_VEH_addr + 0x0);
    // veh_find(int,int,int,int) - MOVSX EDI,word ptr [EBX]
    build_patch(0x005C0D05, std::vector<uint8_t>{0x0F, 0xBF, 0x3B}, -1, new_VEH_addr + 0x2);
    // morale_veh(int,int,int) - MOV CL,byte ptr [EDX + 0x952836]
    build_patch(0x005C0E5C, std::vector<uint8_t>{0x8A, 0x8A, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // morale_veh(int,int,int) - MOV CX,word ptr [EDX + 0x952832]
    build_patch(0x005C0E7C, std::vector<uint8_t>{0x66, 0x8B, 0x8A, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // morale_veh(int,int,int) - MOV AL,byte ptr [EDX + 0x95284c]
    build_patch(0x005C0F2E, std::vector<uint8_t>{0x8A, 0x82, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // morale_veh(int,int,int) - MOV AL,byte ptr [EDX + 0x95284c]
    build_patch(0x005C0F7C, std::vector<uint8_t>{0x8A, 0x82, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // morale_veh(int,int,int) - MOVSX ESI,word ptr [EDX + 0x952856]
    build_patch(0x005C0FF4, std::vector<uint8_t>{0x0F, 0xBF, 0xB2, 0x56, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2E);
    // morale_veh(int,int,int) - MOV CX,word ptr [EDX + 0x952832]
    build_patch(0x005C107D, std::vector<uint8_t>{0x66, 0x8B, 0x8A, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // morale_veh(int,int,int) - MOV CL,byte ptr [EDX + 0x95284c]
    build_patch(0x005C1116, std::vector<uint8_t>{0x8A, 0x8A, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // offense_proto(int,int,int) - MOVSX EDX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005C1185, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // offense_proto(int,int,int) - MOVSX EDX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005C11C6, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // offense_proto(int,int,int) - CMP word ptr [EDX*0x4 + 0x952832],0xf
    build_patch(0x005C11F0, std::vector<uint8_t>{0x66, 0x83, 0x3C, 0x95, 0x32, 0x28, 0x95, 0x00, 0x0F}, 4, new_VEH_addr + 0xA);
    // offense_proto(int,int,int) - MOVSX EAX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005C125C, std::vector<uint8_t>{0x0F, 0xBF, 0x04, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // armor_proto(int,int,int) - MOVSX ESI,word ptr [ESI*0x4 + 0x952832]
    build_patch(0x005C12C4, std::vector<uint8_t>{0x0F, 0xBF, 0x34, 0xB5, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // armor_proto(int,int,int) - CMP word ptr [ESI*0x4 + 0x952832],0xf
    build_patch(0x005C12F2, std::vector<uint8_t>{0x66, 0x83, 0x3C, 0xB5, 0x32, 0x28, 0x95, 0x00, 0x0F}, 4, new_VEH_addr + 0xA);
    // armor_proto(int,int,int) - MOVSX EDX,word ptr [EDX*0x4 + 0x952832]
    build_patch(0x005C1323, std::vector<uint8_t>{0x0F, 0xBF, 0x14, 0x95, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // speed(int,int) - MOVSX ECX,word ptr [EDI + 0x952832]
    build_patch(0x005C1552, std::vector<uint8_t>{0x0F, 0xBF, 0x8F, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // speed(int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005C1563, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // speed(int,int) - MOV DL,byte ptr [EDI + 0x952836]
    build_patch(0x005C15A0, std::vector<uint8_t>{0x8A, 0x97, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // speed(int,int) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x005C15DF, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // speed(int,int) - MOV AL,byte ptr [EDI + 0x952838]
    build_patch(0x005C1614, std::vector<uint8_t>{0x8A, 0x87, 0x38, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x10);
    // speed(int,int) - MOVSX EAX,word ptr [EDI + 0x952832]
    build_patch(0x005C1625, std::vector<uint8_t>{0x0F, 0xBF, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // speed(int,int) - MOV AX,word ptr [EDI + 0x952832]
    build_patch(0x005C173B, std::vector<uint8_t>{0x66, 0x8B, 0x87, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_cargo(int) - MOV SI,word ptr [EDX + 0x952832]
    build_patch(0x005C1770, std::vector<uint8_t>{0x66, 0x8B, 0xB2, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_cargo(int) - MOV AL,byte ptr [EDX + 0x95284c]
    build_patch(0x005C17B3, std::vector<uint8_t>{0x8A, 0x82, 0x4C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x24);
    // veh_selectable(int) - MOVSX EDX,word ptr [EAX + 0x95282a]
    build_patch(0x005C1A39, std::vector<uint8_t>{0x0F, 0xBF, 0x90, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_selectable(int) - MOVSX ESI,word ptr [EAX + 0x952828]
    build_patch(0x005C1A40, std::vector<uint8_t>{0x0F, 0xBF, 0xB0, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_selectable(int) - MOV DL,byte ptr [EAX + 0x952836]
    build_patch(0x005C1A70, std::vector<uint8_t>{0x8A, 0x90, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_selectable(int) - MOV AX,word ptr [EAX + 0x952830]
    build_patch(0x005C1A7F, std::vector<uint8_t>{0x66, 0x8B, 0x80, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // veh_unmoved(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005C1AC5, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_unmoved(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005C1ACC, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_unmoved(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x005C1AF2, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_unmoved(int) - MOV AX,word ptr [ESI + 0x952830]
    build_patch(0x005C1AFC, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // veh_unmoved(int) - TEST dword ptr [ESI + 0x95282c],0x4000000
    build_patch(0x005C1B24, std::vector<uint8_t>{0xF7, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x04}, 2, new_VEH_addr + 0x4);
    // veh_unmoved(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005C1B30, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_unmoved(int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x005C1B4B, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_ready(int) - MOVSX EAX,word ptr [ESI + 0x95282a]
    build_patch(0x005C1B85, std::vector<uint8_t>{0x0F, 0xBF, 0x86, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_ready(int) - MOVSX ECX,word ptr [ESI + 0x952828]
    build_patch(0x005C1B8C, std::vector<uint8_t>{0x0F, 0xBF, 0x8E, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_ready(int) - MOV CL,byte ptr [ESI + 0x952836]
    build_patch(0x005C1BB2, std::vector<uint8_t>{0x8A, 0x8E, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // veh_ready(int) - MOV AX,word ptr [ESI + 0x952830]
    build_patch(0x005C1BBC, std::vector<uint8_t>{0x66, 0x8B, 0x86, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // veh_ready(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005C1BE4, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_ready(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005C1BEF, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_ready(int) - MOV DL,byte ptr [ESI + 0x952850]
    build_patch(0x005C1C14, std::vector<uint8_t>{0x8A, 0x96, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_jail(int) - MOVSX EAX,word ptr [EDX + 0x952832]
    build_patch(0x005C1C4F, std::vector<uint8_t>{0x0F, 0xBF, 0x82, 0x32, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0xA);
    // veh_jail(int) - MOV CL,byte ptr [EDX + 0x952839]
    build_patch(0x005C1C7B, std::vector<uint8_t>{0x8A, 0x8A, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_jail(int) - MOVSX ECX,word ptr [EDX + 0x95283c]
    build_patch(0x005C1C8E, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x3C, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x14);
    // veh_jail(int) - MOVSX ECX,word ptr [ECX*0x4 + 0x952832]
    build_patch(0x005C1CA3, std::vector<uint8_t>{0x0F, 0xBF, 0x0C, 0x8D, 0x32, 0x28, 0x95, 0x00}, 4, new_VEH_addr + 0xA);
    // veh_jail(int) - MOVSX ECX,word ptr [EDX + 0x95282a]
    build_patch(0x005C1CCD, std::vector<uint8_t>{0x0F, 0xBF, 0x8A, 0x2A, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x2);
    // veh_jail(int) - MOVSX EDX,word ptr [EDX + 0x952828]
    build_patch(0x005C1CDB, std::vector<uint8_t>{0x0F, 0xBF, 0x92, 0x28, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x0);
    // veh_skip(int) - MOV byte ptr [EDX*0x4 + 0x952850],AL
    build_patch(0x005C1D39, std::vector<uint8_t>{0x88, 0x04, 0x95, 0x50, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x28);
    // veh_wake(int) - MOV AL,byte ptr [ESI + 0x952839]
    build_patch(0x005C1D82, std::vector<uint8_t>{0x8A, 0x86, 0x39, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_wake(int) - TEST dword ptr [ESI + 0x95282c],0x4000000
    build_patch(0x005C1D90, std::vector<uint8_t>{0xF7, 0x86, 0x2C, 0x28, 0x95, 0x00, 0x00, 0x00, 0x00, 0x04}, 2, new_VEH_addr + 0x4);
    // veh_wake(int) - MOV byte ptr [ESI + 0x952850],AL
    build_patch(0x005C1DB1, std::vector<uint8_t>{0x88, 0x86, 0x50, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_wake(int) - MOV BL,byte ptr [ESI + 0x95284d]
    build_patch(0x005C1DB7, std::vector<uint8_t>{0x8A, 0x9E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // veh_wake(int) - MOVSX ECX,byte ptr [ESI + 0x952839]
    build_patch(0x005C1DC1, std::vector<uint8_t>{0x0F, 0xBE, 0x8E, 0x39, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x11);
    // veh_wake(int) - MOV byte ptr [ESI + 0x95284d],BL
    build_patch(0x005C1DDB, std::vector<uint8_t>{0x88, 0x9E, 0x4D, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x25);
    // veh_wake(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005C1DE1, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_wake(int) - CMP byte ptr [ESI + 0x95284e],0xb
    build_patch(0x005C1DEC, std::vector<uint8_t>{0x80, 0xBE, 0x4E, 0x28, 0x95, 0x00, 0x0B}, 2, new_VEH_addr + 0x26);
    // veh_wake(int) - MOV byte ptr [ESI + 0x952850],0x0
    build_patch(0x005C1DF9, std::vector<uint8_t>{0xC6, 0x86, 0x50, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x28);
    // veh_wake(int) - MOV byte ptr [ESI + 0x952839],0x0
    build_patch(0x005C1E00, std::vector<uint8_t>{0xC6, 0x86, 0x39, 0x28, 0x95, 0x00, 0x00}, 2, new_VEH_addr + 0x11);
    // veh_wake(int) - MOV EAX,dword ptr [ESI + 0x95282c]
    build_patch(0x005C1E07, std::vector<uint8_t>{0x8B, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // veh_wake(int) - MOV dword ptr [ESI + 0x95282c],EAX
    build_patch(0x005C1E12, std::vector<uint8_t>{0x89, 0x86, 0x2C, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x4);
    // zoc_sea(int,int,int) - MOV CL,byte ptr [EAX + 0x952836]
    build_patch(0x005C8CCF, std::vector<uint8_t>{0x8A, 0x88, 0x36, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0xE);
    // zoc_sea(int,int,int) - TEST byte ptr [EAX + 0x95284f],DL
    build_patch(0x005C8CE2, std::vector<uint8_t>{0x84, 0x90, 0x4F, 0x28, 0x95, 0x00}, 2, new_VEH_addr + 0x27);
    // zoc_sea(int,int,int) - MOV CX,word ptr [EAX + 0x952830]
    build_patch(0x005C8CEE, std::vector<uint8_t>{0x66, 0x8B, 0x88, 0x30, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x8);
    // zoc_sea(int,int,int) - MOVSX EAX,word ptr [EAX + 0x952858]
    build_patch(0x005C8D00, std::vector<uint8_t>{0x0F, 0xBF, 0x80, 0x58, 0x28, 0x95, 0x00}, 3, new_VEH_addr + 0x30);
}