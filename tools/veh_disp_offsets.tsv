address	function	mnemonic	instruction	old_bytes	disp_offset	veh_offset	disp_value
0040b181	garrison_click(int,int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
0040b202	garrison_click(int,int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952839]	8A 91 39 28 95 00	2	0x11	0x952839
0040b210	garrison_click(int,int,int,int)	TEST	TEST dword ptr [ECX + 0x95282c],0x8004200	F7 81 2C 28 95 00 00 42 00 08	2	0x4	0x95282C
0040b2bd	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0040b2c4	garrison_click(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0040b3f2	garrison_click(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0040b3f9	garrison_click(int,int,int,int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
0040b405	garrison_click(int,int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
0040b4bf	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0040b4c6	garrison_click(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0040b5d4	garrison_click(int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
0040b5fb	garrison_click(int,int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
0040b605	garrison_click(int,int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0040b62e	garrison_click(int,int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x95283b]	8A 88 3B 28 95 00	2	0x13	0x95283B
0040b634	garrison_click(int,int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
0040b739	garrison_click(int,int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x952856]	66 8B 0C 8D 56 28 95 00	4	0x2E	0x952856
0040b784	garrison_click(int,int,int,int)	CMP	CMP CL,byte ptr [EAX*0x4 + 0x952836]	3A 0C 85 36 28 95 00	3	0xE	0x952836
0040b7e9	garrison_click(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952856]	0F BF 91 56 28 95 00	3	0x2E	0x952856
0040b7fe	garrison_click(int,int,int,int)	MOV	MOV SI,word ptr [ECX + 0x952828]	66 8B B1 28 28 95 00	3	0x0	0x952828
0040b80d	garrison_click(int,int,int,int)	MOV	MOV DX,word ptr [ECX + 0x95282a]	66 8B 91 2A 28 95 00	3	0x2	0x95282A
0040b81e	garrison_click(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
0040b85e	garrison_click(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0040b963	garrison_click(int,int,int,int)	MOV	MOV BL,byte ptr [EDX + 0x952836]	8A 9A 36 28 95 00	2	0xE	0x952836
0040ba2e	garrison_click(int,int,int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x952839],0x0	C6 04 8D 39 28 95 00 00	3	0x11	0x952839
0040ba61	garrison_click(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0040ba68	garrison_click(int,int,int,int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
0040ba74	garrison_click(int,int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
0040bb31	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0040bb38	garrison_click(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0040bc66	garrison_click(int,int,int,int)	MOV	MOV word ptr [EDX + 0x952856],CX	66 89 8A 56 28 95 00	3	0x2E	0x952856
0040bc87	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952856]	0F BF 0C 85 56 28 95 00	4	0x2E	0x952856
0040bcfc	garrison_click(int,int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x2	C6 04 95 39 28 95 00 02	3	0x11	0x952839
0040bd80	garrison_click(int,int,int,int)	MOV	MOV ESI,dword ptr [EAX + 0x95282c]	8B B0 2C 28 95 00	2	0x4	0x95282C
0040bd8c	garrison_click(int,int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ESI	89 B0 2C 28 95 00	2	0x4	0x95282C
0040bd92	garrison_click(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
0040bd99	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952856]	0F BF 88 56 28 95 00	3	0x2E	0x952856
0040bdb1	garrison_click(int,int,int,int)	MOV	MOV word ptr [EAX + 0x95283c],CX	66 89 88 3C 28 95 00	3	0x14	0x95283C
0040bdb8	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952856]	0F BF 88 56 28 95 00	3	0x2E	0x952856
0040bdd0	garrison_click(int,int,int,int)	MOV	MOV word ptr [EAX + 0x952844],CX	66 89 88 44 28 95 00	3	0x1C	0x952844
0040be12	garrison_click(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0040be19	garrison_click(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0040be3e	garrison_click(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0040be45	garrison_click(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0040cb3b	draw_supported(int)	MOV	MOV EAX,0x952856	B8 56 28 95 00	1	0x2E	0x952856
0040ccd8	draw_supported(int)	MOV	MOV dword ptr [EBP + -0x10],0x95282c	C7 45 F0 2C 28 95 00	3	0x4	0x95282C
0040d5a9	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040d6d5	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040d6f1	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040d796	draw_flash(int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
0040d7a3	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040d7ba	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040d806	draw_flash(int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
0040d86e	draw_flash(int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
0040d885	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952856]	0F BF 86 56 28 95 00	3	0x2E	0x952856
0040d8ef	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0040d912	draw_flash(int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
0040d9cf	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
0040dab7	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040db63	draw_flash(int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
0040db89	draw_flash(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0040dbbc	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x95284d]	8A 8E 4D 28 95 00	2	0x25	0x95284D
0040dbd0	draw_flash(int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
0040dc0d	draw_flash(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0040dc75	draw_flash(int)	MOV	MOV AL,byte ptr [ESI + 0x95284d]	8A 86 4D 28 95 00	2	0x25	0x95284D
0040dc7f	draw_flash(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0040dcbe	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040dcf0	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
0040de98	draw_flash(int)	MOV	MOV AL,byte ptr [ESI + 0x952838]	8A 86 38 28 95 00	2	0x10	0x952838
0040df2c	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040df7a	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
0040df9e	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040dff1	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
0040e015	draw_flash(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0040e092	draw_flash(int)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
0040e191	draw_flash(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0040e1f6	draw_flash(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
0040e72c	draw_production(int)	MOV	MOV byte ptr [EAX*0x4 + 0x95284c],CL	88 0C 85 4C 28 95 00	3	0x24	0x95284C
00410528	draw_garrison(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
0041053e	draw_garrison(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
00410556	draw_garrison(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
00410603	draw_garrison(int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
00410619	draw_garrison(int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
004106a5	draw_garrison(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004107e9	draw_garrison(int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952858]	0F BF B0 58 28 95 00	3	0x30	0x952858
00417d42	production(int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
00417d4c	production(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
00417d69	production(int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
00417d70	production(int,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
00417d7b	production(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],ECX	89 8E 2C 28 95 00	2	0x4	0x95282C
00417d90	production(int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952858]	0F BF BE 58 28 95 00	3	0x30	0x952858
0041a8d5	check_veh(int)	MOV	MOV DI,word ptr [ECX + 0x952828]	66 8B B9 28 28 95 00	3	0x0	0x952828
0041a8e8	check_veh(int)	MOV	MOV DI,word ptr [ECX + 0x95282a]	66 8B B9 2A 28 95 00	3	0x2	0x95282A
0041a8f8	check_veh(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952856]	0F BF 89 56 28 95 00	3	0x2E	0x952856
0041d9f7	on_button_clicked(int)	MOV	MOV AX,word ptr [EAX + 0x952858]	66 8B 80 58 28 95 00	3	0x30	0x952858
0041da0b	on_button_clicked(int)	MOV	MOV AX,word ptr [EAX + 0x952858]	66 8B 80 58 28 95 00	3	0x30	0x952858
00421d2a	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00421d53	battle_report(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
00421d9e	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00421dc5	battle_report(int,int,int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00421ddf	battle_report(int,int,int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00421e02	battle_report(int,int,int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00421e96	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00421fc9	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0042218d	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004221d0	battle_report(int,int,int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
00422227	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00422252	battle_report(int,int,int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004222e7	battle_report(int,int,int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
00422339	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00422358	battle_report(int,int,int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004223a1	battle_report(int,int,int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
00422513	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0042258a	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004225af	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004225d0	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00422644	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00422678	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004226c9	battle_report(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004226fe	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0042274e	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00422aba	battle_report(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00422b01	battle_report(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
0042ca86	draw_unit(void)	MOV	MOV byte ptr [ECX*0x4 + 0x95284c],0x4	C6 04 8D 4C 28 95 00 04	3	0x24	0x95284C
00433554	draw_reactor(int,RECT_*,int)	CMP	CMP EAX,0x952830	3D 30 28 95 00	1	0x8	0x952830
00434204	exec(int,int,int,int,int,int,int,int,int,int,uchar_*)	CMP	CMP EAX,0x952830	3D 30 28 95 00	1	0x8	0x952830
0043aa51	select_reactor(void)	CMP	CMP EAX,0x952830	3D 30 28 95 00	1	0x8	0x952830
0043aaca	select_reactor(void)	CMP	CMP ECX,0x952830	81 F9 30 28 95 00	2	0x8	0x952830
0043dbf9	draw_stack(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0043e092	draw_flash(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0043e19a	draw_flash(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
0043e1c1	draw_flash(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00446d66	ambience_veh(int)	MOV	MOV AL,byte ptr [ECX + 0x952839]	8A 81 39 28 95 00	2	0x11	0x952839
00446d74	ambience_veh(int)	MOV	MOV DI,word ptr [ECX + 0x952832]	66 8B B9 32 28 95 00	3	0xA	0x952832
00446d94	ambience_veh(int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00446e02	ambience_veh(int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
0044bad6	help_tech_info(void_(*)(char_*),int,int,int)	CMP	CMP ESI,0x952828	81 FE 28 28 95 00	2	0x0	0x952828
0045d1d4	on_iface_button_clicked(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x952858]	66 8B 0C 8D 58 28 95 00	4	0x30	0x952858
0045d1ea	on_iface_button_clicked(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x952858]	66 8B 0C 8D 58 28 95 00	4	0x30	0x952858
004611fb	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00461224	check(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
0046122b	check(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
00461275	check(int)	MOV	MOV CX,word ptr [EDI + 0x952832]	66 8B 8F 32 28 95 00	3	0xA	0x952832
004612c5	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00461319	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
00461320	check(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
0046139a	check(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
004613d1	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00461447	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00461472	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004614ba	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004614fc	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
0046150a	check(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
004615b4	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004615d9	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
004615e7	check(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
00461617	check(int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
0046167d	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004616d1	check(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004616f1	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0046171d	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
0046172b	check(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
004618ce	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00461900	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
0046190e	check(int)	MOVSX	MOVSX EBX,word ptr [ECX + 0x952828]	0F BF 99 28 28 95 00	3	0x0	0x952828
00461941	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
0046194f	check(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
00461a17	check(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00461a61	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
00461a6f	check(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
00461bd0	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
00461bde	check(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
00461c29	check(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
00461c37	check(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
00461dcf	check(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
00461ddd	check(int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
004637df	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
004637f1	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
0046396c	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
00463982	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004639a3	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004639ad	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004639c3	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004639fd	gen_terrain_poly(Buffer_*,MapWin_*,int,int,int,int,int,int,int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952858]	0F BF BE 58 28 95 00	3	0x30	0x952858
00467076	draw_vehicles(int,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952856]	0F BF 90 56 28 95 00	3	0x2E	0x952856
00467081	draw_vehicles(int,int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952858]	0F BF B0 58 28 95 00	3	0x30	0x952858
004670b3	draw_vehicles(int,int,int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004670bd	draw_vehicles(int,int,int,int,int)	MOV	MOV DX,word ptr [EAX + 0x952830]	66 8B 90 30 28 95 00	3	0x8	0x952830
004670da	draw_vehicles(int,int,int,int,int)	TEST	TEST byte ptr [EAX + 0x95284f],DL	84 90 4F 28 95 00	2	0x27	0x95284F
0046713c	draw_vehicles(int,int,int,int,int)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00467ba4	draw_base_dest(int)	MOV	MOV ESI,0x95282c	BE 2C 28 95 00	1	0x4	0x95282C
00467ca1	draw_base_dest(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952844]	0F BF 81 44 28 95 00	3	0x1C	0x952844
00467ca8	draw_base_dest(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x95283c]	0F BF 89 3C 28 95 00	3	0x14	0x95283C
00467cb1	draw_base_dest(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952844]	0F BF 82 44 28 95 00	3	0x1C	0x952844
00467cb8	draw_base_dest(int)	MOVSX	MOVSX ECX,word ptr [EDX + 0x95283c]	0F BF 8A 3C 28 95 00	3	0x14	0x95283C
0046dddd	click(int,int,int)	MOV	MOV word ptr [ECX + 0x952828],DX	66 89 91 28 28 95 00	3	0x0	0x952828
0046dde4	click(int,int,int)	MOV	MOV word ptr [ECX + 0x95282a],SI	66 89 B1 2A 28 95 00	3	0x2	0x95282A
0046ddeb	click(int,int,int)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
0046ddf2	click(int,int,int)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
0046ddf9	click(int,int,int)	MOV	MOV word ptr [ECX + 0x952844],SI	66 89 B1 44 28 95 00	3	0x1C	0x952844
0046de00	click(int,int,int)	MOV	MOV dword ptr [ECX + 0x95282c],0x0	C7 81 2C 28 95 00 00 00 00 00	2	0x4	0x95282C
0046dff3	click(int,int,int)	MOV	MOV word ptr [EDX*0x2 + 0x95283c],BX	66 89 1C 55 3C 28 95 00	4	0x14	0x95283C
0046e009	click(int,int,int)	MOV	MOV word ptr [EDX*0x2 + 0x952844],CX	66 89 0C 55 44 28 95 00	4	0x1C	0x952844
0046e907	click(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
0046f18c	on_mouse_move(int,int)	MOV	MOV word ptr [ECX*0x2 + 0x95283c],DX	66 89 14 4D 3C 28 95 00	4	0x14	0x95283C
0046f1a2	on_mouse_move(int,int)	MOV	MOV word ptr [EDX*0x2 + 0x952844],CX	66 89 0C 55 44 28 95 00	4	0x1C	0x952844
00485df1	draw_tech(int,RECT_*,int)	CMP	CMP EDI,0x952828	81 FF 28 28 95 00	2	0x0	0x952828
00486d72	pick(int,int,int,char_*)	CMP	CMP EDI,0x952828	81 FF 28 28 95 00	2	0x0	0x952828
0048cf78	veh_sprite_click(int)	MOV	MOV DL,byte ptr [EAX + 0x952839]	8A 90 39 28 95 00	2	0x11	0x952839
0048cf82	veh_sprite_click(int)	TEST	TEST dword ptr [EAX + 0x95282c],0x8004200	F7 80 2C 28 95 00 00 42 00 08	2	0x4	0x95282C
0048d038	veh_sprite_double_click(int)	MOV	MOV DL,byte ptr [EAX + 0x952839]	8A 90 39 28 95 00	2	0x11	0x952839
0048d042	veh_sprite_double_click(int)	TEST	TEST dword ptr [EAX + 0x95282c],0x8004200	F7 80 2C 28 95 00 00 42 00 08	2	0x4	0x95282C
0048d181	veh_pick(int,char_*,int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
0048d197	veh_pick(int,char_*,int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
0048d1d1	veh_pick(int,char_*,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0048d21f	veh_pick(int,char_*,int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x952858]	0F BF B7 58 28 95 00	3	0x30	0x952858
0049a48d	draw_labs(void)	CMP	CMP EDI,0x952828	81 FF 28 28 95 00	2	0x0	0x952828
0049ea1e	draw_ops(void)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
0049ea32	draw_ops(void)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
0049eaab	draw_ops(void)	MOVSX	MOVSX EDI,word ptr [EDI + 0x952858]	0F BF BF 58 28 95 00	3	0x30	0x952858
004a6174	on_iface_selected(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
004a618a	on_iface_selected(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
004a61a6	on_iface_selected(int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
004a68ae	on_iface_button_clicked(int)	MOV	MOV ESI,0x95282c	BE 2C 28 95 00	1	0x4	0x95282C
004a6a00	on_iface_button_clicked(int)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
004a9873	draw_ops(void)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
004a9889	draw_ops(void)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
004a98a4	draw_ops(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
004b3ffb	say_morale(char_*,int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
004b4003	say_morale(char_*,int,int)	MOV	MOV AX,word ptr [EBX + 0x952832]	66 8B 83 32 28 95 00	3	0xA	0x952832
004b4069	say_morale(char_*,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004b4087	say_morale(char_*,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952856]	0F BF 83 56 28 95 00	3	0x2E	0x952856
004b40de	say_morale(char_*,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
004b40e5	say_morale(char_*,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
004b41d5	say_morale(char_*,int,int)	MOV	MOV CX,word ptr [EBX + 0x952832]	66 8B 8B 32 28 95 00	3	0xA	0x952832
004b4268	say_morale(char_*,int,int)	MOV	MOV CX,word ptr [EBX + 0x952832]	66 8B 8B 32 28 95 00	3	0xA	0x952832
004b4398	say_morale(char_*,int,int)	MOV	MOV AL,byte ptr [EBX + 0x95282c]	8A 83 2C 28 95 00	2	0x4	0x95282C
004b43fb	say_orders(char_*,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
004b442a	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x95283b]	8A 86 3B 28 95 00	2	0x13	0x95283B
004b4430	say_orders(char_*,int)	MOV	MOV CL,byte ptr [ESI + 0x95283a]	8A 8E 3A 28 95 00	2	0x12	0x95283A
004b4449	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x95284e]	8A 86 4E 28 95 00	2	0x26	0x95284E
004b447f	say_orders(char_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952846]	0F BF 86 46 28 95 00	3	0x1E	0x952846
004b4486	say_orders(char_*,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95283e]	0F BF 8E 3E 28 95 00	3	0x16	0x95283E
004b44ef	say_orders(char_*,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004b4557	say_orders(char_*,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
004b45c1	say_orders(char_*,int)	MOV	MOV DL,byte ptr [ESI + 0x95283a]	8A 96 3A 28 95 00	2	0x12	0x95283A
004b45d7	say_orders(char_*,int)	LEA	LEA EBX,[ESI + 0x95283c]	8D 9E 3C 28 95 00	2	0x14	0x95283C
004b45f7	say_orders(char_*,int)	MOV	MOV DL,byte ptr [ESI + 0x95283a]	8A 96 3A 28 95 00	2	0x12	0x95283A
004b4642	say_orders(char_*,int)	MOV	MOV CL,byte ptr [ESI + 0x95283a]	8A 8E 3A 28 95 00	2	0x12	0x95283A
004b465b	say_orders(char_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004b4669	say_orders(char_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004b4691	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
004b46b6	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
004b46d7	say_orders(char_*,int)	MOV	MOV CL,byte ptr [ESI + 0x95284e]	8A 8E 4E 28 95 00	2	0x26	0x95284E
004b46f6	say_orders(char_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
004b46fd	say_orders(char_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
004b4749	say_orders(char_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952856]	0F BF 96 56 28 95 00	3	0x2E	0x952856
004b4767	say_orders(char_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004b476e	say_orders(char_*,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
004b4775	say_orders(char_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952856]	0F BF 96 56 28 95 00	3	0x2E	0x952856
004b4782	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004b4788	say_orders(char_*,int)	MOV	MOV CL,byte ptr [ESI + 0x95284e]	8A 8E 4E 28 95 00	2	0x26	0x95284E
004b47ec	say_orders(char_*,int)	MOV	MOV DL,byte ptr [ESI + 0x952839]	8A 96 39 28 95 00	2	0x11	0x952839
004b4809	say_orders(char_*,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
004b481e	say_orders(char_*,int)	MOV	MOV CL,byte ptr [ESI + 0x95283b]	8A 8E 3B 28 95 00	2	0x13	0x95283B
004b4824	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x95283a]	8A 86 3A 28 95 00	2	0x12	0x95283A
004b4838	say_orders(char_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952844]	0F BF 96 44 28 95 00	3	0x1C	0x952844
004b4842	say_orders(char_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95283c]	0F BF 86 3C 28 95 00	3	0x14	0x95283C
004b4853	say_orders(char_*,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
004b486e	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x95283a]	8A 86 3A 28 95 00	2	0x12	0x95283A
004b4874	say_orders(char_*,int)	MOV	MOV CL,byte ptr [ESI + 0x95283b]	8A 8E 3B 28 95 00	2	0x13	0x95283B
004b4889	say_orders(char_*,int)	LEA	LEA EBX,[ESI + 0x95283e]	8D 9E 3E 28 95 00	2	0x16	0x95283E
004b48e0	say_orders(char_*,int)	MOV	MOV DL,byte ptr [ESI + 0x95283a]	8A 96 3A 28 95 00	2	0x12	0x95283A
004b48f4	say_orders(char_*,int)	CMP	CMP byte ptr [ESI + 0x952839],0x19	80 BE 39 28 95 00 19	2	0x11	0x952839
004b4908	say_orders(char_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95283c]	0F BF 86 3C 28 95 00	3	0x14	0x95283C
004b492e	say_orders(char_*,int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
004b4947	say_orders(char_*,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952844]	0F BF 8E 44 28 95 00	3	0x1C	0x952844
004b494e	say_orders(char_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95283c]	0F BF 96 3C 28 95 00	3	0x14	0x95283C
004b4c1c	draw_my_dest(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004b4c33	draw_my_dest(int)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
004b4c4c	draw_my_dest(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b4c7c	draw_my_dest(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004b4c83	draw_my_dest(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952844]	0F BF 96 44 28 95 00	3	0x1C	0x952844
004b4c8c	draw_my_dest(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95283c]	0F BF 86 3C 28 95 00	3	0x14	0x95283C
004b4c93	draw_my_dest(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
004b4c9c	draw_my_dest(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004b4ec2	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b4f88	draw_active(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004b4fed	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004b5075	draw_active(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004b5087	draw_active(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x95282c]	8A 86 2C 28 95 00	2	0x4	0x95282C
004b50ad	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b5152	draw_active(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004b515f	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b5176	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b51cb	draw_active(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004b5233	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
004b524a	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952856]	0F BF 86 56 28 95 00	3	0x2E	0x952856
004b52b4	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004b52d7	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
004b5394	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
004b5468	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b5514	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
004b553a	draw_active(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004b556d	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x95284d]	8A 8E 4D 28 95 00	2	0x25	0x95284D
004b557e	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
004b55b8	draw_active(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004b561a	draw_active(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x95284d]	8A 86 4D 28 95 00	2	0x25	0x95284D
004b5624	draw_active(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004b5663	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b5695	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
004b5836	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
004b58ca	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b5918	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
004b593c	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b598f	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
004b59b3	draw_active(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004b5a2e	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
004b5a3e	draw_active(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004b5b1e	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
004b5b4f	draw_active(int,int,int)	TEST	TEST byte ptr [ESI + 0x95282c],0x80	F6 86 2C 28 95 00 80	2	0x4	0x95282C
004b5be4	draw_active(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004b5c4e	draw_active(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
004b5d69	draw_active(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
004b5d7c	draw_active(int,int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
004b66e3	draw_status(int,int,int,int,int)	MOV	MOV CX,word ptr [EDX + 0x95285a]	66 8B 8A 5A 28 95 00	3	0x32	0x95285A
004b66f8	draw_status(int,int,int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004b6715	draw_status(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDX + 0x952836]	8A 8A 36 28 95 00	2	0xE	0x952836
004b68e1	draw_status(int,int,int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004b68eb	draw_status(int,int,int,int,int)	MOV	MOV DX,word ptr [EAX + 0x952830]	66 8B 90 30 28 95 00	3	0x8	0x952830
004b6908	draw_status(int,int,int,int,int)	TEST	TEST byte ptr [EAX + 0x95284f],DL	84 90 4F 28 95 00	2	0x27	0x95284F
004b6933	draw_status(int,int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EDX + 0x952828]	0F BF B2 28 28 95 00	3	0x0	0x952828
004b693f	draw_status(int,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EDX + 0x95282a]	0F BF 92 2A 28 95 00	3	0x2	0x95282A
004b81e2	draw_status(int,int,int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
004b81f8	draw_status(int,int,int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
004b8216	draw_status(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
004b8448	draw_status(int,int,int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
004b845e	draw_status(int,int,int,int,int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
004b8549	draw_status(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
004b8566	draw_status(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952836]	8A 8F 36 28 95 00	2	0xE	0x952836
004b8599	draw_status(int,int,int,int,int)	MOVSX	MOVSX ECX,byte ptr [EDI + 0x952839]	0F BE 8F 39 28 95 00	3	0x11	0x952839
004b862d	draw_status(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004b863f	draw_status(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x95282c]	8A 87 2C 28 95 00	2	0x4	0x95282C
004b87dc	draw_status(int,int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x952858]	0F BF B7 58 28 95 00	3	0x30	0x952858
004b89df	arrow_left(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x95285a]	0F BF 04 95 5A 28 95 00	4	0x32	0x95285A
004b8d09	arrow_right(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
004bf938	vehdraw_turn_start(int,int,int,int)	MOVSX	MOVSX EAX,byte ptr [ECX + 0x952851]	0F BE 81 51 28 95 00	3	0x29	0x952851
004bf959	vehdraw_turn_start(int,int,int,int)	MOV	MOV byte ptr [ECX + 0x952851],DL	88 91 51 28 95 00	2	0x29	0x952851
004bf982	vehdraw_turn_start(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004bff35	vehdraw_scoot_start(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004c00f9	vehdraw_scoot_start(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
004c027e	vehdraw_scoot_start(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004c1321	vehdraw_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952828]	0F BF B1 28 28 95 00	3	0x0	0x952828
004c1328	vehdraw_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EDI,word ptr [ECX + 0x95282a]	0F BF B9 2A 28 95 00	3	0x2	0x95282A
004c133b	vehdraw_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,byte ptr [EAX + 0x952851]	0F BE 80 51 28 95 00	3	0x29	0x952851
004c138a	vehdraw_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004c16ab	vehdraw_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004c16ea	vehdraw_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
004c1794	vehdraw_unk1	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
004c179b	vehdraw_unk1	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
004c17a2	vehdraw_unk1	MOVSX	MOVSX EAX,byte ptr [EAX + 0x952851]	0F BE 80 51 28 95 00	3	0x29	0x952851
004c1a7e	vehdraw_unk1	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004c1abd	vehdraw_unk1	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
004c1d42	vehdraw_construct_vehicle(int,Caviar_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004c1d9f	vehdraw_construct_vehicle(int,Caviar_*)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
004c1dca	vehdraw_construct_vehicle(int,Caviar_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004c1e28	vehdraw_construct_vehicle(int,Caviar_*)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
004c96f7	action_build(int,char_*)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
004c96fd	action_build(int,char_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
004c9704	action_build(int,char_*)	MOVSX	MOVSX EDI,word ptr [EBX + 0x952828]	0F BF BB 28 28 95 00	3	0x0	0x952828
004c977c	action_build(int,char_*)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
004c9786	action_build(int,char_*)	MOV	MOV AX,word ptr [EBX + 0x952830]	66 8B 83 30 28 95 00	3	0x8	0x952830
004c9798	action_build(int,char_*)	MOV	MOV AL,byte ptr [EBX + 0x95284f]	8A 83 4F 28 95 00	2	0x27	0x95284F
004c98a5	action_build(int,char_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952856]	0F BF 83 56 28 95 00	3	0x2E	0x952856
004c98d0	action_build(int,char_*)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
004c9a6a	contribution(int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004c9a70	contribution(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004c9b20	action_terraform(int,int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
004c9b27	action_terraform(int,int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x952828]	0F BF 98 28 28 95 00	3	0x0	0x952828
004c9b2e	action_terraform(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004c9bed	action_terraform(int,int,int)	MOV	MOV byte ptr [EDI + 0x952839],AL	88 87 39 28 95 00	2	0x11	0x952839
004c9c79	action_terraform(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
004c9d01	action_terraform(int,int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
004c9d16	action_terraform(int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004c9d4c	action_terraform(int,int,int)	MOVSX	MOVSX EAX,byte ptr [EDI + 0x952839]	0F BE 87 39 28 95 00	3	0x11	0x952839
004c9d66	action_terraform(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
004c9d71	action_terraform(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
004c9e1d	action_terraform(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x95284d]	8A 87 4D 28 95 00	2	0x25	0x95284D
004c9e38	action_terraform(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x95284d]	8A 97 4D 28 95 00	2	0x25	0x95284D
004c9e3e	action_terraform(int,int,int)	ADD	ADD byte ptr [EAX + 0x95284d],DL	00 90 4D 28 95 00	2	0x25	0x95284D
004c9e44	action_terraform(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284d],0x0	C6 87 4D 28 95 00 00	2	0x25	0x95284D
004c9e51	action_terraform(int,int,int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952858]	0F BF 0C 8D 58 28 95 00	4	0x30	0x952858
004c9e72	action_terraform(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004c9e79	action_terraform(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
004c9f1c	action_terraform(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x95284d]	8A 87 4D 28 95 00	2	0x25	0x95284D
004c9f46	action_terraform(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952850]	8A 97 50 28 95 00	2	0x28	0x952850
004c9fb7	action_terraform(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x95284d]	8A 97 4D 28 95 00	2	0x25	0x95284D
004c9fc7	action_terraform(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284d],DL	88 97 4D 28 95 00	2	0x25	0x95284D
004c9ffb	action_terraform(int,int,int)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
004ca03d	action_terraform(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284d],0x0	C6 87 4D 28 95 00 00	2	0x25	0x95284D
004ca048	action_terraform(int,int,int)	MOV	MOV DX,word ptr [EDI + 0x95285a]	66 8B 97 5A 28 95 00	3	0x32	0x95285A
004ca05d	action_terraform(int,int,int)	MOV	MOV DX,word ptr [EDX*0x4 + 0x95285a]	66 8B 14 95 5A 28 95 00	4	0x32	0x95285A
004ca07d	action_terraform(int,int,int)	MOVSX	MOVSX EDI,byte ptr [EAX + 0x952839]	0F BE B8 39 28 95 00	3	0x11	0x952839
004ca088	action_terraform(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004ca08f	action_terraform(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
004ca29c	action_terraform(int,int,int)	MOVSX	MOVSX EDI,word ptr [EDX + 0x952856]	0F BF BA 56 28 95 00	3	0x2E	0x952856
004ca547	action_terraform(int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
004ca723	action_terraform(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
004ca72d	action_terraform(int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
004caa73	action_destroy(int,int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
004caa81	action_destroy(int,int,int,int)	MOV	MOV ECX,dword ptr [EDI + 0x95282c]	8B 8F 2C 28 95 00	2	0x4	0x95282C
004caa92	action_destroy(int,int,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],ECX	89 8F 2C 28 95 00	2	0x4	0x95282C
004caba0	action_destroy(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
004caba7	action_destroy(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
004cac03	action_destroy(int,int,int,int)	MOVSX	MOVSX EBX,word ptr [EDX + 0x952828]	0F BF 9A 28 28 95 00	3	0x0	0x952828
004cac2e	action_destroy(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EDX + 0x95282a]	0F BF 92 2A 28 95 00	3	0x2	0x95282A
004cad0c	action_destroy(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
004cad13	action_destroy(int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x95282a]	0F BF B7 2A 28 95 00	3	0x2	0x95282A
004cad20	action_destroy(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004cadf6	action_destroy(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004caef9	action_destroy(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004caf97	action_destroy(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004cb0ce	action_destroy(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004cb0d5	action_destroy(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
004cb23f	action_destroy(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004cb276	action_destroy(int,int,int,int)	CMP	CMP word ptr [EDI + 0x952832],0xf	66 83 BF 32 28 95 00 0F	3	0xA	0x952832
004cb2ad	action_destroy(int,int,int,int)	CMP	CMP word ptr [EDI + 0x952832],0xf	66 83 BF 32 28 95 00 0F	3	0xA	0x952832
004cb33d	action_go_to(int)	MOV	MOV DL,byte ptr [EAX + 0x952839]	8A 90 39 28 95 00	2	0x11	0x952839
004cb348	action_go_to(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95283c]	0F BF 80 3C 28 95 00	3	0x14	0x95283C
004cb35d	action_go_to(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004cb3d6	action_go_to(int)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
004cb3e1	action_go_to(int)	MOV	MOV CX,word ptr [EAX + 0x952828]	66 8B 88 28 28 95 00	3	0x0	0x952828
004cb3e8	action_go_to(int)	CMP	CMP CX,word ptr [EAX + 0x95283e]	66 3B 88 3E 28 95 00	3	0x16	0x95283E
004cb3f5	action_go_to(int)	MOV	MOV DX,word ptr [EAX + 0x95282a]	66 8B 90 2A 28 95 00	3	0x2	0x95282A
004cb3fc	action_go_to(int)	CMP	CMP DX,word ptr [EAX + 0x952846]	66 3B 90 46 28 95 00	3	0x1E	0x952846
004cb40a	action_go_to(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004cb41d	action_go_to(int)	MOV	MOV DX,word ptr [EAX + 0x952828]	66 8B 90 28 28 95 00	3	0x0	0x952828
004cb424	action_go_to(int)	LEA	LEA ECX,[EAX + 0x95283c]	8D 88 3C 28 95 00	2	0x14	0x95283C
004cb433	action_go_to(int)	MOV	MOV DX,word ptr [EAX + 0x95282a]	66 8B 90 2A 28 95 00	3	0x2	0x95282A
004cb43a	action_go_to(int)	CMP	CMP DX,word ptr [EAX + 0x952844]	66 3B 90 44 28 95 00	3	0x1C	0x952844
004cb447	action_go_to(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004cb44e	action_go_to(int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
004cb462	action_go_to(int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
004cb468	action_go_to(int)	CMP	CMP byte ptr [EAX + 0x95283b],DL	38 90 3B 28 95 00	2	0x13	0x95283B
004cb488	action_go_to(int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
004cb495	action_go_to(int)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
004cb49c	action_go_to(int)	MOV	MOV CL,byte ptr [EAX + 0x95283a]	8A 88 3A 28 95 00	2	0x12	0x95283A
004cb4a4	action_go_to(int)	MOV	MOV byte ptr [EAX + 0x95283a],CL	88 88 3A 28 95 00	2	0x12	0x95283A
004cb4ac	action_go_to(int)	AND	AND dword ptr [EAX + 0x95282c],0xfdfefdff	81 A0 2C 28 95 00 FF FD FE FD	2	0x4	0x95282C
004cb4b6	action_go_to(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004cb4cf	action_go_to(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
004cb4fb	action_go_to(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004cb509	action_go_to(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
004cb550	action_go_to(int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x0	C6 04 95 39 28 95 00 00	3	0x11	0x952839
004cb5b7	action_road_to(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004cb5c0	action_road_to(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95283c]	0F BF 88 3C 28 95 00	3	0x14	0x95283C
004cb5c7	action_road_to(int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
004cb5d4	action_road_to(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952844]	0F BF 88 44 28 95 00	3	0x1C	0x952844
004cb5db	action_road_to(int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
004cb6e3	action_road_to(int)	MOVSX	MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]	0F BE 0C 95 39 28 95 00	4	0x11	0x952839
004cb702	action_road_to(int)	MOVSX	MOVSX EBX,byte ptr [ECX*0x4 + 0x952839]	0F BE 1C 8D 39 28 95 00	4	0x11	0x952839
004cb71d	action_road_to(int)	MOV	MOV byte ptr [EAX*0x4 + 0x952839],BL	88 1C 85 39 28 95 00	3	0x11	0x952839
004cb7ce	action_road_to(int)	MOVSX	MOVSX EAX,byte ptr [ECX*0x4 + 0x952839]	0F BE 04 8D 39 28 95 00	4	0x11	0x952839
004cb7f2	action_road_to(int)	MOVSX	MOVSX EBX,byte ptr [EAX*0x4 + 0x952839]	0F BE 1C 85 39 28 95 00	4	0x11	0x952839
004cb80d	action_road_to(int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],BL	88 1C 95 39 28 95 00	3	0x11	0x952839
004cb81f	action_road_to(int)	CMP	CMP byte ptr [ECX*0x4 + 0x952839],0x1c	80 3C 8D 39 28 95 00 1C	3	0x11	0x952839
004cb8a1	action_road_to(int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x1c	C6 04 95 39 28 95 00 1C	3	0x11	0x952839
004cb8cf	action_road_to(int)	MOVSX	MOVSX EDI,byte ptr [EAX*0x4 + 0x952839]	0F BE 3C 85 39 28 95 00	4	0x11	0x952839
004cb8d7	action_road_to(int)	MOV	MOV byte ptr [EAX*0x4 + 0x952839],0x0	C6 04 85 39 28 95 00 00	3	0x11	0x952839
004cb917	action_road_to(int)	MOV	MOV EAX,dword ptr [EDX*0x4 + 0x95282c]	8B 04 95 2C 28 95 00	3	0x4	0x95282C
004cba44	action_road_to(int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x0	C6 04 95 39 28 95 00 00	3	0x11	0x952839
004cba5b	action_road_to(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004cbac9	action_home(int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95282a]	0F BF B3 2A 28 95 00	3	0x2	0x95282A
004cbad0	action_home(int,int)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
004cbadf	action_home(int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
004cbb15	action_home(int,int)	MOV	MOV CL,byte ptr [EBX + 0x952850]	8A 8B 50 28 95 00	2	0x28	0x952850
004cbb3b	action_home(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004cbb71	action_home(int,int)	MOV	MOV AL,byte ptr [EBX + 0x95284d]	8A 83 4D 28 95 00	2	0x25	0x95284D
004cbbcf	action_home(int,int)	MOV	MOV CL,byte ptr [EBX + 0x952838]	8A 8B 38 28 95 00	2	0x10	0x952838
004cbbfd	action_home(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004cbc75	action_home(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004cbd55	action_home(int,int)	MOV	MOV ECX,dword ptr [EBX + 0x95282c]	8B 8B 2C 28 95 00	2	0x4	0x95282C
004cbd67	action_home(int,int)	CMP	CMP byte ptr [EBX + 0x95284e],0xb	80 BB 4E 28 95 00 0B	2	0x26	0x95284E
004cbd73	action_home(int,int)	CMP	CMP CX,word ptr [EBX + 0x95283e]	66 3B 8B 3E 28 95 00	3	0x16	0x95283E
004cbd80	action_home(int,int)	CMP	CMP DX,word ptr [EBX + 0x952846]	66 3B 93 46 28 95 00	3	0x1E	0x952846
004cbdc2	action_home(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004cbdfe	action_home(int,int)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
004cbfa2	action_home(int,int)	MOV	MOV CL,byte ptr [EDX + 0x952850]	8A 8A 50 28 95 00	2	0x28	0x952850
004cc1af	action_home(int,int)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
004cc1bc	action_home(int,int)	CMP	CMP byte ptr [ECX + 0x95284e],0xb	80 B9 4E 28 95 00 0B	2	0x26	0x95284E
004cc1c5	action_home(int,int)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
004cc1cf	action_home(int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95283e]	0F BF 91 3E 28 95 00	3	0x16	0x95283E
004cc1da	action_home(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952846]	0F BF 89 46 28 95 00	3	0x1E	0x952846
004cc220	action_home(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004cc2b6	action_home(int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004cc2e5	action_home(int,int)	MOV	MOV byte ptr [EDX + 0x952839],0x18	C6 82 39 28 95 00 18	2	0x11	0x952839
004cc2ec	action_home(int,int)	MOV	MOV word ptr [EDX + 0x95283c],AX	66 89 82 3C 28 95 00	3	0x14	0x95283C
004cc2f3	action_home(int,int)	MOV	MOV word ptr [EDX + 0x952844],CX	66 89 8A 44 28 95 00	3	0x1C	0x952844
004cc2fa	action_home(int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004cc33b	action_home(int,int)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
004cc342	action_home(int,int)	MOV	MOV EAX,dword ptr [EDX + 0x95282c]	8B 82 2C 28 95 00	2	0x4	0x95282C
004cc34d	action_home(int,int)	MOV	MOV dword ptr [EDX + 0x95282c],EAX	89 82 2C 28 95 00	2	0x4	0x95282C
004cc382	action_airdrop(int,int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
004cc388	action_airdrop(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952828]	0F BF 87 28 28 95 00	3	0x0	0x952828
004cc38f	action_airdrop(int,int,int,int)	MOVSX	MOVSX EBX,word ptr [EDI + 0x95282a]	0F BF 9F 2A 28 95 00	3	0x2	0x95282A
004cc5b6	action_airdrop(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004cc6c0	action_airdrop(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
004ccd25	action_airdrop(int,int,int,int)	OR	OR dword ptr [EAX + 0x95282c],0x20	83 88 2C 28 95 00 20	2	0x4	0x95282C
004ccd2c	action_airdrop(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004ccd67	action_airdrop(int,int,int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
004ccd6e	action_airdrop(int,int,int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
004cce02	action_airdrop(int,int,int,int)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
004cce17	action_airdrop(int,int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004cce3d	action_airdrop(int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EAX*0x4 + 0x952858]	0F BF 34 85 58 28 95 00	4	0x30	0x952858
004ccf01	action_airdrop(int,int,int,int)	MOV	MOV byte ptr [EDX + 0x952838],0x0	C6 82 38 28 95 00 00	2	0x10	0x952838
004ccf29	action_airdrop(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004ccf36	action_airdrop(int,int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
004ccf49	action_airdrop(int,int,int,int)	MOV	MOV byte ptr [EDI + 0x952838],CL	88 8F 38 28 95 00	2	0x10	0x952838
004ccf4f	action_airdrop(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004ccf93	action_airdrop(int,int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
004ccfb2	action_airdrop(int,int,int,int)	MOV	MOV byte ptr [EDI + 0x952838],CL	88 8F 38 28 95 00	2	0x10	0x952838
004cd0a1	action_arty(int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
004cd0e9	action_arty(int,int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
004cd0f0	action_arty(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004cd1e2	action_arty(int,int,int)	MOV	MOV DL,byte ptr [EAX*0x4 + 0x952836]	8A 14 85 36 28 95 00	3	0xE	0x952836
004cd1e9	action_arty(int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
004cd22f	action_arty(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
004cd238	action_arty(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
004cd307	action_destruct(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cd30e	action_destruct(int)	MOVSX	MOVSX EBX,word ptr [ESI + 0x952828]	0F BF 9E 28 28 95 00	3	0x0	0x952828
004cd322	action_destruct(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
004cd32b	action_destruct(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004cd355	action_destruct(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004cd40e	action_destruct(int)	ADD	ADD byte ptr [EAX + 0x952838],DL	00 90 38 28 95 00	2	0x10	0x952838
004cd414	action_destruct(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
004cd43e	action_destruct(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004cd485	action_destruct(int)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
004cd48f	action_destruct(int)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952858]	0F BF B1 58 28 95 00	3	0x30	0x952858
004cd4fa	action_oblit(int,int)	MOV	MOV BL,byte ptr [EDX*0x4 + 0x952836]	8A 1C 95 36 28 95 00	3	0xE	0x952836
004cd6b9	valid_patrol(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004cd6c4	valid_patrol(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
004cd6fb	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004cd723	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cd771	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cd7c6	valid_patrol(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
004cd7d4	valid_patrol(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004cd80c	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cd819	valid_patrol(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004cd86f	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cd884	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cd892	valid_patrol(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
004cd927	valid_patrol(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
004cd958	valid_patrol(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004cd980	valid_patrol(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x95284d]	8A 8E 4D 28 95 00	2	0x25	0x95284D
004cd996	valid_patrol(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
004cd9a3	valid_patrol(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
004cda65	action_patrol(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
004cda6c	action_patrol(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
004cda74	action_patrol(int,int,int)	MOV	MOV word ptr [EDX*0x2 + 0x95283c],BX	66 89 1C 55 3C 28 95 00	4	0x14	0x95283C
004cda7e	action_patrol(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
004cda86	action_patrol(int,int,int)	MOV	MOV word ptr [EDX*0x2 + 0x952844],DI	66 89 3C 55 44 28 95 00	4	0x1C	0x952844
004cda8e	action_patrol(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
004cda96	action_patrol(int,int,int)	MOV	MOV byte ptr [EAX + 0x95283a],DL	88 90 3A 28 95 00	2	0x12	0x95283A
004cda9c	action_patrol(int,int,int)	MOV	MOV SI,word ptr [EAX + 0x952828]	66 8B B0 28 28 95 00	3	0x0	0x952828
004cdaab	action_patrol(int,int,int)	MOV	MOV word ptr [EDX*0x2 + 0x95283c],SI	66 89 34 55 3C 28 95 00	4	0x14	0x95283C
004cdab5	action_patrol(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
004cdabd	action_patrol(int,int,int)	MOV	MOV CX,word ptr [EAX + 0x95282a]	66 8B 88 2A 28 95 00	3	0x2	0x95282A
004cdac4	action_patrol(int,int,int)	MOV	MOV word ptr [EDX*0x2 + 0x952844],CX	66 89 0C 55 44 28 95 00	4	0x1C	0x952844
004cdacc	action_patrol(int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
004cdad8	action_patrol(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
004cdade	action_patrol(int,int,int)	MOV	MOV byte ptr [EAX + 0x95283b],0x0	C6 80 3B 28 95 00 00	2	0x13	0x95283B
004ce22d	action_tectonic(int,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
004ce234	action_tectonic(int,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
004ce249	action_tectonic(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
004ce27e	action_tectonic(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
004ce31b	action_tectonic(int,int,int)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
004ce498	action_tectonic(int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
004ce5a9	action_tectonic(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
004ce5e3	action_tectonic(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
004ce61d	action_tectonic(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
004ce679	action_tectonic(int,int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
004ce7ba	action_fungal(int,int,int)	MOV	MOV BL,byte ptr [ESI + 0x952836]	8A 9E 36 28 95 00	2	0xE	0x952836
004ce7c5	action_fungal(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
004ce7cc	action_fungal(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004ce95f	action_fungal(int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
004cea1b	action_fungal(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004ceb46	action_fungal(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
004ced04	action_fungal(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004ced40	action_fungal(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004ced7a	action_fungal(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
004cedf9	action_give(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004cee00	action_give(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
004cee07	action_give(int,int)	MOV	MOV BL,byte ptr [ESI + 0x952836]	8A 9E 36 28 95 00	2	0xE	0x952836
004cee21	action_give(int,int)	MOV	MOV CX,word ptr [ESI + 0x95285a]	66 8B 8E 5A 28 95 00	3	0x32	0x95285A
004cee36	action_give(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004cee58	action_give(int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
004cee65	action_give(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95283c]	0F BF 8E 3C 28 95 00	3	0x14	0x95283C
004cee7d	action_give(int,int)	MOV	MOV AX,word ptr [ESI + 0x952832]	66 8B 86 32 28 95 00	3	0xA	0x952832
004ceebe	action_give(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004cef1d	action_give(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004cef8d	action_give(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004ceff0	action_give(int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952832]	0F BF BE 32 28 95 00	3	0xA	0x952832
004cf02d	action_give(int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952832]	0F BF BE 32 28 95 00	3	0xA	0x952832
004cf059	action_give(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004cf08c	action_give(int,int)	MOV	MOV byte ptr [ESI + 0x952836],DL	88 96 36 28 95 00	2	0xE	0x952836
004cf092	action_give(int,int)	MOV	MOV word ptr [ESI + 0x952832],BX	66 89 9E 32 28 95 00	3	0xA	0x952832
004cf09c	action_give(int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
004cf0a3	action_give(int,int)	MOV	MOV EBX,dword ptr [ESI + 0x95282c]	8B 9E 2C 28 95 00	2	0x4	0x95282C
004cf0b0	action_give(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EBX	89 9E 2C 28 95 00	2	0x4	0x95282C
004cf0ca	action_give(int,int)	MOV	MOV word ptr [ESI + 0x952856],AX	66 89 86 56 28 95 00	3	0x2E	0x952856
004cf11d	action_give(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
004cf153	action_give(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004cf29f	action_give(int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004cf395	action_gate(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004cf39c	action_gate(int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
004cf454	action_gate(int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004cf45a	action_gate(int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004cf461	action_gate(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004cf74d	action(int)	MOV	MOV AL,byte ptr [ESI*0x4 + 0x952839]	8A 04 B5 39 28 95 00	3	0x11	0x952839
004cf79a	action(int)	TEST	TEST byte ptr [ESI*0x4 + 0x952839],0x40	F6 04 B5 39 28 95 00 40	3	0x11	0x952839
004cf7a4	action(int)	MOV	MOV byte ptr [ESI*0x4 + 0x952839],0x0	C6 04 B5 39 28 95 00 00	3	0x11	0x952839
004cf7dd	new_base(int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
004cf7e4	new_base(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
004cf7eb	new_base(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004cf7f4	new_base(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004d0030	new_base(int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
004d04b9	wait(int)	MOV	MOV ECX,dword ptr [EAX*0x4 + 0x95282c]	8B 0C 85 2C 28 95 00	3	0x4	0x95282C
004d04c3	wait(int)	MOV	MOV dword ptr [EAX*0x4 + 0x95282c],ECX	89 0C 85 2C 28 95 00	3	0x4	0x95282C
004d0523	unload(int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
004d0557	unload(int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
004d0583	unload(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004d0599	unload(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
004d05b7	unload(int)	CMP	CMP byte ptr [ECX*0x4 + 0x952839],0x1	80 3C 8D 39 28 95 00 01	3	0x11	0x952839
004d05c2	unload(int)	MOV	MOV byte ptr [ECX*0x4 + 0x952839],0x0	C6 04 8D 39 28 95 00 00	3	0x11	0x952839
004d05db	unload(int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
004d061f	unload(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952839]	8A 0C 95 39 28 95 00	3	0x11	0x952839
004d063c	unload(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
004d0784	upgrade(int)	MOV	MOV CL,byte ptr [EAX + 0x952850]	8A 88 50 28 95 00	2	0x28	0x952850
004d0792	upgrade(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004d084a	upgrade(int)	MOV	MOV BL,byte ptr [EAX + 0x952836]	8A 98 36 28 95 00	2	0xE	0x952836
004d0922	upgrade(int)	MOV	MOV CL,byte ptr [EAX + 0x952850]	8A 88 50 28 95 00	2	0x28	0x952850
004d09d8	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004d0a25	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d0a44	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d0a87	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d0b24	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
004d0b82	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d0be5	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d0c3f	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d0ca8	upgrade(int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x952832]	66 8B 04 95 32 28 95 00	4	0xA	0x952832
004d0d39	upgrade(int)	MOVSX	MOVSX EBX,word ptr [EAX*0x4 + 0x952832]	0F BF 1C 85 32 28 95 00	4	0xA	0x952832
004d0dc9	upgrade(int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
004d0df5	upgrade(int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
004d1170	upgrade(int)	CMP	CMP ESI,dword ptr [EDX*0x4 + 0x96cc00]	3B 34 95 00 CC 96 00	0	0xC13	0x95343B
004d11ed	upgrade(int)	MOVSX	MOVSX ESI,word ptr [EAX*0x4 + 0x952832]	0F BF 34 85 32 28 95 00	4	0xA	0x952832
004d11fc	upgrade(int)	MOV	MOV word ptr [EAX*0x4 + 0x952832],DI	66 89 3C 85 32 28 95 00	4	0xA	0x952832
004d14e6	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d152d	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d154c	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d1591	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d16ce	upgrade(int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
004d17b8	upgrade(int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
004d17d6	upgrade(int)	MOV	MOV word ptr [ECX*0x4 + 0x952832],AX	66 89 04 8D 32 28 95 00	4	0xA	0x952832
004d17ff	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d181f	upgrade(int)	MOV	MOV AL,byte ptr [ECX*0x4 + 0x95284c]	8A 04 8D 4C 28 95 00	3	0x24	0x95284C
004d1837	upgrade(int)	MOV	MOV byte ptr [ECX*0x4 + 0x95284c],AL	88 04 8D 4C 28 95 00	3	0x24	0x95284C
004d1861	upgrade(int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
004d1881	upgrade(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x95284c]	8A 0C 95 4C 28 95 00	3	0x24	0x95284C
004d1895	upgrade(int)	MOV	MOV byte ptr [EDX*0x4 + 0x95284c],CL	88 0C 95 4C 28 95 00	3	0x24	0x95284C
004d18a0	upgrade(int)	MOV	MOV byte ptr [EDX*0x4 + 0x95284c],CL	88 0C 95 4C 28 95 00	3	0x24	0x95284C
004d18c0	upgrade(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004d18c7	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d1984	upgrade(int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
004d19a2	upgrade(int)	MOV	MOV word ptr [ECX*0x4 + 0x952832],AX	66 89 04 8D 32 28 95 00	4	0xA	0x952832
004d19cb	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d19eb	upgrade(int)	MOV	MOV AL,byte ptr [ECX*0x4 + 0x95284c]	8A 04 8D 4C 28 95 00	3	0x24	0x95284C
004d1a03	upgrade(int)	MOV	MOV byte ptr [ECX*0x4 + 0x95284c],AL	88 04 8D 4C 28 95 00	3	0x24	0x95284C
004d1a2d	upgrade(int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
004d1a4d	upgrade(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x95284c]	8A 0C 95 4C 28 95 00	3	0x24	0x95284C
004d1a61	upgrade(int)	MOV	MOV byte ptr [EDX*0x4 + 0x95284c],CL	88 0C 95 4C 28 95 00	3	0x24	0x95284C
004d1a6c	upgrade(int)	MOV	MOV byte ptr [EDX*0x4 + 0x95284c],CL	88 0C 95 4C 28 95 00	3	0x24	0x95284C
004d1a8c	upgrade(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004d1a93	upgrade(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d2237	sentry(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
004d225c	sentry(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004d226a	sentry(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d22cb	sentry(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d22f5	sentry(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
004d2303	sentry(int,int)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952828]	0F BF B1 28 28 95 00	3	0x0	0x952828
004d234d	sentry(int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
004d2362	sentry(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
004d2382	sentry(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
004d23b1	sentry(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
004d245b	sentry(int,int)	MOV	MOV word ptr [EDX*0x4 + 0x952844],CX	66 89 0C 95 44 28 95 00	4	0x1C	0x952844
004d249b	sentry(int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004d24a2	sentry(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d24f8	hold(int,int)	MOVSX	MOVSX EDI,word ptr [ECX + 0x95282a]	0F BF B9 2A 28 95 00	3	0x2	0x95282A
004d24ff	hold(int,int)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952828]	0F BF B1 28 28 95 00	3	0x0	0x952828
004d252d	hold(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d256a	hold(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d25d1	hold(int,int)	MOV	MOV word ptr [ECX + 0x952844],AX	66 89 81 44 28 95 00	3	0x1C	0x952844
004d25d8	hold(int,int)	MOV	MOV byte ptr [ECX + 0x952839],BL	88 99 39 28 95 00	2	0x11	0x952839
004d2623	hold(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d2675	hold(int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
004d26dc	give_veh(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004d26ea	give_veh(int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
004d26f1	give_veh(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
004d2744	give_veh(int)	MOV	MOV SI,word ptr [EDX*0x4 + 0x952832]	66 8B 34 95 32 28 95 00	4	0xA	0x952832
004d2787	give_veh(int)	MOV	MOV DX,word ptr [ECX*0x4 + 0x952832]	66 8B 14 8D 32 28 95 00	4	0xA	0x952832
004d2889	give_veh(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d296c	give_veh(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d29b3	give_veh(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d2a0b	give_veh(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
004d2ad2	disband(int)	TEST	TEST byte ptr [EDX*0x4 + 0x952830],0x20	F6 04 95 30 28 95 00 20	3	0x8	0x952830
004d2b3a	disband(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004d2b69	disband(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
004d2b70	disband(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95282a]	0F BF 80 2A 28 95 00	3	0x2	0x95282A
004d2b97	disband(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d2c04	disband(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
004d2cbb	disband(int)	MOV	MOV SI,word ptr [EAX + 0x952832]	66 8B B0 32 28 95 00	3	0xA	0x952832
004d2d0d	disband(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004d2d29	disband(int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
004d3112	activate(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],BL	38 99 39 28 95 00	2	0x11	0x952839
004d311a	activate(int,int,int)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
004d3145	activate(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x2	80 B9 39 28 95 00 02	2	0x11	0x952839
004d3165	activate(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d31c4	activate(int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952839]	8A 0C 95 39 28 95 00	3	0x11	0x952839
004d3246	activate(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
004d3254	activate(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
004d325b	activate(int,int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
004d32e5	activate(int,int,int)	CMP	CMP byte ptr [EAX + 0x952839],BL	38 98 39 28 95 00	2	0x11	0x952839
004d32ed	activate(int,int,int)	TEST	TEST dword ptr [EAX + 0x95282c],0x8004200	F7 80 2C 28 95 00 00 42 00 08	2	0x4	0x95282C
004d332f	activate(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004d3336	activate(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d3375	activate(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004d337c	activate(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d34b6	terraform(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
004d3521	terraform(int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
004d3528	terraform(int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
004d37fa	terraform(int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d3f95	terraform(int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004d3f9f	terraform(int,int)	CMP	CMP byte ptr [EAX + 0x952839],0x12	80 B8 39 28 95 00 12	2	0x11	0x952839
004d3fac	terraform(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
004d4f1f	terraform(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x952839],DL	88 14 8D 39 28 95 00	3	0x11	0x952839
004d4f61	terraform(int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952850]	8A 0C 95 50 28 95 00	3	0x28	0x952850
004d5517	destroy(int)	MOVSX	MOVSX ESI,word ptr [ECX + 0x95282a]	0F BF B1 2A 28 95 00	3	0x2	0x95282A
004d551e	destroy(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
004d552d	destroy(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
004d555d	destroy(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d5d44	oblit(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004d5d4a	oblit(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
004d5d51	oblit(int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
004d647a	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x952828],DX	66 89 90 28 28 95 00	3	0x0	0x952828
004d6481	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x95282a],CX	66 89 88 2A 28 95 00	3	0x2	0x95282A
004d6488	go_to(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EBX	89 98 2C 28 95 00	2	0x4	0x95282C
004d6506	go_to(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
004d650c	go_to(int,int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
004d6513	go_to(int,int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
004d651a	go_to(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
004d655e	go_to(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
004d6c3c	go_to(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
004d6ccc	go_to(int,int,int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
004d6d87	go_to(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95283c]	0F BF 88 3C 28 95 00	3	0x14	0x95283C
004d6d8e	go_to(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952844]	0F BF 90 44 28 95 00	3	0x1C	0x952844
004d6d9b	go_to(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004d732d	go_to(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004d7395	go_to(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
004d73e3	go_to(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004d740a	go_to(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x95284d]	8A 8E 4D 28 95 00	2	0x25	0x95284D
004d77bb	go_to(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952856]	0F BF 82 56 28 95 00	3	0x2E	0x952856
004d7987	go_to(int,int,int)	CMP	CMP DX,word ptr [EAX + 0x952828]	66 3B 90 28 28 95 00	3	0x0	0x952828
004d7997	go_to(int,int,int)	CMP	CMP DX,word ptr [EAX + 0x95282a]	66 3B 90 2A 28 95 00	3	0x2	0x95282A
004d7a3d	go_to(int,int,int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
004d7a4c	go_to(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
004d7a55	go_to(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284e],0xa	C6 80 4E 28 95 00 0A	2	0x26	0x95284E
004d7a6c	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x95283e],DX	66 89 90 3E 28 95 00	3	0x16	0x95283E
004d7a7a	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x952846],DX	66 89 90 46 28 95 00	3	0x1E	0x952846
004d7a8c	go_to(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],BL	88 98 39 28 95 00	2	0x11	0x952839
004d7aa4	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x95283c],DX	66 89 90 3C 28 95 00	3	0x14	0x95283C
004d7ab2	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x952844],DX	66 89 90 44 28 95 00	3	0x1C	0x952844
004d7ab9	go_to(int,int,int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
004d7ac5	go_to(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
004d7aea	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x95283c],DX	66 89 90 3C 28 95 00	3	0x14	0x95283C
004d7af8	go_to(int,int,int)	MOV	MOV word ptr [EAX + 0x952844],DX	66 89 90 44 28 95 00	3	0x1C	0x952844
004d7bf0	road_to(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d7c5d	road_to(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
004d7c6b	road_to(int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
004d7cb6	road_to(int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
004d7cfc	designate(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d7d4c	designate(int)	XOR	XOR dword ptr [ECX*0x4 + 0x95282c],0x80	81 34 8D 2C 28 95 00 80 00 00 00	3	0x4	0x95282C
004d7d76	designate(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d7da8	designate(int)	TEST	TEST byte ptr [EDX*0x4 + 0x95282c],0x80	F6 04 95 2C 28 95 00 80	3	0x4	0x95282C
004d7e11	go_home(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004d7e18	go_home(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d7e4b	go_home(int)	CMP	CMP DL,byte ptr [EAX + 0x952836]	3A 90 36 28 95 00	2	0xE	0x952836
004d7e55	go_home(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952856]	0F BF B8 56 28 95 00	3	0x2E	0x952856
004d7e5c	go_home(int)	MOV	MOV word ptr [EAX + 0x952856],SI	66 89 B0 56 28 95 00	3	0x2E	0x952856
004d7eec	set_patrol(int)	MOV	MOV byte ptr [EAX*0x4 + 0x95283a],0x0	C6 04 85 3A 28 95 00 00	3	0x12	0x95283A
004d7fa3	use_ability(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
004d7faa	use_ability(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004d7fb6	use_ability(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
004d802b	use_ability(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
004d80d2	use_ability(int)	MOV	MOV AL,byte ptr [EDX + 0x952850]	8A 82 50 28 95 00	2	0x28	0x952850
004d853c	use_ability(int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
004d868e	use_ability(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004d883e	use_ability(int)	TEST	TEST byte ptr [EAX + 0x95282c],0x20	F6 80 2C 28 95 00 20	2	0x4	0x95282C
004d88d3	use_ability(int)	MOV	MOV CL,byte ptr [EAX + 0x952850]	8A 88 50 28 95 00	2	0x28	0x952850
004d8a85	automate(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
004d8ad4	automate(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
004d8adb	automate(int,int)	MOVSX	MOVSX EBX,word ptr [ECX + 0x952828]	0F BF 99 28 28 95 00	3	0x0	0x952828
004d8b13	automate(int,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
004d8b5e	automate(int,int)	MOV	MOV DX,word ptr [ECX + 0x952828]	66 8B 91 28 28 95 00	3	0x0	0x952828
004d8b65	automate(int,int)	MOV	MOV word ptr [ECX + 0x95283e],DX	66 89 91 3E 28 95 00	3	0x16	0x95283E
004d8b6c	automate(int,int)	MOV	MOV DX,word ptr [ECX + 0x95282a]	66 8B 91 2A 28 95 00	3	0x2	0x95282A
004d8b73	automate(int,int)	MOV	MOV word ptr [ECX + 0x952846],DX	66 89 91 46 28 95 00	3	0x1E	0x952846
004d8b7a	automate(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
004d8bb9	automate(int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
004d8bc2	automate(int,int)	MOV	MOV DX,word ptr [ECX + 0x95283c]	66 8B 91 3C 28 95 00	3	0x14	0x95283C
004d8bc9	automate(int,int)	MOV	MOV word ptr [ECX + 0x95283e],DX	66 89 91 3E 28 95 00	3	0x16	0x95283E
004d8bd0	automate(int,int)	MOV	MOV DX,word ptr [ECX + 0x952844]	66 8B 91 44 28 95 00	3	0x1C	0x952844
004d8bd7	automate(int,int)	MOV	MOV word ptr [ECX + 0x952846],DX	66 89 91 46 28 95 00	3	0x1E	0x952846
004d8bde	automate(int,int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
004d8bef	automate(int,int)	MOV	MOV byte ptr [ECX + 0x95284e],BL	88 99 4E 28 95 00	2	0x26	0x95284E
004d8bf5	automate(int,int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
004d8bfc	automate(int,int)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
004d8c0b	automate(int,int)	MOV	MOV dword ptr [ECX + 0x95282c],EDX	89 91 2C 28 95 00	2	0x4	0x95282C
004d8c11	automate(int,int)	MOV	MOV byte ptr [ECX + 0x95283a],0x0	C6 81 3A 28 95 00 00	2	0x12	0x95283A
004d8c45	automate(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
004d8c4f	automate(int,int)	MOVSX	MOVSX EDI,word ptr [ECX + 0x952828]	0F BF B9 28 28 95 00	3	0x0	0x952828
004d8cad	automate(int,int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
004d8cf8	set_bombing_run(int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
004d8d54	set_bombing_run(int,int,int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
004d8d63	set_bombing_run(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
004d8d69	set_bombing_run(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284e],0xa	C6 80 4E 28 95 00 0A	2	0x26	0x95284E
004d8d70	set_bombing_run(int,int,int)	MOV	MOV word ptr [EAX + 0x95283e],DI	66 89 B8 3E 28 95 00	3	0x16	0x95283E
004d8d77	set_bombing_run(int,int,int)	MOV	MOV word ptr [EAX + 0x952846],SI	66 89 B0 46 28 95 00	3	0x1E	0x952846
004d8e02	set_road_to(int,int,int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
004d8e09	set_road_to(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d8eae	set_road_to(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
004d8eb5	set_road_to(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
004d8efc	set_road_to(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],DL	88 90 39 28 95 00	2	0x11	0x952839
004d8f06	set_road_to(int,int,int,int)	MOV	MOV word ptr [EAX + 0x95283c],BX	66 89 98 3C 28 95 00	3	0x14	0x95283C
004d8f0d	set_road_to(int,int,int,int)	MOV	MOV word ptr [EAX + 0x952844],DX	66 89 90 44 28 95 00	3	0x1C	0x952844
004d8f6a	explore(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
004d8f71	explore(int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
004d8f7a	explore(int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
004d8fd3	convoy(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004d8fda	convoy(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
004d9022	convoy(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952856]	0F BF 88 56 28 95 00	3	0x2E	0x952856
004d9034	convoy(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
004d903b	convoy(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
004d9092	convoy(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
004d9099	convoy(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
004d90a2	convoy(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952856]	0F BF 90 56 28 95 00	3	0x2E	0x952856
004d913e	convoy(int)	MOV	MOV byte ptr [ECX + 0x952839],0x3	C6 81 39 28 95 00 03	2	0x11	0x952839
004d9145	convoy(int)	MOV	MOV byte ptr [ECX + 0x95284e],AL	88 81 4E 28 95 00	2	0x26	0x95284E
004d9184	arty(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004d91f0	arty(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
004d91fe	arty(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
004d9223	arty(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004d92f2	group(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
004d92f9	group(int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
004d9302	group(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952844]	0F BF 86 44 28 95 00	3	0x1C	0x952844
004d9313	group(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
004d931d	group(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95283c]	0F BF 96 3C 28 95 00	3	0x14	0x95283C
004d9334	group(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
004d9345	group(int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
004d935b	group(int)	MOV	MOV EDI,0x952832	BF 32 28 95 00	1	0xA	0x952832
004d9428	group(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952844]	0F BF 96 44 28 95 00	3	0x1C	0x952844
004d942f	group(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95283c]	0F BF 86 3C 28 95 00	3	0x14	0x95283C
004d9472	group(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
004d947b	group(int)	MOV	MOV CL,byte ptr [ESI + 0x95283a]	8A 8E 3A 28 95 00	2	0x12	0x95283A
004d9484	group(int)	MOV	MOV DL,byte ptr [ESI + 0x95283b]	8A 96 3B 28 95 00	2	0x13	0x95283B
004d9490	group(int)	LEA	LEA EAX,[ESI + 0x952844]	8D 86 44 28 95 00	2	0x1C	0x952844
004d94b3	group(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
004d9525	group(int)	MOV	MOV ESI,0x952836	BE 36 28 95 00	1	0xE	0x952836
004d969d	assemble(void)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
004d98e1	assemble(void)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
004d98e8	assemble(void)	MOV	MOV word ptr [EAX + 0x95283c],SI	66 89 B0 3C 28 95 00	3	0x14	0x95283C
004d98ef	assemble(void)	MOV	MOV word ptr [EAX + 0x952844],CX	66 89 88 44 28 95 00	3	0x1C	0x952844
004d98f6	assemble(void)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
004d9902	assemble(void)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
004d9922	assemble(void)	MOV	MOV EAX,0x95282c	B8 2C 28 95 00	1	0x4	0x95282C
004dbbef	editor_reset_faction(void)	MOV	MOV EAX,0x95282c	B8 2C 28 95 00	1	0x4	0x95282C
004ddaae	editor_edit_veh(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952830]	0F BF 86 30 28 95 00	3	0x8	0x952830
004de9be	editor_kill_veh(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
004df1c4	editor_veh(void)	MOV	MOV byte ptr [ESI + 0x95284c],DL	88 96 4C 28 95 00	2	0x24	0x95284C
004df1ca	editor_veh(void)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004df1fe	editor_veh(void)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
004e53ea	base_kill(int)	ADD	ADD ECX,0x952856	81 C1 56 28 95 00	2	0x2E	0x952856
004e55c3	base_kill(int)	MOV	MOV EAX,0x952856	B8 56 28 95 00	1	0x2E	0x952856
004e5849	base_kill(int)	MOV	MOV EBX,0x95282a	BB 2A 28 95 00	1	0x2	0x95282A
004e58d7	base_kill(int)	ADD	ADD ESI,0x95282a	81 C6 2A 28 95 00	2	0x2	0x95282A
004e5989	base_kill(int)	ADD	ADD ESI,0x95282a	81 C6 2A 28 95 00	2	0x2	0x95282A
004e6aac	farm_compute(void)	MOV	MOV SI,word ptr [ESI + 0x95285a]	66 8B B6 5A 28 95 00	3	0x32	0x95285A
004e6ac2	farm_compute(void)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
004e6adc	farm_compute(void)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
004e6aec	farm_compute(void)	MOV	MOV DX,word ptr [ESI + 0x952830]	66 8B 96 30 28 95 00	3	0x8	0x952830
004e6b07	farm_compute(void)	TEST	TEST byte ptr [ESI + 0x95284f],DL	84 96 4F 28 95 00	2	0x27	0x95284F
004e6b38	farm_compute(void)	MOVSX	MOVSX ESI,word ptr [ESI + 0x952858]	0F BF B6 58 28 95 00	3	0x30	0x952858
004e6b85	farm_compute(void)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
004e9602	base_support(void)	MOV	MOV ESI,0x95284e	BE 4E 28 95 00	1	0x26	0x95284E
004eaf00	base_psych(void)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004eaf37	base_psych(void)	MOV	MOV CX,word ptr [EDI + 0x952832]	66 8B 8F 32 28 95 00	3	0xA	0x952832
004eaf88	base_psych(void)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952858]	0F BF 87 58 28 95 00	3	0x30	0x952858
004eaff6	base_psych(void)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
004eb055	base_psych(void)	MOV	MOV SI,word ptr [EDI + 0x952832]	66 8B B7 32 28 95 00	3	0xA	0x952832
004ef22a	base_growth(void)	MOV	MOV ECX,0x952832	B9 32 28 95 00	1	0xA	0x952832
004efbb7	do_upgrade(int,int,int)	MOV	MOV EDI,0x95284c	BF 4C 28 95 00	1	0x24	0x95284C
004f118b	base_production(void)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
004f1194	base_production(void)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
004f119a	base_production(void)	MOV	MOV byte ptr [EAX + 0x95284e],0x0	C6 80 4E 28 95 00 00	2	0x26	0x95284E
004f11d5	base_production(void)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
004f11db	base_production(void)	LEA	LEA EAX,[EAX + 0x95282c]	8D 80 2C 28 95 00	2	0x4	0x95282C
004f13c5	base_production(void)	MOV	MOV byte ptr [ESI + 0x95284c],AL	88 86 4C 28 95 00	2	0x24	0x95284C
004f13cb	base_production(void)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
004f13db	base_production(void)	MOV	MOV dword ptr [ESI + 0x95282c],ECX	89 8E 2C 28 95 00	2	0x4	0x95282C
004f13e3	base_production(void)	OR	OR byte ptr [ESI + 0x952831],0x10	80 8E 31 28 95 00 10	2	0x9	0x952831
004f145f	base_production(void)	MOV	MOV word ptr [ESI + 0x952856],BX	66 89 9E 56 28 95 00	3	0x2E	0x952856
004f2200	base_production(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
004f2213	base_production(void)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
004f221e	base_production(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
004f4876	base_check_support(void)	MOV	MOV EDI,0x952856	BF 56 28 95 00	1	0x2E	0x952856
004f49d6	base_check_support(void)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
004f49f6	base_check_support(void)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
004f4a60	base_check_support(void)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
004f4ac3	base_check_support(void)	MOV	MOV EBX,dword ptr [ESI + 0x95282c]	8B 9E 2C 28 95 00	2	0x4	0x95282C
004f4ad1	base_check_support(void)	MOV	MOV dword ptr [ESI + 0x95282c],EBX	89 9E 2C 28 95 00	2	0x4	0x95282C
004f4ae7	base_check_support(void)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
004f4c12	base_check_support(void)	MOV	MOV EDI,0x95282c	BF 2C 28 95 00	1	0x4	0x95282C
004f4dfc	base_energy_costs(void)	MOV	MOV ECX,0x952832	B9 32 28 95 00	1	0xA	0x952832
004f5919	drone_riot(void)	ADD	ADD ESI,0x952832	81 C6 32 28 95 00	2	0xA	0x952832
004f5a78	drone_riot(void)	ADD	ADD EDI,0x952856	81 C7 56 28 95 00	2	0x2E	0x952856
004f7419	base_ecology(void)	MOV	MOV byte ptr [EAX + 0x95284e],DL	88 90 4E 28 95 00	2	0x26	0x95284E
004f93ca	base_build(int,int_*,int_*,int_*)	MOV	MOV ECX,0x952832	B9 32 28 95 00	1	0xA	0x952832
004f952b	base_build(int,int_*,int_*,int_*)	MOV	MOV EDI,0x952832	BF 32 28 95 00	1	0xA	0x952832
004f9992	base_build(int,int_*,int_*,int_*)	MOV	MOV CL,byte ptr [EDX + 0x952836]	8A 8A 36 28 95 00	2	0xE	0x952836
004fc5f4	base_build(int,int_*,int_*,int_*)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
004fd538	base_build(int,int_*,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005003f9	FUN_00500380	MOV	MOV EDI,0x952832	BF 32 28 95 00	1	0xA	0x952832
0050052c	planet_buster(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00500b84	planet_busting(int,int,int)	MOV	MOV BL,byte ptr [ESI + 0x952836]	8A 9E 36 28 95 00	2	0xE	0x952836
00500b9a	planet_busting(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00500e0b	planet_busting(int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
00501002	planet_busting(int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
0050113e	defense_value(int,int,int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0050116a	defense_value(int,int,int,int,int)	MOV	MOV SI,word ptr [ESI + 0x952832]	66 8B B6 32 28 95 00	3	0xA	0x952832
005011f4	defense_value(int,int,int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x952832]	66 8B 0C 8D 32 28 95 00	4	0xA	0x952832
00501233	defense_value(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
00501256	defense_value(int,int,int,int,int)	MOV	MOV CX,word ptr [ESI + 0x952832]	66 8B 8E 32 28 95 00	3	0xA	0x952832
0050127d	defense_value(int,int,int,int,int)	CMP	CMP CL,byte ptr [ESI + 0x952836]	3A 8E 36 28 95 00	2	0xE	0x952836
00501308	defense_value(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005013e7	morale_alien(int,int)	TEST	TEST dword ptr [EDX + 0x95282c],0x100	F7 82 2C 28 95 00 00 01 00 00	2	0x4	0x95282C
005013f4	morale_alien(int,int)	CMP	CMP word ptr [EDX + 0x952832],0xa	66 83 BA 32 28 95 00 0A	3	0xA	0x952832
005013ff	morale_alien(int,int)	MOV	MOV DL,byte ptr [EDX + 0x952830]	8A 92 30 28 95 00	2	0x8	0x952830
00501413	morale_alien(int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
0050141a	morale_alien(int,int)	CMP	CMP word ptr [ECX + 0x952832],0x13	66 83 B9 32 28 95 00 13	3	0xA	0x952832
00501425	morale_alien(int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
005015ca	get_basic_offense(int,int,int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
005015f9	get_basic_offense(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
00501616	get_basic_offense(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
0050161d	get_basic_offense(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005016e2	get_basic_offense(int,int,int,int,int)	MOV	MOV CX,word ptr [ECX + 0x952832]	66 8B 89 32 28 95 00	3	0xA	0x952832
00501751	get_basic_offense(int,int,int,int,int)	MOV	MOV CX,word ptr [ECX + 0x952832]	66 8B 89 32 28 95 00	3	0xA	0x952832
005017fe	get_basic_offense(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
0050180e	get_basic_offense(int,int,int,int,int)	MOV	MOV CX,word ptr [EAX + 0x952832]	66 8B 88 32 28 95 00	3	0xA	0x952832
00501855	get_basic_offense(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
005018a2	get_basic_offense(int,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
0050195a	get_basic_defense(int,int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
00501984	get_basic_defense(int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
0050199c	get_basic_defense(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005019a5	get_basic_defense(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
00501a63	get_basic_defense(int,int,int,int)	MOV	MOV CX,word ptr [ECX + 0x952832]	66 8B 89 32 28 95 00	3	0xA	0x952832
00501ad2	get_basic_defense(int,int,int,int)	MOV	MOV CX,word ptr [ECX + 0x952832]	66 8B 89 32 28 95 00	3	0xA	0x952832
00501b6f	get_basic_defense(int,int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
00501b90	get_basic_defense(int,int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
00501b9d	get_basic_defense(int,int,int,int)	MOV	MOV CX,word ptr [EDX + 0x952832]	66 8B 8A 32 28 95 00	3	0xA	0x952832
00501bec	get_basic_defense(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
00501c25	get_basic_defense(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00501c6b	get_basic_defense(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00501d07	get_basic_defense(int,int,int,int)	CMP	CMP word ptr [EDX + 0x952832],0x13	66 83 BA 32 28 95 00 13	3	0xA	0x952832
00501ddb	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00501e2c	battle_compute(int,int,int_*,int_*,int)	CMP	CMP word ptr [EAX*0x4 + 0x952832],SI	66 39 34 85 32 28 95 00	4	0xA	0x952832
00501e42	battle_compute(int,int,int_*,int_*,int)	CMP	CMP word ptr [EAX + 0x952832],SI	66 39 B0 32 28 95 00	3	0xA	0x952832
00501e5e	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00501e91	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00501ed0	battle_compute(int,int,int_*,int_*,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
00501fc6	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
005020bf	battle_compute(int,int,int_*,int_*,int)	CMP	CMP word ptr [EBX + 0x952832],0x13	66 83 BB 32 28 95 00 13	3	0xA	0x952832
00502136	battle_compute(int,int,int_*,int_*,int)	MOV	MOV CX,word ptr [EBX + 0x952832]	66 8B 8B 32 28 95 00	3	0xA	0x952832
0050216f	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ESI,word ptr [EDX + 0x95282a]	0F BF B2 2A 28 95 00	3	0x2	0x95282A
0050217d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EDX + 0x952828]	0F BF 92 28 28 95 00	3	0x0	0x952828
005021b3	battle_compute(int,int,int_*,int_*,int)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
00502205	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
0050228e	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050231d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
0050233d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005023e2	battle_compute(int,int,int_*,int_*,int)	TEST	TEST byte ptr [EBX + 0x95282c],0x20	F6 83 2C 28 95 00 20	2	0x4	0x95282C
005023ef	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
0050242f	battle_compute(int,int,int_*,int_*,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
005024fa	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
005025a8	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
00502665	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
00502765	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00502796	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00502849	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00502902	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
00502915	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
00502933	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
0050293d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
00502a79	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00502af6	battle_compute(int,int,int_*,int_*,int)	MOV	MOV CL,byte ptr [EDX + 0x952836]	8A 8A 36 28 95 00	2	0xE	0x952836
00502b4b	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00502b79	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
00502ba6	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x952828]	0F BF 98 28 28 95 00	3	0x0	0x952828
00502bad	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95282a]	0F BF 80 2A 28 95 00	3	0x2	0x95282A
00502bd5	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00502c03	battle_compute(int,int,int_*,int_*,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00502c34	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00502c7a	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00502ca6	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
00502cb4	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x952828]	0F BF B7 28 28 95 00	3	0x0	0x952828
00502cd3	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EBX,word ptr [ECX + 0x95282a]	0F BF 99 2A 28 95 00	3	0x2	0x95282A
00502cdd	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
00502dd5	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00502df3	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00502e05	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00502eb5	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00502ff1	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
00503003	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
0050303a	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952832]	0F BF 97 32 28 95 00	3	0xA	0x952832
005030dd	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
005030ef	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
0050312e	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005032c1	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00503318	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005034a5	battle_compute(int,int,int_*,int_*,int)	CMP	CMP AL,byte ptr [EDX + 0x952836]	3A 82 36 28 95 00	2	0xE	0x952836
0050352c	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005035cb	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
00503633	battle_compute(int,int,int_*,int_*,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00503641	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AX,word ptr [EAX + 0x952832]	66 8B 80 32 28 95 00	3	0xA	0x952832
00503878	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00503897	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00503939	battle_compute(int,int,int_*,int_*,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
00503a18	battle_compute(int,int,int_*,int_*,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
00503ad8	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EDX + 0x952836]	8A 82 36 28 95 00	2	0xE	0x952836
00503aed	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
00503b04	battle_compute(int,int,int_*,int_*,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
00503c55	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952832]	0F BF 90 32 28 95 00	3	0xA	0x952832
00503c94	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00503d30	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00503dc2	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00503e0c	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00503f25	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00503f51	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00503f8d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
00503fb2	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00503fdc	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050407d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005040c1	battle_compute(int,int,int_*,int_*,int)	MOV	MOV AL,byte ptr [EDX + 0x952836]	8A 82 36 28 95 00	2	0xE	0x952836
0050414f	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050417d	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00504223	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00504246	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005042e4	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
00504301	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
0050431e	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005043d0	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005043f0	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00504408	battle_compute(int,int,int_*,int_*,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0050450d	best_defender(int,int,int)	MOVSX	MOVSX EBX,word ptr [EDI + 0x95282a]	0F BF 9F 2A 28 95 00	3	0x2	0x95282A
00504514	best_defender(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
0050456d	best_defender(int,int,int)	MOV	MOV DI,word ptr [EDI + 0x95285a]	66 8B BF 5A 28 95 00	3	0x32	0x95285A
00504584	best_defender(int,int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005045af	best_defender(int,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
005045f4	best_defender(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDX*0x4 + 0x952832]	0F BF 14 95 32 28 95 00	4	0xA	0x952832
0050462d	best_defender(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
00504656	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00504680	best_defender(int,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0050469a	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005046c5	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
0050475f	best_defender(int,int,int)	MOVSX	MOVSX EDI,word ptr [EBX + 0x952832]	0F BF BB 32 28 95 00	3	0xA	0x952832
005047a9	best_defender(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00504840	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX*0x4 + 0x952832]	0F BF 04 9D 32 28 95 00	4	0xA	0x952832
00504878	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005048a7	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX*0x4 + 0x952832]	0F BF 04 9D 32 28 95 00	4	0xA	0x952832
005048d6	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX*0x4 + 0x952832]	0F BF 04 9D 32 28 95 00	4	0xA	0x952832
00504913	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00504987	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005049af	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX*0x4 + 0x952832]	0F BF 04 9D 32 28 95 00	4	0xA	0x952832
005049e5	best_defender(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00504a58	best_defender(int,int,int)	TEST	TEST byte ptr [EDI + 0x95282c],0x80	F6 87 2C 28 95 00 80	2	0x4	0x95282C
00504a7f	best_defender(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952858]	0F BF 83 58 28 95 00	3	0x30	0x952858
00505d97	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952836]	8A 8F 36 28 95 00	2	0xE	0x952836
00505da4	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00505ddd	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
00505deb	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x95282a]	0F BF 93 2A 28 95 00	3	0x2	0x95282A
00505df5	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
00505e41	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
00505eaf	battle_kill(int,int_*,int_*,int_*,int,int)	TEST	TEST byte ptr [EDI + 0x952830],0x20	F6 87 30 28 95 00 20	2	0x8	0x952830
00505ecc	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00505ed5	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
00505edb	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV byte ptr [EDI + 0x952838],0x0	C6 87 38 28 95 00 00	2	0x10	0x952838
00505ee2	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV byte ptr [EDI + 0x952836],AL	88 87 36 28 95 00	2	0xE	0x952836
00505eeb	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00505f19	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00505f2b	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
00505f31	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
00505f3f	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
00505f6b	battle_kill(int,int_*,int_*,int_*,int,int)	TEST	TEST byte ptr [EDI + 0x952830],0x20	F6 87 30 28 95 00 20	2	0x8	0x952830
00505f92	battle_kill(int,int_*,int_*,int_*,int,int)	TEST	TEST dword ptr [EDI + 0x95282c],0x800000	F7 87 2C 28 95 00 00 00 80 00	2	0x4	0x95282C
00505fc3	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952856]	0F BF 83 56 28 95 00	3	0x2E	0x952856
00505fce	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
00505fd5	battle_kill(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
00505fde	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
00506010	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
00506077	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
005060cb	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952836]	8A 8F 36 28 95 00	2	0xE	0x952836
005060db	battle_kill(int,int_*,int_*,int_*,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
00506141	battle_kill_stack(int,int_*,int_*,int_*,int,int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
00506157	battle_kill_stack(int,int_*,int_*,int_*,int,int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
0050617f	battle_kill_stack(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EDI,word ptr [EDX*0x4 + 0x952858]	0F BF 3C 95 58 28 95 00	4	0x30	0x952858
005061c5	battle_kill_chaff(int,int_*,int_*,int_*,int,int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
005061db	battle_kill_chaff(int,int_*,int_*,int_*,int,int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
005061fe	battle_kill_chaff(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00506205	battle_kill_chaff(int,int_*,int_*,int_*,int,int)	MOVSX	MOVSX EDI,word ptr [ECX + 0x952858]	0F BF B9 58 28 95 00	3	0x30	0x952858
0050624c	battle_kill_chaff(int,int_*,int_*,int_*,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00506261	battle_kill_chaff(int,int_*,int_*,int_*,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
005062c2	promote(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00506325	promote(int)	CMP	CMP byte ptr [ESI + 0x95284c],0x6	80 BE 4C 28 95 00 06	2	0x24	0x95284C
00506365	promote(int)	MOV	MOV CL,byte ptr [ESI + 0x95284c]	8A 8E 4C 28 95 00	2	0x24	0x95284C
00506377	promote(int)	MOV	MOV byte ptr [ESI + 0x95284c],CL	88 8E 4C 28 95 00	2	0x24	0x95284C
0050637f	promote(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
005063b6	promote(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005063d6	promote(int)	MOV	MOV SI,word ptr [ESI + 0x952832]	66 8B B6 32 28 95 00	3	0xA	0x952832
005064dc	invasions(int)	MOV	MOV ESI,0x95282a	BE 2A 28 95 00	1	0x2	0x95282A
00506675	interceptor(int,int,int,int)	MOV	MOV EBX,0x95282a	BB 2A 28 95 00	1	0x2	0x95282A
0050685e	interceptor(int,int,int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
00506865	interceptor(int,int,int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
00506a31	interceptor(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00506a38	interceptor(int,int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00506a44	interceptor(int,int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
00506a8c	battle_fight(int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
00506ac8	battle_fight(int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [ECX + 0x95282a]	0F BF 89 2A 28 95 00	3	0x2	0x95282A
00506b22	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDI*0x4 + 0x952832]	0F BF 0C BD 32 28 95 00	4	0xA	0x952832
00506b37	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI*0x4 + 0x952832]	0F BF 04 BD 32 28 95 00	4	0xA	0x952832
00506b7e	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
00506b85	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95282a]	0F BF 97 2A 28 95 00	3	0x2	0x95282A
00506b8c	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
00506ba4	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952832]	0F BF 97 32 28 95 00	3	0xA	0x952832
00506bc2	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00506c84	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00506ce5	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
00506d21	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00506d33	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00506d51	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
00506d65	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00506dce	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00506de4	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00506e13	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00506e6a	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
00506eab	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00506ef1	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
00506f10	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00506f4e	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
00506f6d	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00506f95	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ESI,word ptr [EDX + 0x952832]	0F BF B2 32 28 95 00	3	0xA	0x952832
00506fc4	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ESI,word ptr [EDX + 0x952832]	0F BF B2 32 28 95 00	3	0xA	0x952832
00507132	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
00507156	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00507180	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005071bd	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV ECX,dword ptr [EDI + 0x95282c]	8B 8F 2C 28 95 00	2	0x4	0x95282C
005071d8	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EDI + 0x95282c],ECX	89 8F 2C 28 95 00	2	0x4	0x95282C
005071f0	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00507269	battle_fight(int,int,int,int,int,int,int_*)	OR	OR dword ptr [EDI + 0x95282c],0x80000	81 8F 2C 28 95 00 00 00 08 00	2	0x4	0x95282C
005073a1	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
005073c5	battle_fight(int,int,int,int,int,int,int_*)	TEST	TEST dword ptr [EDI + 0x95282c],0x80000	F7 87 2C 28 95 00 00 00 08 00	2	0x4	0x95282C
005073df	battle_fight(int,int,int,int,int,int,int_*)	AND	AND dword ptr [EDI + 0x95282c],0xfffbffff	81 A7 2C 28 95 00 FF FF FB FF	2	0x4	0x95282C
005073e9	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00507410	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
0050743b	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EDI + 0x952850]	8A 97 50 28 95 00	2	0x28	0x952850
005074e6	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
005074ee	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EDI + 0x952850],CL	88 8F 50 28 95 00	2	0x28	0x952850
005074f4	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV ECX,dword ptr [EDI + 0x95282c]	8B 8F 2C 28 95 00	2	0x4	0x95282C
00507503	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EDI + 0x95282c],ECX	89 8F 2C 28 95 00	2	0x4	0x95282C
00507509	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00507512	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
0050752a	battle_fight(int,int,int,int,int,int,int_*)	OR	OR dword ptr [EDI + 0x95282c],0x40	83 8F 2C 28 95 00 40	2	0x4	0x95282C
00507531	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0050754f	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00507970	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00507977	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDX + 0x952832]	0F BF 8A 32 28 95 00	3	0xA	0x952832
00507af8	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00507b35	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
00507b3f	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DX,word ptr [ESI + 0x952830]	66 8B 96 30 28 95 00	3	0x8	0x952830
00507b5a	battle_fight(int,int,int,int,int,int,int_*)	TEST	TEST byte ptr [ESI + 0x95284f],AL	84 86 4F 28 95 00	2	0x27	0x95284F
00507c66	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
00507cec	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
00507d1b	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV ECX,dword ptr [EDX + 0x95282c]	8B 8A 2C 28 95 00	2	0x4	0x95282C
00507e3a	battle_fight(int,int,int,int,int,int,int_*)	SUB	SUB byte ptr [EAX + 0x952850],CL	28 88 50 28 95 00	2	0x28	0x952850
00507e45	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00507e4c	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00507e58	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
0050803a	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00508078	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EBX + 0x952838]	8A 8B 38 28 95 00	2	0x10	0x952838
00508097	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005080d5	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EDI + 0x952838]	8A 97 38 28 95 00	2	0x10	0x952838
005082bc	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [EBX + 0x952838]	8A 83 38 28 95 00	2	0x10	0x952838
005082cc	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [EDX + 0x952838]	8A 82 38 28 95 00	2	0x10	0x952838
00508312	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [EBX + 0x952850]	8A 83 50 28 95 00	2	0x28	0x952850
0050831a	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EBX + 0x952850],AL	88 83 50 28 95 00	2	0x28	0x952850
00508320	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EBX + 0x952839],0x0	C6 83 39 28 95 00 00	2	0x11	0x952839
00508327	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
00508337	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EBX + 0x95282c],EAX	89 83 2C 28 95 00	2	0x4	0x95282C
005083b5	battle_fight(int,int,int,int,int,int,int_*)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
005083be	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
005083c5	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV EAX,dword ptr [EDX + 0x95282c]	8B 82 2C 28 95 00	2	0x4	0x95282C
005083d0	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EDX + 0x95282c],EAX	89 82 2C 28 95 00	2	0x4	0x95282C
00508403	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [EDX + 0x952836]	8A 82 36 28 95 00	2	0xE	0x952836
0050840d	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [EDX + 0x952830]	66 8B 82 30 28 95 00	3	0x8	0x952830
0050841f	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV BL,byte ptr [EDX + 0x95284f]	8A 9A 4F 28 95 00	2	0x27	0x95284F
00508435	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
0050843f	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DX,word ptr [EBX + 0x952830]	66 8B 93 30 28 95 00	3	0x8	0x952830
00508453	battle_fight(int,int,int,int,int,int,int_*)	TEST	TEST byte ptr [EBX + 0x95284f],AL	84 83 4F 28 95 00	2	0x27	0x95284F
00508521	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
00508536	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
0050855f	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00508589	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
0050867e	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00508712	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00508786	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005087c7	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
00508804	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EAX + 0x95284f]	8A 88 4F 28 95 00	2	0x27	0x95284F
0050881c	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
005088a7	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EDI + 0x952838]	8A 97 38 28 95 00	2	0x10	0x952838
005088b8	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952858]	0F BF 87 58 28 95 00	3	0x30	0x952858
005088e6	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
005088ee	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EDI + 0x952838],AL	88 87 38 28 95 00	2	0x10	0x952838
005088f4	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV EDX,dword ptr [EDI + 0x95282c]	8B 97 2C 28 95 00	2	0x4	0x95282C
005088fd	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EDI + 0x95282c],EDX	89 97 2C 28 95 00	2	0x4	0x95282C
00508903	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0050891a	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EDI + 0x95284d],0x0	C6 87 4D 28 95 00 00	2	0x25	0x95284D
00508928	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00508930	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
00508a17	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952858]	0F BF B0 58 28 95 00	3	0x30	0x952858
00508a52	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00508a90	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
00508b03	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ESI,word ptr [EDI + 0x952858]	0F BF B7 58 28 95 00	3	0x30	0x952858
00508b9c	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EAX + 0x95284f]	8A 88 4F 28 95 00	2	0x27	0x95284F
00508ba7	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
00508ccb	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00508cf4	battle_fight(int,int,int,int,int,int,int_*)	TEST	TEST byte ptr [EBX + 0x95282c],0x40	F6 83 2C 28 95 00 40	2	0x4	0x95282C
00508d04	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
00508d5c	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
00508d79	battle_fight(int,int,int,int,int,int,int_*)	CMP	CMP byte ptr [EBX + 0x952839],0x2	80 BB 39 28 95 00 02	2	0x11	0x952839
00508dcf	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00508e0d	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EBX + 0x952838]	8A 93 38 28 95 00	2	0x10	0x952838
00508e3f	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00508e57	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00508ead	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DX,word ptr [EBX + 0x952832]	66 8B 93 32 28 95 00	3	0xA	0x952832
00508f30	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EBX + 0x952838]	8A 8B 38 28 95 00	2	0x10	0x952838
00508f61	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00508ff3	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050903a	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [EBX + 0x952838]	8A 8B 38 28 95 00	2	0x10	0x952838
0050907c	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005090a3	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005090da	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00509121	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00509141	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00509188	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
005091e4	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EDI + 0x952838]	8A 97 38 28 95 00	2	0x10	0x952838
005091ee	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EDI + 0x952838],DL	88 97 38 28 95 00	2	0x10	0x952838
00509262	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005092ac	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EDI + 0x952838]	8A 97 38 28 95 00	2	0x10	0x952838
005092f1	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00509338	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EDI + 0x952838]	8A 97 38 28 95 00	2	0x10	0x952838
0050937a	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005093c1	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
0050948b	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050955f	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DX,word ptr [EAX + 0x952832]	66 8B 90 32 28 95 00	3	0xA	0x952832
00509632	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV BL,byte ptr [EAX + 0x952838]	8A 98 38 28 95 00	2	0x10	0x952838
0050963a	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [EAX + 0x952838],BL	88 98 38 28 95 00	2	0x10	0x952838
005096b3	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005096fa	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00509745	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV BL,byte ptr [EAX + 0x952836]	8A 98 36 28 95 00	2	0xE	0x952836
0050974d	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
00509761	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [EAX + 0x95285a]	66 8B 80 5A 28 95 00	3	0x32	0x95285A
00509776	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
0050978e	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
005097a1	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [ESI + 0x952836],DL	88 96 36 28 95 00	2	0xE	0x952836
005097a7	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005097e5	battle_fight(int,int,int,int,int,int,int_*)	CMP	CMP DL,byte ptr [EBX + 0x952836]	3A 93 36 28 95 00	2	0xE	0x952836
005097f6	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV word ptr [ESI + 0x952856],AX	66 89 86 56 28 95 00	3	0x2E	0x952856
005097ff	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV word ptr [ESI + 0x952856],0xffff	66 C7 86 56 28 95 00 FF FF	3	0x2E	0x952856
00509815	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952858]	0F BF BE 58 28 95 00	3	0x30	0x952858
00509840	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00509856	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00509983	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005099ca	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00509ab7	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00509afe	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00509b47	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00509b8e	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00509bc6	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00509c0d	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00509c2f	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00509c76	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
00509cc9	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00509d10	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
00509d45	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00509d65	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00509d8d	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00509da6	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00509dcb	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00509e12	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
00509e4b	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00509e95	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
00509f2e	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00509f75	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00509f95	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00509fda	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV BL,byte ptr [EDX + 0x952838]	8A 9A 38 28 95 00	2	0x10	0x952838
0050a06c	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0050a08c	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0050a1be	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0050a203	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
0050a23a	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0050a2eb	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [EAX + 0x952856]	66 8B 88 56 28 95 00	3	0x2E	0x952856
0050a2fa	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0050a35a	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0050a3a2	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
0050a43f	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [EAX + 0x952856]	66 8B 88 56 28 95 00	3	0x2E	0x952856
0050a446	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV word ptr [EDX + 0x952856],CX	66 89 8A 56 28 95 00	3	0x2E	0x952856
0050a4ec	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0050a508	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
0050a556	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050a572	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0050a624	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0050a640	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
0050a68e	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050a6b7	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
0050a761	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0050a78f	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0050a80e	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0050a848	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050a866	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050a91c	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
0050a931	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
0050a954	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050a9c3	battle_fight(int,int,int,int,int,int,int_*)	CMP	CMP byte ptr [ECX + 0x952839],0x1	80 B9 39 28 95 00 01	2	0x11	0x952839
0050a9cc	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [ECX + 0x95283c]	66 8B 81 3C 28 95 00	3	0x14	0x95283C
0050aa13	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
0050aa33	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [ECX + 0x952838],AL	88 81 38 28 95 00	2	0x10	0x952838
0050aa3f	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [ECX + 0x952838],AL	88 81 38 28 95 00	2	0x10	0x952838
0050aa65	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0050aa89	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0050aaa9	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
0050aab4	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV byte ptr [ECX + 0x952838],DL	88 91 38 28 95 00	2	0x10	0x952838
0050aaba	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
0050aac4	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV dword ptr [ECX + 0x95282c],EDX	89 91 2C 28 95 00	2	0x4	0x95282C
0050aad1	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDI,word ptr [ECX + 0x952858]	0F BF B9 58 28 95 00	3	0x30	0x952858
0050aaf4	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [ECX + 0x95285a]	66 8B 81 5A 28 95 00	3	0x32	0x95285A
0050ab09	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
0050ab27	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0050ab2e	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EBX,word ptr [ESI + 0x952858]	0F BF 9E 58 28 95 00	3	0x30	0x952858
0050ab7a	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
0050ab91	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
0050ad20	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
0050af57	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050af78	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
0050afb4	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050afd5	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0050b06f	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050b090	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0050b0cc	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0050b0ed	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
0050b289	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
0050b293	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV CX,word ptr [ESI + 0x952830]	66 8B 8E 30 28 95 00	3	0x8	0x952830
0050b2b3	battle_fight(int,int,int,int,int,int,int_*)	MOV	MOV word ptr [ESI + 0x952830],DX	66 89 96 30 28 95 00	3	0x8	0x952830
0050b2c5	battle_fight(int,int,int,int,int,int,int_*)	OR	OR word ptr [ESI + 0x952830],AX	66 09 86 30 28 95 00	3	0x8	0x952830
0050b55a	battle_fight(int,int,int,int,int,int,int_*)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0050b900	FUN_0050b8f0	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
0050d11f	capture_base(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
0050d131	capture_base(int,int,int)	AND	AND dword ptr [EAX + 0x95282c],ECX	21 88 2C 28 95 00	2	0x4	0x95282C
0050d137	capture_base(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
0050d188	capture_base(int,int,int)	ADD	ADD ESI,0x95282a	81 C6 2A 28 95 00	2	0x2	0x95282A
0050e5d5	convoy(int,int)	MOVSX	MOVSX ECX,word ptr [EDX + 0x952856]	0F BF 8A 56 28 95 00	3	0x2E	0x952856
0050e5ef	convoy(int,int)	MOVSX	MOVSX EDX,word ptr [EDX + 0x952832]	0F BF 92 32 28 95 00	3	0xA	0x952832
0050f2c2	go_timer(int)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
0050f2d0	go_timer(int)	MOV	MOV EAX,dword ptr [EAX + 0x95282c]	8B 80 2C 28 95 00	2	0x4	0x95282C
0050f664	clear_group(void)	MOV	MOV EAX,0x95282c	B8 2C 28 95 00	1	0x4	0x95282C
00510602	selecting(int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
00510609	selecting(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
00510d12	ready_search(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00510d1c	ready_search(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
00510d23	ready_search(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
00510d8e	ready_search(int)	MOV	MOV BL,byte ptr [ECX*0x4 + 0x952836]	8A 1C 8D 36 28 95 00	3	0xE	0x952836
00510dc3	ready_search(int)	MOV	MOV EBX,0x95282c	BB 2C 28 95 00	1	0x4	0x95282C
00510ecc	ready_search(int)	MOV	MOV ECX,0x95282c	B9 2C 28 95 00	1	0x4	0x95282C
00510faa	ready(void)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
00510fbd	ready(void)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
00510fc4	ready(void)	MOVSX	MOVSX EBX,word ptr [EAX + 0x952828]	0F BF 98 28 28 95 00	3	0x0	0x952828
00511040	ready(void)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
0051104e	ready(void)	MOV	MOV EAX,dword ptr [EAX + 0x95282c]	8B 80 2C 28 95 00	2	0x4	0x95282C
0051107e	ready(void)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00511084	ready(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0051108d	ready(void)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005110b9	ready(void)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005110c0	ready(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
005111c9	ready(void)	MOV	MOV byte ptr [EDX*0x4 + 0x952852],0x0	C6 04 95 52 28 95 00 00	3	0x2A	0x952852
005111e0	ready(void)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005111e7	ready(void)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
00511207	ready(void)	MOV	MOV DL,byte ptr [ECX + 0x952839]	8A 91 39 28 95 00	2	0x11	0x952839
00511215	ready(void)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
00511249	ready(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
00511292	ready(void)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
005112b5	ready(void)	MOV	MOV word ptr [ECX*0x4 + 0x95283c],DX	66 89 14 8D 3C 28 95 00	4	0x14	0x95283C
005112d0	ready(void)	MOV	MOV word ptr [ECX*0x4 + 0x952844],DX	66 89 14 8D 44 28 95 00	4	0x1C	0x952844
005112ee	ready(void)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
005112fc	ready(void)	MOV	MOV AX,word ptr [ECX + 0x952830]	66 8B 81 30 28 95 00	3	0x8	0x952830
00511314	ready(void)	MOV	MOV DL,byte ptr [ECX + 0x952839]	8A 91 39 28 95 00	2	0x11	0x952839
00511322	ready(void)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
00511334	ready(void)	MOV	MOV word ptr [ECX + 0x952830],AX	66 89 81 30 28 95 00	3	0x8	0x952830
0051134a	ready(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0051138e	ready(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
00511395	ready(void)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
005113a5	ready(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
005113af	ready(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
005113d8	ready(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
005113e1	ready(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
0051140d	ready(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
00511414	ready(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
00511432	ready(void)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
0051143b	ready(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
00511642	set_move(int)	CMP	CMP byte ptr [EDX*0x4 + 0x952850],BL	38 1C 95 50 28 95 00	3	0x28	0x952850
0051166c	set_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
00511673	set_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005116f0	set_move(int)	MOV	MOV DL,byte ptr [EAX*0x4 + 0x952836]	8A 14 85 36 28 95 00	3	0xE	0x952836
005118b1	turn_hints(void)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952832]	0F BF 90 32 28 95 00	3	0xA	0x952832
00511bca	give_hints(void)	MOV	MOV EAX,dword ptr [EDX*0x4 + 0x95282c]	8B 04 95 2C 28 95 00	3	0x4	0x95282C
00511c1a	give_hints(void)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
00511c21	give_hints(void)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
00511c28	give_hints(void)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00511c3d	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00511c58	give_hints(void)	CMP	CMP word ptr [EAX + 0x952856],0x0	66 83 B8 56 28 95 00 00	3	0x2E	0x952856
00511c98	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952856]	0F BF 0C 85 56 28 95 00	4	0x2E	0x952856
00511ccb	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00511d1e	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00511d80	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
00511de1	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00511e1e	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952856]	0F BF 04 95 56 28 95 00	4	0x2E	0x952856
00511e51	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00511ea8	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
005121b2	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952856]	0F BF 04 95 56 28 95 00	4	0x2E	0x952856
0051223a	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00512261	give_hints(void)	MOV	MOV CL,byte ptr [EAX + 0x952838]	8A 88 38 28 95 00	2	0x10	0x952838
005122b5	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0051237d	give_hints(void)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
00512387	give_hints(void)	CMP	CMP word ptr [EAX + 0x952832],0x8	66 83 B8 32 28 95 00 08	3	0xA	0x952832
005123ca	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00512445	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00512478	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005124f5	give_hints(void)	MOVSX	MOVSX EDX,word ptr [EDX*0x4 + 0x952832]	0F BF 14 95 32 28 95 00	4	0xA	0x952832
00512582	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005125b5	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0051260e	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00512670	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005126c9	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
00512745	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
00512820	give_hints(void)	MOVSX	MOVSX EDX,word ptr [EAX*0x4 + 0x952832]	0F BF 14 85 32 28 95 00	4	0xA	0x952832
00512875	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005128ba	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005128e6	give_hints(void)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
00512982	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00512bda	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00512c47	give_hints(void)	MOV	MOV AX,word ptr [EDX*0x4 + 0x952832]	66 8B 04 95 32 28 95 00	4	0xA	0x952832
00512cf6	give_hints(void)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
00512d00	give_hints(void)	CMP	CMP word ptr [EDI + 0x952832],0xf	66 83 BF 32 28 95 00 0F	3	0xA	0x952832
00512d1b	give_hints(void)	CMP	CMP word ptr [EDI + 0x952832],0xe	66 83 BF 32 28 95 00 0E	3	0xA	0x952832
0051303f	give_hints(void)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
0051387d	give_hints(void)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
00513922	give_hints(void)	MOV	MOV CL,byte ptr [EDI*0x4 + 0x952836]	8A 0C BD 36 28 95 00	3	0xE	0x952836
00513955	give_hints(void)	MOV	MOV CL,byte ptr [EDI*0x4 + 0x952836]	8A 0C BD 36 28 95 00	3	0xE	0x952836
00513994	give_hints(void)	MOV	MOV CL,byte ptr [EDI*0x4 + 0x952836]	8A 0C BD 36 28 95 00	3	0xE	0x952836
00513bc8	veh_turn(void)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952839]	8A 04 95 39 28 95 00	3	0x11	0x952839
00513c26	veh_turn(void)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952839]	8A 04 95 39 28 95 00	3	0x11	0x952839
00513cae	veh_turn(void)	CMP	CMP byte ptr [EAX*0x4 + 0x952839],0x18	80 3C 85 39 28 95 00 18	3	0x11	0x952839
00513d6e	veh_turn(void)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00513d8e	veh_turn(void)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
00513dea	veh_turn(void)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
00513df9	veh_turn(void)	MOV	MOV DL,byte ptr [EAX + 0x952839]	8A 90 39 28 95 00	2	0x11	0x952839
00513e27	veh_turn(void)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00513e8b	veh_turn(void)	OR	OR dword ptr [EAX*0x4 + 0x95282c],0x4000000	81 0C 85 2C 28 95 00 00 00 00 04	3	0x4	0x95282C
00513f2e	veh_turn(void)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
00513f38	veh_turn(void)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
005140a1	human_turn(void)	MOV	MOV EAX,0x95282c	B8 2C 28 95 00	1	0x4	0x95282C
00517251	veh_key(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
00517258	veh_key(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
00517279	veh_key(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00517346	veh_key(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0051741b	veh_key(int,int,int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
00517656	veh_key(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
00517b31	on_key_click(int,int)	CMP	CMP byte ptr [ECX + 0x952839],DL	38 91 39 28 95 00	2	0x11	0x952839
00517b3d	on_key_click(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
00517b5f	on_key_click(int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
00517c8b	on_key_click(int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00517ca1	on_key_click(int,int)	MOV	MOV CL,byte ptr [EAX + 0x95283a]	8A 88 3A 28 95 00	2	0x12	0x95283A
00517cae	on_key_click(int,int)	MOV	MOV byte ptr [EAX + 0x95283a],CL	88 88 3A 28 95 00	2	0x12	0x95283A
00517cb9	on_key_click(int,int)	MOV	MOV byte ptr [EAX + 0x95283a],BL	88 98 3A 28 95 00	2	0x12	0x95283A
00517cd2	on_key_click(int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
00517ce4	on_key_click(int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x95283b],BL	88 1C 95 3B 28 95 00	3	0x13	0x95283B
00517cf7	on_key_click(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95283a],0x1	C6 04 8D 3A 28 95 00 01	3	0x12	0x95283A
00517d01	on_key_click(int,int)	MOV	MOV CL,byte ptr [EAX + 0x95283a]	8A 88 3A 28 95 00	2	0x12	0x95283A
00517d09	on_key_click(int,int)	MOV	MOV byte ptr [EAX + 0x95283a],CL	88 88 3A 28 95 00	2	0x12	0x95283A
00517d1e	on_key_click(int,int)	CMP	CMP byte ptr [EAX + 0x95283a],0x4	80 B8 3A 28 95 00 04	2	0x12	0x95283A
00517d27	on_key_click(int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00517d33	on_key_click(int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
00517d45	on_key_click(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95283a],BL	88 1C 8D 3A 28 95 00	3	0x12	0x95283A
00517da7	on_key_click(int,int)	MOV	MOV EDI,dword ptr [EAX*0x4 + 0x95282c]	8B 3C 85 2C 28 95 00	3	0x4	0x95282C
00517db4	on_key_click(int,int)	MOV	MOV dword ptr [EAX*0x4 + 0x95282c],EDI	89 3C 85 2C 28 95 00	3	0x4	0x95282C
00517dc7	on_key_click(int,int)	MOV	MOV byte ptr [EAX*0x4 + 0x952839],BL	88 1C 85 39 28 95 00	3	0x11	0x952839
00517e0a	on_key_click(int,int)	MOV	MOV AL,byte ptr [ECX*0x4 + 0x95283a]	8A 04 8D 3A 28 95 00	3	0x12	0x95283A
00517e17	on_key_click(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95283a],AL	88 04 8D 3A 28 95 00	3	0x12	0x95283A
00517e20	on_key_click(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95283a],BL	88 1C 8D 3A 28 95 00	3	0x12	0x95283A
00518a27	on_key_click(int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95285a]	0F BF 91 5A 28 95 00	3	0x32	0x95285A
00518a32	on_key_click(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952858]	0F BF 89 58 28 95 00	3	0x30	0x952858
00518a55	on_key_click(int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
00518a96	on_key_click(int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00518ae9	on_key_click(int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952828]	0F BF 04 95 28 28 95 00	4	0x0	0x952828
00518b2f	on_key_click(int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x95282a]	0F BF 04 95 2A 28 95 00	4	0x2	0x95282A
00518b6c	on_key_click(int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952858]	0F BF 91 58 28 95 00	3	0x30	0x952858
00518b73	on_key_click(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x95285a]	0F BF 89 5A 28 95 00	3	0x32	0x95285A
005194ae	on_key_click(int,int)	MOV	MOV ESI,0x95282a	BE 2A 28 95 00	1	0x2	0x95282A
00519c56	on_key_click(int,int)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
0051b367	on_key_click(int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x19	C6 04 95 39 28 95 00 19	3	0x11	0x952839
0051b37f	on_key_click(int,int)	MOV	MOV word ptr [EDX*0x4 + 0x95283c],AX	66 89 04 95 3C 28 95 00	4	0x14	0x95283C
0051b396	on_key_click(int,int)	MOV	MOV DX,word ptr [EAX + 0x952828]	66 8B 90 28 28 95 00	3	0x0	0x952828
0051b39d	on_key_click(int,int)	MOV	MOV word ptr [EAX + 0x95283e],DX	66 89 90 3E 28 95 00	3	0x16	0x95283E
0051b3b3	on_key_click(int,int)	MOV	MOV CX,word ptr [EAX + 0x95282a]	66 8B 88 2A 28 95 00	3	0x2	0x95282A
0051b3ba	on_key_click(int,int)	MOV	MOV word ptr [EAX + 0x952846],CX	66 89 88 46 28 95 00	3	0x1E	0x952846
0051c7f0	menu_proc(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00522ad2	alien_fauna(void)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
00522adc	alien_fauna(void)	MOV	MOV DX,word ptr [EAX + 0x952830]	66 8B 90 30 28 95 00	3	0x8	0x952830
00522af9	alien_fauna(void)	TEST	TEST byte ptr [EAX + 0x95284f],DL	84 90 4F 28 95 00	2	0x27	0x95284F
00522bba	alien_fauna(void)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00522bc4	alien_fauna(void)	MOV	MOV CX,word ptr [EAX + 0x952830]	66 8B 88 30 28 95 00	3	0x8	0x952830
00522be1	alien_fauna(void)	TEST	TEST byte ptr [EAX + 0x95284f],DL	84 90 4F 28 95 00	2	0x27	0x95284F
00522dc7	alien_fauna(void)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
00522dd1	alien_fauna(void)	MOV	MOV AX,word ptr [EDI + 0x952830]	66 8B 87 30 28 95 00	3	0x8	0x952830
00522de3	alien_fauna(void)	MOV	MOV AL,byte ptr [EDI + 0x95284f]	8A 87 4F 28 95 00	2	0x27	0x95284F
00522e74	alien_fauna(void)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
00522e7e	alien_fauna(void)	MOV	MOV AX,word ptr [EDI + 0x952830]	66 8B 87 30 28 95 00	3	0x8	0x952830
00522e97	alien_fauna(void)	TEST	TEST byte ptr [EDI + 0x95284f],AL	84 87 4F 28 95 00	2	0x27	0x95284F
00523d09	set_time_controls(void)	MOV	MOV EDX,0x95282c	BA 2C 28 95 00	1	0x4	0x95282C
0052606e	repair_phase(int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
0052607c	repair_phase(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
00526083	repair_phase(int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x95282a]	0F BF BE 2A 28 95 00	3	0x2	0x95282A
00526092	repair_phase(int)	MOV	MOV AL,byte ptr [ESI + 0x952838]	8A 86 38 28 95 00	2	0x10	0x952838
00526098	repair_phase(int)	MOV	MOV byte ptr [ESI + 0x952852],0x0	C6 86 52 28 95 00 00	2	0x2A	0x952852
0052609f	repair_phase(int)	MOV	MOV byte ptr [ESI + 0x952850],0x0	C6 86 50 28 95 00 00	2	0x28	0x952850
005260a6	repair_phase(int)	MOV	MOV EBX,dword ptr [ESI + 0x95282c]	8B 9E 2C 28 95 00	2	0x4	0x95282C
005260ba	repair_phase(int)	MOV	MOV dword ptr [ESI + 0x95282c],EBX	89 9E 2C 28 95 00	2	0x4	0x95282C
005260c0	repair_phase(int)	AND	AND byte ptr [ESI + 0x952831],0xef	80 A6 31 28 95 00 EF	2	0x9	0x952831
005260d2	repair_phase(int)	MOV	MOV EBX,dword ptr [ESI + 0x95282c]	8B 9E 2C 28 95 00	2	0x4	0x95282C
005260db	repair_phase(int)	MOV	MOV dword ptr [ESI + 0x95282c],EBX	89 9E 2C 28 95 00	2	0x4	0x95282C
005260e1	repair_phase(int)	MOV	MOV AX,word ptr [ESI + 0x952830]	66 8B 86 30 28 95 00	3	0x8	0x952830
005260f2	repair_phase(int)	MOV	MOV word ptr [ESI + 0x952830],AX	66 89 86 30 28 95 00	3	0x8	0x952830
005260f9	repair_phase(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
00526107	repair_phase(int)	MOV	MOV AX,word ptr [ESI + 0x952844]	66 8B 86 44 28 95 00	3	0x1C	0x952844
00526117	repair_phase(int)	MOV	MOV word ptr [ESI + 0x952844],AX	66 89 86 44 28 95 00	3	0x1C	0x952844
00526120	repair_phase(int)	MOV	MOV byte ptr [ESI + 0x952839],AL	88 86 39 28 95 00	2	0x11	0x952839
00526126	repair_phase(int)	MOV	MOV EDX,dword ptr [ESI + 0x95282c]	8B 96 2C 28 95 00	2	0x4	0x95282C
00526161	repair_phase(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0052619f	repair_phase(int)	MOV	MOV dword ptr [ESI + 0x95282c],EDX	89 96 2C 28 95 00	2	0x4	0x95282C
005261a5	repair_phase(int)	CMP	CMP word ptr [ESI + 0x952832],0x13	66 83 BE 32 28 95 00 13	3	0xA	0x952832
005261af	repair_phase(int)	MOV	MOV byte ptr [ESI + 0x952836],0x0	C6 86 36 28 95 00 00	2	0xE	0x952836
005261b6	repair_phase(int)	MOV	MOV AX,word ptr [ESI + 0x952832]	66 8B 86 32 28 95 00	3	0xA	0x952832
005261e1	repair_phase(int)	TEST	TEST byte ptr [ESI + 0x95282c],0x4	F6 86 2C 28 95 00 04	2	0x4	0x95282C
005261ee	repair_phase(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00526287	repair_phase(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00526331	repair_phase(int)	MOV	MOV CX,word ptr [ESI + 0x952832]	66 8B 8E 32 28 95 00	3	0xA	0x952832
00526378	repair_phase(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00526424	repair_phase(int)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
0052642d	repair_phase(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00526470	repair_phase(int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
005264a8	repair_phase(int)	MOV	MOV AX,word ptr [ESI + 0x95285a]	66 8B 86 5A 28 95 00	3	0x32	0x95285A
005264bc	repair_phase(int)	MOV	MOV AX,word ptr [EAX + 0x95285a]	66 8B 80 5A 28 95 00	3	0x32	0x95285A
005264dc	repair_phase(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
005264fa	repair_phase(int)	MOVSX	MOVSX EDI,word ptr [EDI + 0x952858]	0F BF BF 58 28 95 00	3	0x30	0x952858
00526542	repair_phase(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
0052654b	repair_phase(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005265fd	repair_phase(int)	CMP	CMP word ptr [ESI + 0x952832],0x40	66 83 BE 32 28 95 00 40	3	0xA	0x952832
0052663b	repair_phase(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
0052666b	repair_phase(int)	MOV	MOV byte ptr [ESI + 0x952838],AL	88 86 38 28 95 00	2	0x10	0x952838
0052668c	repair_phase(int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
0052669a	repair_phase(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005266e6	repair_phase(int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
00526719	repair_phase(int)	MOV	MOV ESI,0x952836	BE 36 28 95 00	1	0xE	0x952836
00527c45	control_turn(void)	MOV	MOV EAX,0x952836	B8 36 28 95 00	1	0xE	0x952836
00527c65	control_turn(void)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
00527c6c	control_turn(void)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
00527c7f	control_turn(void)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
00527c86	control_turn(void)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
0052a579	net_control_turn(void)	MOV	MOV ECX,0x952836	B9 36 28 95 00	1	0xE	0x952836
0052a597	net_control_turn(void)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
0052a59e	net_control_turn(void)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
0052de84	add_deletion(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0052de8b	add_deletion(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0052fb48	game_checksum(int_*)	MOV	MOV ESI,0x95282a	BE 2A 28 95 00	1	0x2	0x95282A
0053019f	game_checksum(int_*)	MOV	MOV ESI,0x952828	BE 28 28 95 00	1	0x0	0x952828
00531096	lock_veh(int_*,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0053109d	lock_veh(int_*,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0053117a	automated_lock(int_*,int)	MOVSX	MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]	0F BE 0C 95 39 28 95 00	4	0x11	0x952839
005312bc	automated_lock(int_*,int)	MOVSX	MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]	0F BE 0C 95 39 28 95 00	4	0x11	0x952839
00531846	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
00531873	order_veh(int,int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x95282a]	0F BF 98 2A 28 95 00	3	0x2	0x95282A
00531881	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
005318af	order_veh(int,int,int)	MOV	MOV byte ptr [EAX*0x4 + 0x952854],0x0	C6 04 85 54 28 95 00 00	3	0x2C	0x952854
00531964	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
005319d0	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
005319d7	order_veh(int,int,int)	MOV	MOV ESI,dword ptr [EAX + 0x95282c]	8B B0 2C 28 95 00	2	0x4	0x95282C
005319e3	order_veh(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ESI	89 B0 2C 28 95 00	2	0x4	0x95282C
00531aeb	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952850]	8A 14 8D 50 28 95 00	3	0x28	0x952850
00531b12	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00531baf	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],BL	88 98 39 28 95 00	2	0x11	0x952839
00531bb5	order_veh(int,int,int)	MOV	MOV ESI,dword ptr [EAX + 0x95282c]	8B B0 2C 28 95 00	2	0x4	0x95282C
00531bc1	order_veh(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ESI	89 B0 2C 28 95 00	2	0x4	0x95282C
00531cdb	order_veh(int,int,int)	TEST	TEST dword ptr [EDX*0x4 + 0x95282c],0x80000	F7 04 95 2C 28 95 00 00 00 08 00	3	0x4	0x95282C
00531d20	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00531d27	order_veh(int,int,int)	MOV	MOV ESI,dword ptr [EAX + 0x95282c]	8B B0 2C 28 95 00	2	0x4	0x95282C
00531d33	order_veh(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ESI	89 B0 2C 28 95 00	2	0x4	0x95282C
00531ff3	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
00532013	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952850]	8A 14 8D 50 28 95 00	3	0x28	0x952850
00532039	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
0053220d	veh_drop(int,int,int)	MOV	MOV AL,byte ptr [EDX + 0x952836]	8A 82 36 28 95 00	2	0xE	0x952836
005322a4	veh_drop(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
005322ab	veh_drop(int,int,int)	MOV	MOV EBX,dword ptr [EAX + 0x95282c]	8B 98 2C 28 95 00	2	0x4	0x95282C
005322b7	veh_drop(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],EBX	89 98 2C 28 95 00	2	0x4	0x95282C
00532382	veh_drop(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
005325a4	action(int,int)	MOV	MOV AL,byte ptr [EAX*0x4 + 0x952839]	8A 04 85 39 28 95 00	3	0x11	0x952839
005326f5	action(int,int)	MOVSX	MOVSX EDX,byte ptr [EAX*0x4 + 0x952839]	0F BE 14 85 39 28 95 00	4	0x11	0x952839
00532ae1	rebuild_vehicle_bits(void)	MOV	MOV ESI,0x95282a	BE 2A 28 95 00	1	0x2	0x95282A
00532b22	rebuild_vehicle_bits(void)	MOV	MOV CL,byte ptr [ECX*0x4 + 0x952836]	8A 0C 8D 36 28 95 00	3	0xE	0x952836
00532faa	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
00532fb1	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
00532fd5	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
00532fdc	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
00533594	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0053359b	synch(short,int,int,int,char_*,int,short)	LEA	LEA ECX,[EAX + 0x952828]	8D 88 28 28 95 00	2	0x0	0x952828
005335a4	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95282a]	0F BF 80 2A 28 95 00	3	0x2	0x95282A
005335b5	synch(short,int,int,int,char_*,int,short)	ADD	ADD ESI,0x952828	81 C6 28 28 95 00	2	0x0	0x952828
00533979	synch(short,int,int,int,char_*,int,short)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
00533987	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
0053399e	synch(short,int,int,int,char_*,int,short)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00533dc1	synch(short,int,int,int,char_*,int,short)	CMP	CMP EAX,0x952830	3D 30 28 95 00	1	0x8	0x952830
005367ae	process_message(char_*,ulong,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005368e9	process_message(char_*,ulong,int)	MOVSX	MOVSX ECX,byte ptr [EDX*0x4 + 0x952839]	0F BE 0C 95 39 28 95 00	4	0x11	0x952839
00536a2f	process_message(char_*,ulong,int)	MOV	MOV byte ptr [ECX*0x4 + 0x952839],DL	88 14 8D 39 28 95 00	3	0x11	0x952839
0053afae	diplomacy_check(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
0053c38f	pact_withdraw(int,int)	MOV	MOV ESI,0x95282a	BE 2A 28 95 00	1	0x2	0x95282A
00548e1f	dont_withdrawal(int,int)	MOV	MOV EBX,0x952832	BB 32 28 95 00	1	0xA	0x952832
00548f9f	do_withdrawal(int,int)	MOV	MOV ESI,0x952828	BE 28 28 95 00	1	0x0	0x952828
0054b9e4	battle_plans(int,int)	MOV	MOV ECX,0x95282c	B9 2C 28 95 00	1	0x4	0x95282C
0054ce96	value_of_base(int,int,int,int,int)	MOV	MOV AX,word ptr [EAX + 0x95285a]	66 8B 80 5A 28 95 00	3	0x32	0x95285A
0054ceaa	value_of_base(int,int,int,int,int)	MOV	MOV AX,word ptr [EDX + 0x95285a]	66 8B 82 5A 28 95 00	3	0x32	0x95285A
0054cec4	value_of_base(int,int,int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
0054cece	value_of_base(int,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952832]	0F BF 90 32 28 95 00	3	0xA	0x952832
0054cee7	value_of_base(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952858]	0F BF 88 58 28 95 00	3	0x30	0x952858
0054d031	give_a_base(int,int)	ADD	ADD ESI,0x952832	81 C6 32 28 95 00	2	0xA	0x952832
0054d3ab	give_a_base(int,int)	ADD	ADD EDI,0x952856	81 C7 56 28 95 00	2	0x2E	0x952856
005593ff	pick_top_veh(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
00559415	pick_top_veh(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
00559456	pick_top_veh(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
00559460	pick_top_veh(int)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
00559488	pick_top_veh(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
005594b0	pick_top_veh(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
005594d3	pick_top_veh(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
00559542	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
00559572	veh_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0055974e	veh_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005597fc	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV DI,word ptr [EDI + 0x952832]	66 8B BF 32 28 95 00	3	0xA	0x952832
005599c0	veh_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00559a01	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952850]	8A 91 50 28 95 00	2	0x28	0x952850
00559a2f	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV CL,byte ptr [EDX + 0x952850]	8A 8A 50 28 95 00	2	0x28	0x952850
00559c30	veh_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00559c75	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952838]	8A 96 38 28 95 00	2	0x10	0x952838
00559e3d	veh_draw(Buffer_*,int,int,int,int,int,int)	MOVSX	MOVSX EAX,byte ptr [ECX + 0x952839]	0F BE 81 39 28 95 00	3	0x11	0x952839
00559f50	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
00559f6c	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
00559f91	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
00559fa0	veh_draw(Buffer_*,int,int,int,int,int,int)	CMP	CMP byte ptr [ESI + 0x95284e],0xb	80 BE 4E 28 95 00 0B	2	0x26	0x95284E
00559fba	veh_draw(Buffer_*,int,int,int,int,int,int)	TEST	TEST dword ptr [ESI + 0x95282c],EDI	85 BE 2C 28 95 00	2	0x4	0x95282C
00559fc2	veh_draw(Buffer_*,int,int,int,int,int,int)	CMP	CMP byte ptr [ESI + 0x95284e],0xa	80 BE 4E 28 95 00 0A	2	0x26	0x95284E
0055a031	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952853]	8A 96 53 28 95 00	2	0x2B	0x952853
0055a040	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
0055a089	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
0055a0c2	veh_draw(Buffer_*,int,int,int,int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952853]	8A 8E 53 28 95 00	2	0x2B	0x952853
0055a0d4	veh_draw(Buffer_*,int,int,int,int,int,int)	TEST	TEST dword ptr [ESI + 0x95282c],0x8000000	F7 86 2C 28 95 00 00 00 00 08	2	0x4	0x95282C
0055a525	veh_scoot(int,int,int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952851],AL	88 04 95 51 28 95 00	3	0x29	0x952851
0055a548	veh_scoot(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
0055a59a	veh_scoot(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0055a623	veh_scoot(int,int,int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0055a63a	veh_scoot(int,int,int,int,int)	MOV	MOV byte ptr [ESI + 0x952851],DL	88 96 51 28 95 00	2	0x29	0x952851
0055ecd1	territory(int,int,int,int_*,int_*)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
00560ae6	go_to(int,char,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
00560aed	go_to(int,char,int,int)	MOV	MOV byte ptr [EAX + 0x952853],DL	88 90 53 28 95 00	2	0x2B	0x952853
00560af7	go_to(int,char,int,int)	MOV	MOV word ptr [EAX + 0x95283c],CX	66 89 88 3C 28 95 00	3	0x14	0x95283C
00560afe	go_to(int,char,int,int)	MOV	MOV word ptr [EAX + 0x952844],DX	66 89 90 44 28 95 00	3	0x1C	0x952844
00560b05	go_to(int,char,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00560b1c	go_to(int,char,int,int)	MOV	MOV byte ptr [EAX + 0x95284d],0x0	C6 80 4D 28 95 00 00	2	0x25	0x95284D
00562569	enemy_strategy(int)	MOV	MOV EBX,0x952832	BB 32 28 95 00	1	0xA	0x952832
005625d1	enemy_strategy(int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
005625d7	enemy_strategy(int)	LEA	LEA EAX,[EAX + 0x95282c]	8D 80 2C 28 95 00	2	0x4	0x95282C
005625f2	enemy_strategy(int)	MOV	MOV ECX,0x952832	B9 32 28 95 00	1	0xA	0x952832
0056290a	enemy_strategy(int)	MOV	MOV ECX,0x95282c	B9 2C 28 95 00	1	0x4	0x95282C
00562f44	enemy_strategy(int)	MOV	MOV ECX,0x95282c	B9 2C 28 95 00	1	0x4	0x95282C
00563806	enemy_strategy(int)	MOV	MOV ESI,0x95282a	BE 2A 28 95 00	1	0x2	0x95282A
00563a40	enemy_strategy(int)	ADD	ADD EAX,0x952853	05 53 28 95 00	1	0x2B	0x952853
0056456b	enemy_strategy(int)	MOV	MOV dword ptr [EBP + -0x1c],0x952832	C7 45 E4 32 28 95 00	3	0xA	0x952832
005648a7	set_course(int,char,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
005648ae	set_course(int,char,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
00564914	set_course(int,char,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
0056491b	set_course(int,char,int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952828]	0F BF BE 28 28 95 00	3	0x0	0x952828
00564947	set_course(int,char,int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x18	C6 86 39 28 95 00 18	2	0x11	0x952839
0056494e	set_course(int,char,int,int)	MOV	MOV byte ptr [ESI + 0x952853],CL	88 8E 53 28 95 00	2	0x2B	0x952853
00564954	set_course(int,char,int,int)	MOV	MOV word ptr [ESI + 0x95283c],DX	66 89 96 3C 28 95 00	3	0x14	0x95283C
0056495b	set_course(int,char,int,int)	MOV	MOV word ptr [ESI + 0x952844],AX	66 89 86 44 28 95 00	3	0x1C	0x952844
00564962	set_course(int,char,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0056497d	set_course(int,char,int,int)	MOV	MOV byte ptr [ESI + 0x95284d],0x0	C6 86 4D 28 95 00 00	2	0x25	0x95284D
00564b30	set_course(int,char,int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x18	C6 86 39 28 95 00 18	2	0x11	0x952839
00564b37	set_course(int,char,int,int)	MOV	MOV byte ptr [ESI + 0x952853],DL	88 96 53 28 95 00	2	0x2B	0x952853
00564b3d	set_course(int,char,int,int)	MOV	MOV word ptr [ESI + 0x95283c],BX	66 89 9E 3C 28 95 00	3	0x14	0x95283C
00564b44	set_course(int,char,int,int)	MOV	MOV word ptr [ESI + 0x952844],AX	66 89 86 44 28 95 00	3	0x1C	0x952844
00564b4b	set_course(int,char,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00564b62	set_course(int,char,int,int)	MOV	MOV byte ptr [ESI + 0x95284d],0x0	C6 86 4D 28 95 00 00	2	0x25	0x95284D
00565f3e	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EDI,word ptr [EBX + 0x952828]	0F BF BB 28 28 95 00	3	0x0	0x952828
00565f50	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00565f58	compute_odds(int,int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95282a]	0F BF B3 2A 28 95 00	3	0x2	0x95282A
00565fea	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0056606d	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0056608c	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00566187	compute_odds(int,int,int,int,int)	TEST	TEST byte ptr [EBX + 0x952830],0x20	F6 83 30 28 95 00 20	2	0x8	0x952830
005661aa	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00566220	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00566287	compute_odds(int,int,int,int,int)	MOV	MOV BL,byte ptr [EBX + 0x952839]	8A 9B 39 28 95 00	2	0x11	0x952839
00566308	compute_odds(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
0056636b	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005663f1	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00566498	compute_odds(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
00566509	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00566568	compute_odds(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0056664d	alien_base(int,int,int)	CMP	CMP word ptr [EAX + 0x952832],0xe	66 83 B8 32 28 95 00 0E	3	0xA	0x952832
0056676e	alien_base(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952856]	0F BF 91 56 28 95 00	3	0x2E	0x952856
00566789	alien_base(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x95284e]	8A 91 4E 28 95 00	2	0x26	0x95284E
0056683c	alien_move(int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
00566859	alien_move(int)	MOV	MOV DX,word ptr [ESI + 0x952830]	66 8B 96 30 28 95 00	3	0x8	0x952830
0056687d	alien_move(int)	CMP	CMP word ptr [ESI + 0x952832],0xc	66 83 BE 32 28 95 00 0C	3	0xA	0x952832
00566899	alien_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
005668a0	alien_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
0056694f	alien_move(int)	MOV	MOV CL,byte ptr [ESI + 0x95284d]	8A 8E 4D 28 95 00	2	0x25	0x95284D
0056695a	alien_move(int)	MOV	MOV byte ptr [ESI + 0x95284d],CL	88 8E 4D 28 95 00	2	0x25	0x95284D
00566989	alien_move(int)	CMP	CMP byte ptr [ESI + 0x95284d],0x18	80 BE 4D 28 95 00 18	2	0x25	0x95284D
00566b1b	alien_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
00566b28	alien_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952844]	0F BF B8 44 28 95 00	3	0x1C	0x952844
00566b2f	alien_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95283c]	0F BF 88 3C 28 95 00	3	0x14	0x95283C
00566baf	alien_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0x0	C6 83 39 28 95 00 00	2	0x11	0x952839
00566bb6	alien_move(int)	MOV	MOV EDX,dword ptr [EBX + 0x95282c]	8B 93 2C 28 95 00	2	0x4	0x95282C
00566bc3	alien_move(int)	MOV	MOV dword ptr [EBX + 0x95282c],EDX	89 93 2C 28 95 00	2	0x4	0x95282C
00566c06	alien_move(int)	MOV	MOV AX,word ptr [EAX + 0x95285a]	66 8B 80 5A 28 95 00	3	0x32	0x95285A
00566c1b	alien_move(int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
00566c35	alien_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00566c3c	alien_move(int)	OR	OR byte ptr [EAX + 0x95284f],DL	08 90 4F 28 95 00	2	0x27	0x95284F
00566c46	alien_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952858]	0F BF 88 58 28 95 00	3	0x30	0x952858
00566c70	alien_move(int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
00566c7a	alien_move(int)	MOV	MOV AX,word ptr [ESI + 0x952830]	66 8B 86 30 28 95 00	3	0x8	0x952830
00566c8c	alien_move(int)	MOV	MOV AL,byte ptr [ESI + 0x95284f]	8A 86 4F 28 95 00	2	0x27	0x95284F
00566cdf	alien_move(int)	CMP	CMP word ptr [ESI + 0x952832],0xf	66 83 BE 32 28 95 00 0F	3	0xA	0x952832
00566d22	alien_move(int)	CMP	CMP word ptr [ESI + 0x952832],0xf	66 83 BE 32 28 95 00 0F	3	0xA	0x952832
00566dec	alien_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00566e16	alien_move(int)	MOV	MOV CL,byte ptr [ESI + 0x95284d]	8A 8E 4D 28 95 00	2	0x25	0x95284D
00566e76	alien_move(int)	MOV	MOV CL,byte ptr [ESI + 0x95284e]	8A 8E 4E 28 95 00	2	0x26	0x95284E
00566e8a	alien_move(int)	CMP	CMP word ptr [ESI + 0x952832],0xe	66 83 BE 32 28 95 00 0E	3	0xA	0x952832
00566ead	alien_move(int)	MOV	MOV word ptr [ESI + 0x95283c],DX	66 89 96 3C 28 95 00	3	0x14	0x95283C
00566eb4	alien_move(int)	MOV	MOV word ptr [ESI + 0x952844],AX	66 89 86 44 28 95 00	3	0x1C	0x952844
00566ec5	alien_move(int)	MOVSX	MOVSX ECX,byte ptr [ESI + 0x952851]	0F BE 8E 51 28 95 00	3	0x29	0x952851
00566ecf	alien_move(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
00567369	alien_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056739d	alien_move(int)	MOV	MOV CX,word ptr [ECX + 0x952832]	66 8B 89 32 28 95 00	3	0xA	0x952832
0056741b	alien_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
005674d0	alien_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
005674de	alien_move(int)	MOV	MOV AX,word ptr [EAX + 0x952832]	66 8B 80 32 28 95 00	3	0xA	0x952832
00567532	alien_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005675a6	alien_move(int)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00567652	alien_move(int)	MOV	MOV AL,byte ptr [EBX + 0x952838]	8A 83 38 28 95 00	2	0x10	0x952838
005676c3	alien_move(int)	MOV	MOV CL,byte ptr [EBX + 0x952850]	8A 8B 50 28 95 00	2	0x28	0x952850
005676e9	alien_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005677af	alien_move(int)	MOV	MOV AL,byte ptr [EBX + 0x952850]	8A 83 50 28 95 00	2	0x28	0x952850
005677b9	alien_move(int)	MOV	MOV AL,byte ptr [EBX + 0x952838]	8A 83 38 28 95 00	2	0x10	0x952838
00567879	alien_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0x58	C6 83 39 28 95 00 58	2	0x11	0x952839
00567896	alien_move(int)	MOV	MOV word ptr [EBX + 0x95283c],AX	66 89 83 3C 28 95 00	3	0x14	0x95283C
005678a9	alien_move(int)	MOV	MOV word ptr [EBX + 0x952844],AX	66 89 83 44 28 95 00	3	0x1C	0x952844
005678d8	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
005678e4	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95283c]	0F BF 8E 3C 28 95 00	3	0x14	0x95283C
005678f2	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952844]	0F BF 86 44 28 95 00	3	0x1C	0x952844
00567908	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00567932	air_power(int,int,int,int_*,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
00567966	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005679b4	air_power(int,int,int,int_*,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
005679d7	air_power(int,int,int,int_*,int_*)	MOV	MOV CL,byte ptr [EDX + 0x952838]	8A 8A 38 28 95 00	2	0x10	0x952838
005679fe	air_power(int,int,int,int_*,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
00567a2f	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00567a57	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [ECX + 0x95284d]	8A 81 4D 28 95 00	2	0x25	0x95284D
00567a80	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00567aae	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [EDX + 0x95284d]	8A 82 4D 28 95 00	2	0x25	0x95284D
00567ac6	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
00567ade	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [EDX + 0x95282c]	8B 8A 2C 28 95 00	2	0x4	0x95282C
00567aed	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x95284e],0xb	80 BA 4E 28 95 00 0B	2	0x26	0x95284E
00567afa	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x95284e],0xc	80 BA 4E 28 95 00 0C	2	0x26	0x95284E
00567b03	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [EDX + 0x952838]	8A 82 38 28 95 00	2	0x10	0x952838
00567b2c	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x95284e],0xa	80 BA 4E 28 95 00 0A	2	0x26	0x95284E
00567d10	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
00567d17	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x61	C6 81 53 28 95 00 61	2	0x2B	0x952853
00567d1e	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],AX	66 89 81 3C 28 95 00	3	0x14	0x95283C
00567d25	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],DX	66 89 91 44 28 95 00	3	0x1C	0x952844
00567d2c	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00567d49	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
00567e32	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
00567e39	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x63	C6 81 53 28 95 00 63	2	0x2B	0x952853
00567e54	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
00567e5b	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],AX	66 89 81 44 28 95 00	3	0x1C	0x952844
00567e62	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00567e7f	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
00567e93	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
00567ead	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0056837f	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
00568386	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952853],0x4d	C6 80 53 28 95 00 4D	2	0x2B	0x952853
0056838d	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x95283c],CX	66 89 88 3C 28 95 00	3	0x14	0x95283C
00568394	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x952844],DX	66 89 90 44 28 95 00	3	0x1C	0x952844
0056839b	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
005683b5	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x95284d],0x0	C6 80 4D 28 95 00 00	2	0x25	0x95284D
005683e1	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
005683e8	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x6d	C6 81 53 28 95 00 6D	2	0x2B	0x952853
005683ef	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
005683f6	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],BX	66 89 99 44 28 95 00	3	0x1C	0x952844
005683fd	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0056841a	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
00568803	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
0056880a	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952853],0x4d	C6 80 53 28 95 00 4D	2	0x2B	0x952853
00568811	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x95283c],CX	66 89 88 3C 28 95 00	3	0x14	0x95283C
00568818	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x952844],DX	66 89 90 44 28 95 00	3	0x1C	0x952844
0056881f	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00568839	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x95284d],0x0	C6 80 4D 28 95 00 00	2	0x25	0x95284D
0056885e	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
00568865	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x6d	C6 81 53 28 95 00 6D	2	0x2B	0x952853
0056886c	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
00568873	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],BX	66 89 99 44 28 95 00	3	0x1C	0x952844
0056887a	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00568895	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
00568915	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
0056894f	air_power(int,int,int,int_*,int_*)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
00568980	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
00568987	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
00568997	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [EBX + 0x952839]	8A 83 39 28 95 00	2	0x11	0x952839
005689af	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
005689c1	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
005689eb	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952828]	0F BF 83 28 28 95 00	3	0x0	0x952828
00568a02	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDI,word ptr [EBX + 0x95282a]	0F BF BB 2A 28 95 00	3	0x2	0x95282A
00568a23	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952828]	0F BF 83 28 28 95 00	3	0x0	0x952828
00568a7e	air_power(int,int,int,int_*,int_*)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
00568a88	air_power(int,int,int,int_*,int_*)	MOV	MOV AX,word ptr [EBX + 0x952830]	66 8B 83 30 28 95 00	3	0x8	0x952830
00568a9d	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [EBX + 0x95284f]	8A 83 4F 28 95 00	2	0x27	0x95284F
00568ad3	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00568b00	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
00568b07	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
00568c7c	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
00568c8a	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
00568cae	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
00568cb5	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
00568d8f	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
00568d9b	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
00568e2d	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x95282a]	0F BF 93 2A 28 95 00	3	0x2	0x95282A
00568e40	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
00568f3a	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952828]	0F BF 83 28 28 95 00	3	0x0	0x952828
00568f47	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDI,word ptr [EBX + 0x95282a]	0F BF BB 2A 28 95 00	3	0x2	0x95282A
00568fa3	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
00568faa	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952853],0x4d	C6 80 53 28 95 00 4D	2	0x2B	0x952853
00568fb1	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x95283c],DX	66 89 90 3C 28 95 00	3	0x14	0x95283C
00568fb8	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x952844],CX	66 89 88 44 28 95 00	3	0x1C	0x952844
00568fbf	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00568fd9	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
00568ff7	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952828]	0F BF 93 28 28 95 00	3	0x0	0x952828
00568ffe	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
00569005	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
0056900c	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x6d	C6 81 53 28 95 00 6D	2	0x2B	0x952853
00569013	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
0056901a	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],AX	66 89 81 44 28 95 00	3	0x1C	0x952844
00569021	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00569038	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
00569057	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
00569064	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
00569072	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95283c]	0F BF 8F 3C 28 95 00	3	0x14	0x95283C
005690af	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952844]	0F BF 8F 44 28 95 00	3	0x1C	0x952844
005690b8	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
005690bf	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x95284f],0x0	C6 87 4F 28 95 00 00	2	0x27	0x95284F
005690ed	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
005690f4	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00569186	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95283c]	0F BF 8F 3C 28 95 00	3	0x14	0x95283C
005691ab	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
00569223	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x95284f],0x0	C6 87 4F 28 95 00 00	2	0x27	0x95284F
0056923b	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x952851],BL	88 9F 51 28 95 00	2	0x29	0x952851
0056924d	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00569397	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDX + 0x95284f],0x0	C6 82 4F 28 95 00 00	2	0x27	0x95284F
005693be	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005693dc	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [ESI + 0x95284e],0xc	80 BE 4E 28 95 00 0C	2	0x26	0x95284E
00569424	air_power(int,int,int,int_*,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
00569435	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056946f	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
0056947b	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005694eb	air_power(int,int,int,int_*,int_*)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
00569521	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00569564	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
0056956d	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EBX,word ptr [ESI + 0x95282a]	0F BF 9E 2A 28 95 00	3	0x2	0x95282A
00569601	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
00569616	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
00569624	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
00569664	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDI,word ptr [ESI + 0x95282a]	0F BF BE 2A 28 95 00	3	0x2	0x95282A
00569685	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
005696d9	air_power(int,int,int,int_*,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
005696e3	air_power(int,int,int,int_*,int_*)	MOV	MOV AX,word ptr [ESI + 0x952830]	66 8B 86 30 28 95 00	3	0x8	0x952830
005696f5	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [ESI + 0x95284f]	8A 86 4F 28 95 00	2	0x27	0x95284F
0056971c	air_power(int,int,int,int_*,int_*)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
00569735	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00569761	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00569778	air_power(int,int,int,int_*,int_*)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00569783	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [ECX + 0x95284e],0xb	80 B9 4E 28 95 00 0B	2	0x26	0x95284E
00569790	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
00569797	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
005697c7	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005697d5	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
0056980c	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00569888	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
0056989f	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
005698aa	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x95284e],0xc	80 B8 4E 28 95 00 0C	2	0x26	0x95284E
005698cd	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005698e8	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005698f6	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
00569966	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
0056996d	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
00569987	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
0056998e	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
005699c0	air_power(int,int,int,int_*,int_*)	MOV	MOV EAX,dword ptr [EDX + 0x95282c]	8B 82 2C 28 95 00	2	0x4	0x95282C
005699cd	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x95284e],0xc	80 B8 4E 28 95 00 0C	2	0x26	0x95284E
005699d6	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
005699e4	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
00569a43	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
00569a53	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
00569aa8	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
00569ab6	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
00569b4a	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00569b74	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952828]	0F BF B1 28 28 95 00	3	0x0	0x952828
00569b7b	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
00569b82	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDX + 0x952839],0x18	C6 82 39 28 95 00 18	2	0x11	0x952839
00569b89	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDX + 0x952853],0x61	C6 82 53 28 95 00 61	2	0x2B	0x952853
00569b90	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EDX + 0x95283c],SI	66 89 B2 3C 28 95 00	3	0x14	0x95283C
00569b97	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EDX + 0x952844],AX	66 89 82 44 28 95 00	3	0x1C	0x952844
00569b9e	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00569bb5	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDX + 0x95284d],0x0	C6 82 4D 28 95 00 00	2	0x25	0x95284D
00569bbf	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
00569bd1	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ECX + 0x95282a]	0F BF 89 2A 28 95 00	3	0x2	0x95282A
00569bed	air_power(int,int,int,int_*,int_*)	MOV	MOV EDX,dword ptr [EBX + 0x95282c]	8B 93 2C 28 95 00	2	0x4	0x95282C
00569bfb	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EBX + 0x95284e],0xb	80 BB 4E 28 95 00 0B	2	0x26	0x95284E
00569c0b	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00569c2d	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x95284e],0xc	80 BA 4E 28 95 00 0C	2	0x26	0x95284E
00569c3f	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952828]	0F BF 81 28 28 95 00	3	0x0	0x952828
00569c46	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ECX + 0x95282a]	0F BF 89 2A 28 95 00	3	0x2	0x95282A
00569cf4	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EBX + 0x952839],0x18	C6 83 39 28 95 00 18	2	0x11	0x952839
00569cfb	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EBX + 0x952853],0x61	C6 83 53 28 95 00 61	2	0x2B	0x952853
00569d02	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EBX + 0x95283c],CX	66 89 8B 3C 28 95 00	3	0x14	0x95283C
00569d0c	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EBX + 0x952844],DX	66 89 93 44 28 95 00	3	0x1C	0x952844
00569d13	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00569d2a	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EBX + 0x95284d],0x0	C6 83 4D 28 95 00 00	2	0x25	0x95284D
00569d4f	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EBX + 0x952839],0x18	80 BB 39 28 95 00 18	2	0x11	0x952839
00569d67	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00569da7	air_power(int,int,int,int_*,int_*)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00569db8	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [ECX + 0x95284e],0xb	80 B9 4E 28 95 00 0B	2	0x26	0x95284E
00569dd5	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00569ea7	air_power(int,int,int,int_*,int_*)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
00569ed5	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00569f01	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00569fb9	air_power(int,int,int,int_*,int_*)	TEST	TEST byte ptr [EBX + 0x95284f],DL	84 93 4F 28 95 00	2	0x27	0x95284F
00569fe7	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00569ffd	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0056a08a	air_power(int,int,int,int_*,int_*)	MOV	MOV BL,byte ptr [EBX + 0x952839]	8A 9B 39 28 95 00	2	0x11	0x952839
0056a0bb	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
0056a0c2	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EAX + 0x952853],0x4c	C6 80 53 28 95 00 4C	2	0x2B	0x952853
0056a0c9	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x95283c],DI	66 89 B8 3C 28 95 00	3	0x14	0x95283C
0056a0d0	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EAX + 0x952844],CX	66 89 88 44 28 95 00	3	0x1C	0x952844
0056a0d7	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056a0f1	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
0056a111	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
0056a131	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
0056a13a	air_power(int,int,int,int_*,int_*)	MOV	MOV DX,word ptr [ECX + 0x95283e]	66 8B 91 3E 28 95 00	3	0x16	0x95283E
0056a141	air_power(int,int,int,int_*,int_*)	CMP	CMP word ptr [ECX + 0x952828],DX	66 39 91 28 28 95 00	3	0x0	0x952828
0056a14a	air_power(int,int,int,int_*,int_*)	MOV	MOV AX,word ptr [ECX + 0x95282a]	66 8B 81 2A 28 95 00	3	0x2	0x95282A
0056a151	air_power(int,int,int,int_*,int_*)	CMP	CMP AX,word ptr [ECX + 0x952846]	66 3B 81 46 28 95 00	3	0x1E	0x952846
0056a15a	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952846]	0F BF 81 46 28 95 00	3	0x1E	0x952846
0056a164	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
0056a16b	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x6c	C6 81 53 28 95 00 6C	2	0x2B	0x952853
0056a172	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
0056a179	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],AX	66 89 81 44 28 95 00	3	0x1C	0x952844
0056a180	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0056a197	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
0056a1b9	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [EDX + 0x952832]	0F BF 8A 32 28 95 00	3	0xA	0x952832
0056a1d9	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EDX + 0x95284e],0xa	80 BA 4E 28 95 00 0A	2	0x26	0x95284E
0056a241	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0056a24c	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x95284e],0xa	80 B8 4E 28 95 00 0A	2	0x26	0x95284E
0056a25b	air_power(int,int,int,int_*,int_*)	CMP	CMP DX,word ptr [EAX + 0x95283e]	66 3B 90 3E 28 95 00	3	0x16	0x95283E
0056a271	air_power(int,int,int,int_*,int_*)	CMP	CMP CX,word ptr [EDX + 0x952846]	66 3B 8A 46 28 95 00	3	0x1E	0x952846
0056a2a5	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0056a2b0	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x95284e],0xa	80 B8 4E 28 95 00 0A	2	0x26	0x95284E
0056a2cf	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
0056a2d6	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
0056a2fb	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
0056a309	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
0056a4ab	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0056a4b6	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x95284e],0xa	80 B8 4E 28 95 00 0A	2	0x26	0x95284E
0056a710	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
0056a717	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x952853],0x61	C6 81 53 28 95 00 61	2	0x2B	0x952853
0056a71e	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x95283c],BX	66 89 99 3C 28 95 00	3	0x14	0x95283C
0056a725	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [ECX + 0x952844],DX	66 89 91 44 28 95 00	3	0x1C	0x952844
0056a72c	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0056a747	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
0056a80c	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x952839],0x18	C6 87 39 28 95 00 18	2	0x11	0x952839
0056a813	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x952853],0x61	C6 87 53 28 95 00 61	2	0x2B	0x952853
0056a81a	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EDI + 0x95283c],AX	66 89 87 3C 28 95 00	3	0x14	0x95283C
0056a821	air_power(int,int,int,int_*,int_*)	MOV	MOV word ptr [EDI + 0x952844],CX	66 89 8F 44 28 95 00	3	0x1C	0x952844
0056a828	air_power(int,int,int,int_*,int_*)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0056a83f	air_power(int,int,int,int_*,int_*)	MOV	MOV byte ptr [EDI + 0x95284d],0x0	C6 87 4D 28 95 00 00	2	0x25	0x95284D
0056a864	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0056a87c	air_power(int,int,int,int_*,int_*)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0056a887	air_power(int,int,int,int_*,int_*)	CMP	CMP byte ptr [EAX + 0x95284e],0xa	80 B8 4E 28 95 00 0A	2	0x26	0x95284E
0056a8bf	enemy_planet_buster(int)	MOV	MOV BL,byte ptr [EAX + 0x952836]	8A 98 36 28 95 00	2	0xE	0x952836
0056a936	enemy_planet_buster(int)	MOV	MOV ECX,0x952832	B9 32 28 95 00	1	0xA	0x952832
0056aa3b	enemy_planet_buster(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
0056aa42	enemy_planet_buster(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0056b032	enemy_planet_buster(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0056b060	enemy_planet_buster(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0056b076	enemy_planet_buster(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
0056b085	enemy_planet_buster(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
0056b197	enemy_planet_buster(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
0056b2c9	enemy_planet_buster(int)	MOV	MOV byte ptr [EAX + 0x95284f],0x0	C6 80 4F 28 95 00 00	2	0x27	0x95284F
0056b301	enemy_planet_buster(int)	MOV	MOV byte ptr [EDX + 0x95284f],0x0	C6 82 4F 28 95 00 00	2	0x27	0x95284F
0056b333	get_there(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
0056b36b	get_there(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0056b372	get_there(int,int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
0056b624	enemy_move(int)	MOV	MOV DL,byte ptr [EAX*0x4 + 0x952836]	8A 14 85 36 28 95 00	3	0xE	0x952836
0056b64b	enemy_move(int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
0056b66d	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0056b685	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EBX + 0x95282a]	0F BF BB 2A 28 95 00	3	0x2	0x95282A
0056b694	enemy_move(int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x952828]	0F BF B3 28 28 95 00	3	0x0	0x952828
0056b706	enemy_move(int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
0056b77e	enemy_move(int)	MOV	MOV AL,byte ptr [EBX + 0x952838]	8A 83 38 28 95 00	2	0x10	0x952838
0056b78c	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0056b7e0	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0056b83a	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0056b950	enemy_move(int)	MOV	MOV EBX,dword ptr [EDI + 0x95282c]	8B 9F 2C 28 95 00	2	0x4	0x95282C
0056b976	enemy_move(int)	MOV	MOV DX,word ptr [EDI + 0x952830]	66 8B 97 30 28 95 00	3	0x8	0x952830
0056b9c5	enemy_move(int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
0056b9e9	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
0056ba47	enemy_move(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0056ba52	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95284e]	8A 87 4E 28 95 00	2	0x26	0x95284E
0056bbba	enemy_move(int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0056bc22	enemy_move(int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
0056bc34	enemy_move(int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
0056bc7c	enemy_move(int)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
0056bc91	enemy_move(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
0056bcbd	enemy_move(int)	TEST	TEST dword ptr [ECX + 0x95282c],ESI	85 B1 2C 28 95 00	2	0x4	0x95282C
0056bcce	enemy_move(int)	OR	OR dword ptr [ECX + 0x95282c],EDX	09 91 2C 28 95 00	2	0x4	0x95282C
0056bcd8	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
0056bcff	enemy_move(int)	MOV	MOV DL,byte ptr [EDI + 0x952850]	8A 97 50 28 95 00	2	0x28	0x952850
0056bd67	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
0056bd76	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95282a]	0F BF 97 2A 28 95 00	3	0x2	0x95282A
0056bd9b	enemy_move(int)	MOV	MOV EDX,dword ptr [EDI + 0x95282c]	8B 97 2C 28 95 00	2	0x4	0x95282C
0056bdc3	enemy_move(int)	MOV	MOV CL,byte ptr [EDI + 0x95283b]	8A 8F 3B 28 95 00	2	0x13	0x95283B
0056bdc9	enemy_move(int)	MOV	MOV BL,byte ptr [EDI + 0x95283a]	8A 9F 3A 28 95 00	2	0x12	0x95283A
0056bdeb	enemy_move(int)	MOV	MOV AX,word ptr [EDI + 0x952830]	66 8B 87 30 28 95 00	3	0x8	0x952830
0056be14	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x95284e],0x2	C6 87 4E 28 95 00 02	2	0x26	0x95284E
0056be33	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95284e]	8A 87 4E 28 95 00	2	0x26	0x95284E
0056be3d	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952856]	0F BF 87 56 28 95 00	3	0x2E	0x952856
0056be60	enemy_move(int)	MOV	MOV dword ptr [EDI + 0x95282c],EDX	89 97 2C 28 95 00	2	0x4	0x95282C
0056bea3	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0056bebc	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95284e]	8A 87 4E 28 95 00	2	0x26	0x95284E
0056bed3	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x95284e],0x7	80 BF 4E 28 95 00 07	2	0x26	0x95284E
0056bef5	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0xd	C6 87 39 28 95 00 0D	2	0x11	0x952839
0056bf3a	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0xd	C6 87 39 28 95 00 0D	2	0x11	0x952839
0056bf7f	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
0056bf98	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x95284e],0x6	80 BF 4E 28 95 00 06	2	0x26	0x95284E
0056bfa5	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0056bfe5	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0xe	C6 87 39 28 95 00 0E	2	0x11	0x952839
0056c009	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95284e]	8A 87 4E 28 95 00	2	0x26	0x95284E
0056c034	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0056c21e	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
0056c225	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x66	C6 81 53 28 95 00 66	2	0x2B	0x952853
0056c22c	enemy_move(int)	MOV	MOV word ptr [ECX + 0x95283c],AX	66 89 81 3C 28 95 00	3	0x14	0x95283C
0056c233	enemy_move(int)	MOV	MOV word ptr [ECX + 0x952844],DX	66 89 91 44 28 95 00	3	0x1C	0x952844
0056c23a	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0056c251	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x95284d],0x0	C6 81 4D 28 95 00 00	2	0x25	0x95284D
0056c299	enemy_move(int)	MOV	MOV CL,byte ptr [EDX + 0x95284e]	8A 8A 4E 28 95 00	2	0x26	0x95284E
0056c2b7	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0056c2c4	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x95284e],0x6	80 BF 4E 28 95 00 06	2	0x26	0x95284E
0056c2d1	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
0056c2d8	enemy_move(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0056c2e1	enemy_move(int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
0056c308	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x95284e],0x1	C6 87 4E 28 95 00 01	2	0x26	0x95284E
0056c30f	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
0056c31d	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
0056c324	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95283c]	0F BF 8F 3C 28 95 00	3	0x14	0x95283C
0056c356	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
0056c35d	enemy_move(int)	MOV	MOV DL,byte ptr [EDI + 0x95284e]	8A 97 4E 28 95 00	2	0x26	0x95284E
0056c51f	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x95284e],0x2	80 BA 4E 28 95 00 02	2	0x26	0x95284E
0056c5f4	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x52	C6 81 53 28 95 00 52	2	0x2B	0x952853
0056c5fb	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],DL	88 91 39 28 95 00	2	0x11	0x952839
0056c61b	enemy_move(int)	MOV	MOV word ptr [ECX + 0x95283c],DX	66 89 91 3C 28 95 00	3	0x14	0x95283C
0056c622	enemy_move(int)	MOV	MOV word ptr [ECX + 0x952844],AX	66 89 81 44 28 95 00	3	0x1C	0x952844
0056c63d	enemy_move(int)	MOV	MOV AX,word ptr [EDX + 0x952830]	66 8B 82 30 28 95 00	3	0x8	0x952830
0056c659	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
0056c660	enemy_move(int)	MOV	MOV EBX,dword ptr [ESI + 0x95282c]	8B 9E 2C 28 95 00	2	0x4	0x95282C
0056c669	enemy_move(int)	MOV	MOV dword ptr [ESI + 0x95282c],EBX	89 9E 2C 28 95 00	2	0x4	0x95282C
0056c69b	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x95284e]	8A 86 4E 28 95 00	2	0x26	0x95284E
0056c75e	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952839],0xe	C6 82 39 28 95 00 0E	2	0x11	0x952839
0056c7ba	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952839],0x4	C6 82 39 28 95 00 04	2	0x11	0x952839
0056c824	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x95284e],0x4	80 BE 4E 28 95 00 04	2	0x26	0x95284E
0056c87a	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x7	C6 86 39 28 95 00 07	2	0x11	0x952839
0056c88f	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x95284e],0x5	80 BE 4E 28 95 00 05	2	0x26	0x95284E
0056c8d2	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952839],0x6	C6 82 39 28 95 00 06	2	0x11	0x952839
0056c950	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x9	C6 81 39 28 95 00 09	2	0x11	0x952839
0056c9b3	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x4	C6 81 39 28 95 00 04	2	0x11	0x952839
0056c9c2	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0056c9c9	enemy_move(int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0056c9d3	enemy_move(int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
0056ca21	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056cadc	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0056cb40	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
0056cba1	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952836],BL	38 9F 36 28 95 00	2	0xE	0x952836
0056cba9	enemy_move(int)	MOV	MOV AX,word ptr [EDI + 0x952830]	66 8B 87 30 28 95 00	3	0x8	0x952830
0056cbbb	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95284f]	8A 87 4F 28 95 00	2	0x27	0x95284F
0056cc2f	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0056ccdb	enemy_move(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
0056cd0f	enemy_move(int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
0056cd1a	enemy_move(int)	CMP	CMP byte ptr [EBX + 0x95284e],0xb	80 BB 4E 28 95 00 0B	2	0x26	0x95284E
0056cd38	enemy_move(int)	CMP	CMP byte ptr [EBX + 0x952853],0x46	80 BB 53 28 95 00 46	2	0x2B	0x952853
0056cd45	enemy_move(int)	CMP	CMP byte ptr [EBX + 0x952839],0x18	80 BB 39 28 95 00 18	2	0x11	0x952839
0056cd4e	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952853],0x2d	C6 83 53 28 95 00 2D	2	0x2B	0x952853
0056cd55	enemy_move(int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
0056cd70	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952853],0x2d	C6 83 53 28 95 00 2D	2	0x2B	0x952853
0056cd77	enemy_move(int)	MOV	MOV AX,word ptr [EBX + 0x952856]	66 8B 83 56 28 95 00	3	0x2E	0x952856
0056ce16	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
0056ce87	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0056ce94	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952844]	0F BF 88 44 28 95 00	3	0x1C	0x952844
0056ce9b	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95283c]	0F BF 90 3C 28 95 00	3	0x14	0x95283C
0056cfcd	enemy_move(int)	TEST	TEST byte ptr [EBX + 0x952830],0x20	F6 83 30 28 95 00 20	2	0x8	0x952830
0056d08a	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0056d382	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
0056d3d4	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x952839]	8A 81 39 28 95 00	2	0x11	0x952839
0056d3e4	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x95284e]	8A 81 4E 28 95 00	2	0x26	0x95284E
0056d627	enemy_move(int)	MOV	MOV EAX,0x952832	B8 32 28 95 00	1	0xA	0x952832
0056d675	enemy_move(int)	MOVSX	MOVSX EBX,word ptr [ECX + 0x95283c]	0F BF 99 3C 28 95 00	3	0x14	0x95283C
0056d680	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952844]	0F BF 89 44 28 95 00	3	0x1C	0x952844
0056d6d2	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952856]	0F BF 82 56 28 95 00	3	0x2E	0x952856
0056d750	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x3	C6 80 39 28 95 00 03	2	0x11	0x952839
0056d757	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x95284e],DL	88 90 4E 28 95 00	2	0x26	0x95284E
0056d85c	enemy_move(int)	TEST	TEST byte ptr [ECX + 0x95282c],0x8	F6 81 2C 28 95 00 08	2	0x4	0x95282C
0056d899	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952853],0x64	C6 80 53 28 95 00 64	2	0x2B	0x952853
0056d8e3	enemy_move(int)	MOV	MOV DL,byte ptr [EAX + 0x952850]	8A 90 50 28 95 00	2	0x28	0x952850
0056d8fc	enemy_move(int)	TEST	TEST byte ptr [EAX + 0x95282c],0x8	F6 80 2C 28 95 00 08	2	0x4	0x95282C
0056d908	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952853],0x64	C6 80 53 28 95 00 64	2	0x2B	0x952853
0056da45	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056db0d	enemy_move(int)	MOV	MOV AX,word ptr [EAX + 0x952832]	66 8B 80 32 28 95 00	3	0xA	0x952832
0056db90	enemy_move(int)	MOV	MOV AL,byte ptr [EDX + 0x952850]	8A 82 50 28 95 00	2	0x28	0x952850
0056dba0	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056dbf5	enemy_move(int)	TEST	TEST byte ptr [ESI + 0x95282c],0x8	F6 86 2C 28 95 00 08	2	0x4	0x95282C
0056dc02	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
0056dc1c	enemy_move(int)	MOV	MOV AX,word ptr [ESI + 0x952832]	66 8B 86 32 28 95 00	3	0xA	0x952832
0056dc38	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x64	C6 86 53 28 95 00 64	2	0x2B	0x952853
0056dc68	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952853],0x64	C6 80 53 28 95 00 64	2	0x2B	0x952853
0056dc6f	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952838],0x0	C6 80 38 28 95 00 00	2	0x10	0x952838
0056dcde	enemy_move(int)	TEST	TEST byte ptr [ESI + 0x95282c],0x8	F6 86 2C 28 95 00 08	2	0x4	0x95282C
0056dd75	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
0056dd7f	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
0056ddb8	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
0056de04	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x64	C6 86 53 28 95 00 64	2	0x2B	0x952853
0056de16	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x64	C6 81 53 28 95 00 64	2	0x2B	0x952853
0056de43	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0056de76	enemy_move(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
0056de91	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
0056dea6	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952853],0x64	C6 82 53 28 95 00 64	2	0x2B	0x952853
0056deef	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952850]	8A 86 50 28 95 00	2	0x28	0x952850
0056df03	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0056df29	enemy_move(int)	TEST	TEST byte ptr [ESI + 0x95282c],0x8	F6 86 2C 28 95 00 08	2	0x4	0x95282C
0056df4d	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x64	C6 86 53 28 95 00 64	2	0x2B	0x952853
0056df74	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
0056df84	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x64	C6 86 53 28 95 00 64	2	0x2B	0x952853
0056df9d	enemy_move(int)	TEST	TEST byte ptr [ESI + 0x95282c],0x8	F6 86 2C 28 95 00 08	2	0x4	0x95282C
0056e028	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0056e02f	enemy_move(int)	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
0056e038	enemy_move(int)	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
0056e158	enemy_move(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
0056e1ba	enemy_move(int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
0056e4e2	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
0056e517	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
0056e52f	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x952850]	8A 87 50 28 95 00	2	0x28	0x952850
0056e53d	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0056e580	enemy_move(int)	TEST	TEST byte ptr [EDI + 0x95282c],0x20	F6 87 2C 28 95 00 20	2	0x4	0x95282C
0056e5f6	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0056e9b6	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
0056ecb0	enemy_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
0056ecba	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952832]	0F BF 90 32 28 95 00	3	0xA	0x952832
0056ecda	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056ed92	enemy_move(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0056ed9d	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x95284e],0xb	80 BE 4E 28 95 00 0B	2	0x26	0x95284E
0056edcc	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
0056edd9	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
0056ee15	enemy_move(int)	MOV	MOV AX,word ptr [ESI + 0x95283c]	66 8B 86 3C 28 95 00	3	0x14	0x95283C
0056ee1c	enemy_move(int)	CMP	CMP word ptr [ESI + 0x952828],AX	66 39 86 28 28 95 00	3	0x0	0x952828
0056ee25	enemy_move(int)	MOV	MOV DX,word ptr [ESI + 0x95282a]	66 8B 96 2A 28 95 00	3	0x2	0x95282A
0056ee2c	enemy_move(int)	CMP	CMP DX,word ptr [ESI + 0x952844]	66 3B 96 44 28 95 00	3	0x1C	0x952844
0056ee44	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952844]	0F BF 8E 44 28 95 00	3	0x1C	0x952844
0056ee94	enemy_move(int)	MOV	MOV CX,word ptr [ESI + 0x952828]	66 8B 8E 28 28 95 00	3	0x0	0x952828
0056ee9b	enemy_move(int)	CMP	CMP CX,word ptr [ESI + 0x95283c]	66 3B 8E 3C 28 95 00	3	0x14	0x95283C
0056eea8	enemy_move(int)	MOV	MOV DX,word ptr [ESI + 0x95282a]	66 8B 96 2A 28 95 00	3	0x2	0x95282A
0056eeaf	enemy_move(int)	CMP	CMP DX,word ptr [ESI + 0x952844]	66 3B 96 44 28 95 00	3	0x1C	0x952844
0056eee4	enemy_move(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0056eef3	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x95284e],0xa	80 BE 4E 28 95 00 0A	2	0x26	0x95284E
0056ef00	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
0056ef07	enemy_move(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0056ef11	enemy_move(int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
0056ef4c	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
0056ef55	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDX + 0x952844]	0F BF 8A 44 28 95 00	3	0x1C	0x952844
0056ef5c	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EDX + 0x95283c]	0F BF BA 3C 28 95 00	3	0x14	0x95283C
0056f098	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
0056f0c5	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
0056f118	enemy_move(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
0056f122	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0056f15d	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0056f168	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95282a]	0F BF 80 2A 28 95 00	3	0x2	0x95282A
0056f227	enemy_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
0056f25b	enemy_move(int)	MOV	MOV DL,byte ptr [EAX + 0x95284f]	8A 90 4F 28 95 00	2	0x27	0x95284F
0056f269	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0056f270	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0056f2c6	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0056f2cd	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
0056f2f8	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
0056f34d	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0056f354	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0056f373	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0056f37a	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
0056f3aa	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
0056f568	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
0056f5c7	enemy_move(int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
0056f6e1	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0056f927	enemy_move(int)	CMP	CMP byte ptr [EBX + 0x952839],0x18	80 BB 39 28 95 00 18	2	0x11	0x952839
0056f930	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952844]	0F BF 83 44 28 95 00	3	0x1C	0x952844
0056f93d	enemy_move(int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95283c]	0F BF B3 3C 28 95 00	3	0x14	0x95283C
0056f968	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952844]	0F BF 93 44 28 95 00	3	0x1C	0x952844
0056f96f	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95283c]	0F BF 83 3C 28 95 00	3	0x14	0x95283C
0056fc8a	enemy_move(int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
0056fd6a	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
0056fdc9	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x95284d]	8A 81 4D 28 95 00	2	0x25	0x95284D
0056fdd1	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x95284d],AL	88 81 4D 28 95 00	2	0x25	0x95284D
0056fe94	enemy_move(int)	MOV	MOV EDI,0x952832	BF 32 28 95 00	1	0xA	0x952832
0056fee4	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x62	C6 81 53 28 95 00 62	2	0x2B	0x952853
00570019	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00570268	enemy_move(int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
005702fa	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
00570404	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00570aef	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
00570b05	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952844]	0F BF 8F 44 28 95 00	3	0x1C	0x952844
00570b0c	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95283c]	0F BF 97 3C 28 95 00	3	0x14	0x95283C
00570b22	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
00570b29	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95283c]	0F BF 8F 3C 28 95 00	3	0x14	0x95283C
00570b54	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00570b6f	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952844]	0F BF 97 44 28 95 00	3	0x1C	0x952844
00570b76	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95283c]	0F BF 87 3C 28 95 00	3	0x14	0x95283C
00570be8	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00570cda	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00570e3f	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00570fb4	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005710eb	enemy_move(int)	OR	OR dword ptr [EDX + 0x95282c],ECX	09 8A 2C 28 95 00	2	0x4	0x95282C
00571119	enemy_move(int)	TEST	TEST dword ptr [EDX + 0x95282c],ECX	85 8A 2C 28 95 00	2	0x4	0x95282C
00571126	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDX + 0x952856]	0F BF 8A 56 28 95 00	3	0x2E	0x952856
00571188	enemy_move(int)	MOV	MOV CL,byte ptr [EDX + 0x952839]	8A 8A 39 28 95 00	2	0x11	0x952839
0057119c	enemy_move(int)	MOV	MOV EAX,dword ptr [EDX + 0x95282c]	8B 82 2C 28 95 00	2	0x4	0x95282C
005711ef	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952853],0x58	80 BA 53 28 95 00 58	2	0x2B	0x952853
005711f8	enemy_move(int)	TEST	TEST dword ptr [EDX + 0x95282c],0x40000000	F7 82 2C 28 95 00 00 00 00 40	2	0x4	0x95282C
00571273	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0057127c	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952853],0x58	80 B8 53 28 95 00 58	2	0x2B	0x952853
00571466	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952838],CL	38 8A 38 28 95 00	2	0x10	0x952838
0057153a	enemy_move(int)	TEST	TEST dword ptr [ECX + 0x95282c],0x40000000	F7 81 2C 28 95 00 00 00 00 40	2	0x4	0x95282C
005715fb	enemy_move(int)	MOV	MOV EAX,dword ptr [EDX + 0x95282c]	8B 82 2C 28 95 00	2	0x4	0x95282C
005717f4	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005718c4	enemy_move(int)	CMP	CMP word ptr [EAX + 0x952856],0x0	66 83 B8 56 28 95 00 00	3	0x2E	0x952856
005718df	enemy_move(int)	MOV	MOV word ptr [EAX + 0x952856],DX	66 89 90 56 28 95 00	3	0x2E	0x952856
005718e6	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00571985	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
005719af	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
00571a8e	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
00571ae3	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
00571aff	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00571b26	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00571b7d	enemy_move(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
00571bb3	enemy_move(int)	MOV	MOV AX,word ptr [ESI + 0x952856]	66 8B 86 56 28 95 00	3	0x2E	0x952856
00571be0	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x952853],CL	38 8E 53 28 95 00	2	0x2B	0x952853
00571c19	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00571cd2	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952856]	0F BF 91 56 28 95 00	3	0x2E	0x952856
00571ec0	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
00571f08	enemy_move(int)	OR	OR dword ptr [ESI + 0x95282c],0x40000	81 8E 2C 28 95 00 00 00 04 00	2	0x4	0x95282C
00571f28	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00571f3d	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952844]	0F BF 83 44 28 95 00	3	0x1C	0x952844
00571f44	enemy_move(int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95283c]	0F BF B3 3C 28 95 00	3	0x14	0x95283C
00571f73	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952844]	0F BF 83 44 28 95 00	3	0x1C	0x952844
00571f7a	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95283c]	0F BF 8B 3C 28 95 00	3	0x14	0x95283C
00572072	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
0057207c	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
005720b5	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952858]	0F BF 04 95 58 28 95 00	4	0x30	0x952858
00572151	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
0057215f	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
0057219c	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952853]	8A 91 53 28 95 00	2	0x2B	0x952853
005721af	enemy_move(int)	MOV	MOV DI,word ptr [ECX + 0x95283c]	66 8B B9 3C 28 95 00	3	0x14	0x95283C
005721b6	enemy_move(int)	CMP	CMP DI,word ptr [EDX + 0x95283c]	66 3B BA 3C 28 95 00	3	0x14	0x95283C
005721bf	enemy_move(int)	MOV	MOV DI,word ptr [ECX + 0x952844]	66 8B B9 44 28 95 00	3	0x1C	0x952844
005721c6	enemy_move(int)	CMP	CMP DI,word ptr [EDX + 0x952844]	66 3B BA 44 28 95 00	3	0x1C	0x952844
005721cf	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952850]	8A 91 50 28 95 00	2	0x28	0x952850
00572231	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
005722d6	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
005722e4	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
0057231d	enemy_move(int)	CMP	CMP byte ptr [EDX*0x4 + 0x952853],0x33	80 3C 95 53 28 95 00 33	3	0x2B	0x952853
00572327	enemy_move(int)	CMP	CMP byte ptr [EBX + 0x952853],0x35	80 BB 53 28 95 00 35	2	0x2B	0x952853
0057234d	enemy_move(int)	TEST	TEST dword ptr [ECX*0x4 + 0x95282c],EDI	85 3C 8D 2C 28 95 00	3	0x4	0x95282C
0057235f	enemy_move(int)	MOV	MOV DX,word ptr [ECX + 0x95283c]	66 8B 91 3C 28 95 00	3	0x14	0x95283C
00572366	enemy_move(int)	CMP	CMP DX,word ptr [EBX + 0x95283c]	66 3B 93 3C 28 95 00	3	0x14	0x95283C
0057236f	enemy_move(int)	MOV	MOV CX,word ptr [ECX + 0x952844]	66 8B 89 44 28 95 00	3	0x1C	0x952844
00572376	enemy_move(int)	CMP	CMP CX,word ptr [EBX + 0x952844]	66 3B 8B 44 28 95 00	3	0x1C	0x952844
0057238c	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
005725a4	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952853],0x35	C6 82 53 28 95 00 35	2	0x2B	0x952853
005725bd	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952853],0x34	C6 80 53 28 95 00 34	2	0x2B	0x952853
005725d6	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x34	C6 81 53 28 95 00 34	2	0x2B	0x952853
0057272b	enemy_move(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
00572780	enemy_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952850]	8A 88 50 28 95 00	2	0x28	0x952850
005727c6	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00572841	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00572889	enemy_move(int)	MOV	MOV CX,word ptr [EBX + 0x952832]	66 8B 8B 32 28 95 00	3	0xA	0x952832
00572916	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952853],0x33	C6 80 53 28 95 00 33	2	0x2B	0x952853
00572987	enemy_move(int)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00572992	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005729a9	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x95284e],0x3	80 B9 4E 28 95 00 03	2	0x26	0x95284E
005729c1	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952839]	8A 91 39 28 95 00	2	0x11	0x952839
005729eb	enemy_move(int)	MOV	MOV AX,word ptr [ECX + 0x952856]	66 8B 81 56 28 95 00	3	0x2E	0x952856
00572a52	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952856]	0F BF B8 56 28 95 00	3	0x2E	0x952856
00572bf3	enemy_move(int)	MOV	MOV EAX,0x952832	B8 32 28 95 00	1	0xA	0x952832
00572c56	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [ECX + 0x952856]	0F BF B9 56 28 95 00	3	0x2E	0x952856
00572c96	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
00572d2f	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00572d59	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
00572d73	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00572dbf	enemy_move(int)	MOV	MOV AX,word ptr [ECX + 0x952856]	66 8B 81 56 28 95 00	3	0x2E	0x952856
00572f2e	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952856]	0F BF 82 56 28 95 00	3	0x2E	0x952856
00572f78	enemy_move(int)	MOV	MOV EAX,0x952832	B8 32 28 95 00	1	0xA	0x952832
0057304d	enemy_move(int)	MOV	MOV EDX,0x952832	BA 32 28 95 00	1	0xA	0x952832
00573087	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0057308e	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005730fe	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057318e	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0xd	C6 83 39 28 95 00 0D	2	0x11	0x952839
00573215	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0x14	C6 83 39 28 95 00 14	2	0x11	0x952839
00573250	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0x10	C6 83 39 28 95 00 10	2	0x11	0x952839
00573283	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0x11	C6 83 39 28 95 00 11	2	0x11	0x952839
005732b6	enemy_move(int)	MOV	MOV byte ptr [EBX + 0x952839],0x12	C6 83 39 28 95 00 12	2	0x11	0x952839
005733cb	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x14	C6 80 39 28 95 00 14	2	0x11	0x952839
00573445	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952839],0x9	C6 82 39 28 95 00 09	2	0x11	0x952839
005734c6	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95283c]	0F BF 96 3C 28 95 00	3	0x14	0x95283C
005734d2	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952844]	0F BF 86 44 28 95 00	3	0x1C	0x952844
0057356a	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005735f0	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0xe	C6 86 39 28 95 00 0E	2	0x11	0x952839
0057362f	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x4	C6 86 39 28 95 00 04	2	0x11	0x952839
00573636	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x2b	C6 86 53 28 95 00 2B	2	0x2B	0x952853
00573715	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x9	C6 86 39 28 95 00 09	2	0x11	0x952839
0057371c	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x52	C6 86 53 28 95 00 52	2	0x2B	0x952853
0057374f	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x9	C6 86 39 28 95 00 09	2	0x11	0x952839
00573756	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x72	C6 86 53 28 95 00 72	2	0x2B	0x952853
0057378e	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
0057379b	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],DL	88 96 39 28 95 00	2	0x11	0x952839
005737a1	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952853],0x2b	C6 86 53 28 95 00 2B	2	0x2B	0x952853
005737d4	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
00573852	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0xb	C6 86 39 28 95 00 0B	2	0x11	0x952839
00573878	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0xd	C6 86 39 28 95 00 0D	2	0x11	0x952839
00573936	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0xb	C6 86 39 28 95 00 0B	2	0x11	0x952839
0057399e	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0xd	C6 86 39 28 95 00 0D	2	0x11	0x952839
005739ad	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
005739d1	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952856]	0F BF 81 56 28 95 00	3	0x2E	0x952856
00573a03	enemy_move(int)	MOV	MOV EDX,dword ptr [ECX + 0x95282c]	8B 91 2C 28 95 00	2	0x4	0x95282C
00573ade	enemy_move(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
00573dac	enemy_move(int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
00573ec3	enemy_move(int)	MOV	MOV ECX,0x952832	B9 32 28 95 00	1	0xA	0x952832
00573f4f	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
00573fc4	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0xd	C6 87 39 28 95 00 0D	2	0x11	0x952839
00574016	enemy_move(int)	MOV	MOV EAX,0x952832	B8 32 28 95 00	1	0xA	0x952832
005740b9	enemy_move(int)	MOV	MOV AX,word ptr [EDI + 0x952856]	66 8B 87 56 28 95 00	3	0x2E	0x952856
005741a6	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
005741b0	enemy_move(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
005741b9	enemy_move(int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
005741bf	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
0057422f	enemy_move(int)	CMP	CMP byte ptr [EBX + 0x952839],0x18	80 BB 39 28 95 00 18	2	0x11	0x952839
00574262	enemy_move(int)	MOVSX	MOVSX ESI,byte ptr [EBX + 0x952851]	0F BE B3 51 28 95 00	3	0x29	0x952851
005742b2	enemy_move(int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
005742c6	enemy_move(int)	MOV	MOV dword ptr [EBX + 0x95282c],EAX	89 83 2C 28 95 00	2	0x4	0x95282C
005742e1	enemy_move(int)	TEST	TEST dword ptr [EBX + 0x95282c],0x80000000	F7 83 2C 28 95 00 00 00 00 80	2	0x4	0x95282C
005742f3	enemy_move(int)	MOVSX	MOVSX ECX,byte ptr [EBX + 0x952851]	0F BE 8B 51 28 95 00	3	0x29	0x952851
005744e2	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x70	C6 81 53 28 95 00 70	2	0x2B	0x952853
0057456c	enemy_move(int)	MOV	MOV EDI,0x95283c	BF 3C 28 95 00	1	0x14	0x95283C
00574617	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
00574620	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952853],0x2f	80 B8 53 28 95 00 2F	2	0x2B	0x952853
0057492a	enemy_move(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00574941	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0057494e	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952844]	0F BF 88 44 28 95 00	3	0x1C	0x952844
00574955	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95283c]	0F BF B8 3C 28 95 00	3	0x14	0x95283C
005749b5	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
005749bc	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95282a]	0F BF 80 2A 28 95 00	3	0x2	0x95282A
00574a3f	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00574a71	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00574b00	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
00574b4f	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
00574b5d	enemy_move(int)	MOV	MOV ECX,dword ptr [ECX + 0x95282c]	8B 89 2C 28 95 00	2	0x4	0x95282C
00574ba7	enemy_move(int)	MOV	MOV CL,byte ptr [ESI + 0x952838]	8A 8E 38 28 95 00	2	0x10	0x952838
00574bbe	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
00574bd7	enemy_move(int)	MOV	MOV CX,word ptr [ESI + 0x95283c]	66 8B 8E 3C 28 95 00	3	0x14	0x95283C
00574bfa	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00574c2b	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00574c42	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00574c75	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x2	C6 86 39 28 95 00 02	2	0x11	0x952839
00574c89	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952858]	0F BF 04 85 58 28 95 00	4	0x30	0x952858
00574caa	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00574cb7	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x952853]	8A 81 53 28 95 00	2	0x2B	0x952853
00574cd1	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
00574ce9	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
00574cf4	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00574d39	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00574d70	enemy_move(int)	TEST	TEST dword ptr [ESI + 0x95282c],0x10000000	F7 86 2C 28 95 00 00 00 00 10	2	0x4	0x95282C
00574d9d	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
00574e0c	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
00574e13	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
00574e75	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x952853]	8A 81 53 28 95 00	2	0x2B	0x952853
00574e8e	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00574e97	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952853],0x2d	C6 81 53 28 95 00 2D	2	0x2B	0x952853
00574eac	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00574eb5	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952853],0x64	80 B9 53 28 95 00 64	2	0x2B	0x952853
00574fcc	enemy_move(int)	MOV	MOV EAX,dword ptr [EDX + 0x95282c]	8B 82 2C 28 95 00	2	0x4	0x95282C
00575152	enemy_move(int)	CMP	CMP word ptr [EDX + 0x95283c],DI	66 39 BA 3C 28 95 00	3	0x14	0x95283C
0057515b	enemy_move(int)	CMP	CMP word ptr [EDX + 0x952844],CX	66 39 8A 44 28 95 00	3	0x1C	0x952844
005751a2	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
005751ab	enemy_move(int)	MOV	MOV CX,word ptr [EDI + 0x95283c]	66 8B 8F 3C 28 95 00	3	0x14	0x95283C
005751b8	enemy_move(int)	MOV	MOV DX,word ptr [EDI + 0x952844]	66 8B 97 44 28 95 00	3	0x1C	0x952844
00575201	enemy_move(int)	MOV	MOV DX,word ptr [EDI + 0x95283c]	66 8B 97 3C 28 95 00	3	0x14	0x95283C
0057520e	enemy_move(int)	MOV	MOV AX,word ptr [EDI + 0x952844]	66 8B 87 44 28 95 00	3	0x1C	0x952844
00575302	enemy_move(int)	MOV	MOV DX,word ptr [ECX + 0x95283c]	66 8B 91 3C 28 95 00	3	0x14	0x95283C
0057530f	enemy_move(int)	MOV	MOV CX,word ptr [ECX + 0x952844]	66 8B 89 44 28 95 00	3	0x1C	0x952844
00575445	enemy_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952853]	8A 88 53 28 95 00	2	0x2B	0x952853
00575450	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95283c]	0F BF 90 3C 28 95 00	3	0x14	0x95283C
0057545c	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952844]	0F BF 80 44 28 95 00	3	0x1C	0x952844
005757c1	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
005757ca	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952844]	0F BF 81 44 28 95 00	3	0x1C	0x952844
005757d8	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95283c]	0F BF 91 3C 28 95 00	3	0x14	0x95283C
005757f9	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952853],0x65	80 B9 53 28 95 00 65	2	0x2B	0x952853
00575826	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0057584e	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
00575857	enemy_move(int)	MOV	MOV CX,word ptr [ESI + 0x95283c]	66 8B 8E 3C 28 95 00	3	0x14	0x95283C
0057586b	enemy_move(int)	MOV	MOV CX,word ptr [ESI + 0x952856]	66 8B 8E 56 28 95 00	3	0x2E	0x952856
005758b9	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
00575acb	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
00575af1	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
00575afc	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
00575b0d	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952853],0x75	C6 80 53 28 95 00 75	2	0x2B	0x952853
00575b46	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x952839]	8A 81 39 28 95 00	2	0x11	0x952839
00575b50	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952853],0x64	80 B9 53 28 95 00 64	2	0x2B	0x952853
00575dbe	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00575f9d	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
00576136	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952856]	0F BF 8E 56 28 95 00	3	0x2E	0x952856
00576187	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
0057644b	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0057657e	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0057666d	enemy_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
00576678	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952853],0x64	80 B8 53 28 95 00 64	2	0x2B	0x952853
00576692	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005766d4	enemy_move(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
005766e2	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
005766fd	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
00576704	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
0057681d	enemy_move(int)	MOV	MOV CL,byte ptr [EDX + 0x952839]	8A 8A 39 28 95 00	2	0x11	0x952839
0057683a	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952853],0x36	80 BA 53 28 95 00 36	2	0x2B	0x952853
00576956	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
00576964	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0057697e	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
00576989	enemy_move(int)	MOVSX	MOVSX EBX,word ptr [ECX + 0x952828]	0F BF 99 28 28 95 00	3	0x0	0x952828
005769c0	enemy_move(int)	CMP	CMP byte ptr [EAX + 0x952853],0x36	80 B8 53 28 95 00 36	2	0x2B	0x952853
005769c9	enemy_move(int)	MOV	MOV CX,word ptr [EAX + 0x95283c]	66 8B 88 3C 28 95 00	3	0x14	0x95283C
005769d6	enemy_move(int)	MOV	MOV DX,word ptr [EAX + 0x952844]	66 8B 90 44 28 95 00	3	0x1C	0x952844
00576a89	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00576a98	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00576b8d	enemy_move(int)	MOV	MOV EAX,0x95283c	B8 3C 28 95 00	1	0x14	0x95283C
00576db2	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00577182	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0057718f	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005771b2	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x952850]	8A 87 50 28 95 00	2	0x28	0x952850
005771f2	enemy_move(int)	TEST	TEST byte ptr [EDI + 0x95282c],0x8	F6 87 2C 28 95 00 08	2	0x4	0x95282C
005771ff	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
0057720c	enemy_move(int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x95283c]	0F BF B7 3C 28 95 00	3	0x14	0x95283C
00577301	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00577324	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00577344	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
0057734b	enemy_move(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00577356	enemy_move(int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
00577361	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
005773a3	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
005773b0	enemy_move(int)	MOVSX	MOVSX EBX,word ptr [EDI + 0x95283c]	0F BF 9F 3C 28 95 00	3	0x14	0x95283C
005773e1	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952844]	0F BF 97 44 28 95 00	3	0x1C	0x952844
005773e8	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95283c]	0F BF 87 3C 28 95 00	3	0x14	0x95283C
00577420	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952853],0x70	80 BF 53 28 95 00 70	2	0x2B	0x952853
00577429	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00577430	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
005775ef	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0057762d	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00577671	enemy_move(int)	TEST	TEST byte ptr [EDI + 0x95282c],0x8	F6 87 2C 28 95 00 08	2	0x4	0x95282C
005776d0	enemy_move(int)	MOV	MOV AL,byte ptr [EDX + 0x952850]	8A 82 50 28 95 00	2	0x28	0x952850
0057775c	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00577787	enemy_move(int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005777bc	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
005777d4	enemy_move(int)	MOV	MOV CL,byte ptr [EAX + 0x952838]	8A 88 38 28 95 00	2	0x10	0x952838
00577889	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005778cd	enemy_move(int)	TEST	TEST dword ptr [ECX + 0x95282c],0x10000	F7 81 2C 28 95 00 00 00 01 00	2	0x4	0x95282C
00577913	enemy_move(int)	MOVSX	MOVSX ECX,byte ptr [ECX + 0x952851]	0F BE 89 51 28 95 00	3	0x29	0x952851
00577a6e	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00577c2f	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00577ce3	enemy_move(int)	MOV	MOV DL,byte ptr [EAX*0x4 + 0x952836]	8A 14 85 36 28 95 00	3	0xE	0x952836
00577d59	enemy_move(int)	MOV	MOV DL,byte ptr [EAX*0x4 + 0x952836]	8A 14 85 36 28 95 00	3	0xE	0x952836
00577fdf	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
005780e5	enemy_move(int)	MOV	MOV BL,byte ptr [EAX*0x4 + 0x952836]	8A 1C 85 36 28 95 00	3	0xE	0x952836
005780f9	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00578121	enemy_move(int)	MOV	MOV AL,byte ptr [EDX + 0x95284d]	8A 82 4D 28 95 00	2	0x25	0x95284D
0057812b	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00578134	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x95283c]	0F BF 82 3C 28 95 00	3	0x14	0x95283C
00578144	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EDX + 0x952844]	0F BF 92 44 28 95 00	3	0x1C	0x952844
0057819a	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005781b5	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0057836e	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00578387	enemy_move(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00578399	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
005783a0	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
00578417	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0057844c	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005784e0	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005784e7	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0057854b	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057866d	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
005786c9	enemy_move(int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x95284e]	8A 14 8D 4E 28 95 00	3	0x26	0x95284E
0057874b	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005787c8	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00578b15	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00578b1f	enemy_move(int)	MOV	MOV byte ptr [EDX + 0x952853],0x78	C6 82 53 28 95 00 78	2	0x2B	0x952853
00578b37	enemy_move(int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00578b43	enemy_move(int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
00578b49	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00578b69	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
00578b7d	enemy_move(int)	CMP	CMP byte ptr [EDX + 0x952839],0x18	80 BA 39 28 95 00 18	2	0x11	0x952839
00578ba6	enemy_move(int)	MOV	MOV AL,byte ptr [ECX + 0x952839]	8A 81 39 28 95 00	2	0x11	0x952839
00578dc9	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x58	C6 86 39 28 95 00 58	2	0x11	0x952839
00578dd0	enemy_move(int)	MOV	MOV word ptr [ESI + 0x95283c],AX	66 89 86 3C 28 95 00	3	0x14	0x95283C
00578ddd	enemy_move(int)	MOV	MOV word ptr [ESI + 0x952844],CX	66 89 8E 44 28 95 00	3	0x1C	0x952844
00578de9	enemy_move(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
00578e04	enemy_move(int)	MOV	MOV CL,byte ptr [EDI + 0x95283b]	8A 8F 3B 28 95 00	2	0x13	0x95283B
00578e0a	enemy_move(int)	MOV	MOV DL,byte ptr [EDI + 0x95283a]	8A 97 3A 28 95 00	2	0x12	0x95283A
00578e1b	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x952839],0x18	C6 87 39 28 95 00 18	2	0x11	0x952839
00578e22	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95283a]	8A 87 3A 28 95 00	2	0x12	0x95283A
00578e2e	enemy_move(int)	LEA	LEA EAX,[EDI + 0x95283c]	8D 87 3C 28 95 00	2	0x14	0x95283C
00578e46	enemy_move(int)	MOV	MOV DL,byte ptr [EDI + 0x95283a]	8A 97 3A 28 95 00	2	0x12	0x95283A
00578e53	enemy_move(int)	MOV	MOV AL,byte ptr [EDI + 0x95283a]	8A 87 3A 28 95 00	2	0x12	0x95283A
00578e5b	enemy_move(int)	MOV	MOV byte ptr [EDI + 0x95283a],AL	88 87 3A 28 95 00	2	0x12	0x95283A
00578e67	enemy_move(int)	AND	AND dword ptr [EDI + 0x95282c],0xfdfefdff	81 A7 2C 28 95 00 FF FD FE FD	2	0x4	0x95282C
00578e7b	enemy_move(int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95283c]	0F BF B8 3C 28 95 00	3	0x14	0x95283C
00578e82	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952844]	0F BF 90 44 28 95 00	3	0x1C	0x952844
00578e89	enemy_move(int)	MOV	MOV BL,byte ptr [EAX + 0x95283a]	8A 98 3A 28 95 00	2	0x12	0x95283A
00578e8f	enemy_move(int)	LEA	LEA ESI,[EAX + 0x95283c]	8D B0 3C 28 95 00	2	0x14	0x95283C
00578eb6	enemy_move(int)	MOV	MOV BL,byte ptr [EDX + 0x95283a]	8A 9A 3A 28 95 00	2	0x12	0x95283A
00578ed6	enemy_move(int)	MOV	MOV BL,byte ptr [ECX + 0x95283a]	8A 99 3A 28 95 00	2	0x12	0x95283A
00578ede	enemy_move(int)	MOV	MOV word ptr [EBX*0x2 + 0x95283c],DI	66 89 3C 5D 3C 28 95 00	4	0x14	0x95283C
00578ee8	enemy_move(int)	MOV	MOV BL,byte ptr [ECX + 0x95283a]	8A 99 3A 28 95 00	2	0x12	0x95283A
00578ef0	enemy_move(int)	MOV	MOV word ptr [EBX*0x2 + 0x952844],DX	66 89 14 5D 44 28 95 00	4	0x1C	0x952844
00578ef8	enemy_move(int)	MOV	MOV EBX,dword ptr [ECX + 0x95282c]	8B 99 2C 28 95 00	2	0x4	0x95282C
00578f04	enemy_move(int)	MOV	MOV dword ptr [ECX + 0x95282c],EBX	89 99 2C 28 95 00	2	0x4	0x95282C
00578f11	enemy_move(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952844]	0F BF 81 44 28 95 00	3	0x1C	0x952844
00578f1c	enemy_move(int)	CMP	CMP byte ptr [ECX + 0x95283a],0x1	80 B9 3A 28 95 00 01	2	0x12	0x95283A
00578f25	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
00578f2c	enemy_move(int)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00578f37	enemy_move(int)	MOV	MOV dword ptr [ECX + 0x95282c],EAX	89 81 2C 28 95 00	2	0x4	0x95282C
00578f3f	enemy_move(int)	MOV	MOV byte ptr [ECX + 0x952839],0x18	C6 81 39 28 95 00 18	2	0x11	0x952839
00578f49	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
00578f52	enemy_move(int)	AND	AND dword ptr [ESI + 0x95282c],0xfffeffff	81 A6 2C 28 95 00 FF FF FE FF	2	0x4	0x95282C
00578f5c	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
00578fbf	enemy_move(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
00578fd6	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],AL	88 86 39 28 95 00	2	0x11	0x952839
00578fea	enemy_move(int)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
00578ff3	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95283c]	0F BF 8E 3C 28 95 00	3	0x14	0x95283C
00578fff	enemy_move(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952844]	0F BF 96 44 28 95 00	3	0x1C	0x952844
0057900c	enemy_move(int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
0057901b	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
00579049	enemy_move(int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
00579177	enemy_move(int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
005791a2	enemy_move(int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
005791f8	enemy_move(int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0057925c	enemy_veh(int)	MOV	MOV CL,byte ptr [EDI + 0x952836]	8A 8F 36 28 95 00	2	0xE	0x952836
0057930b	enemy_veh(int)	MOV	MOV AL,byte ptr [EDI + 0x952850]	8A 87 50 28 95 00	2	0x28	0x952850
00579315	enemy_veh(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0057931e	enemy_veh(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00579335	enemy_veh(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00579340	enemy_veh(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
00579347	enemy_veh(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
00579387	enemy_veh(int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
00579448	enemy_veh(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952844]	0F BF 97 44 28 95 00	3	0x1C	0x952844
0057944f	enemy_veh(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95283c]	0F BF 87 3C 28 95 00	3	0x14	0x95283C
00579456	enemy_veh(int)	MOVSX	MOVSX ECX,byte ptr [EDI + 0x952839]	0F BE 8F 39 28 95 00	3	0x11	0x952839
00579490	enemy_veh(int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
00579497	enemy_veh(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
0057949e	enemy_veh(int)	MOV	MOV AL,byte ptr [EDI + 0x952853]	8A 87 53 28 95 00	2	0x2B	0x952853
00579935	veh_top(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
0057994b	veh_top(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
0057997b	veh_moves(int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952850]	8A 0C 95 50 28 95 00	3	0x28	0x952850
005799ac	proto_power(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00579f90	want_monolith(int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
00579fad	want_monolith(int)	CMP	CMP byte ptr [ESI + 0x95284c],0x6	80 BE 4C 28 95 00 06	2	0x24	0x95284C
00579fb6	want_monolith(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0057a067	monolith(int)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
0057a06e	monolith(int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
0057a074	monolith(int)	MOVSX	MOVSX EBX,word ptr [EDI + 0x952828]	0F BF 9F 28 28 95 00	3	0x0	0x952828
0057a07b	monolith(int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x95282a]	0F BF B7 2A 28 95 00	3	0x2	0x95282A
0057a0b4	monolith(int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0057a0bd	monolith(int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95283c]	0F BF 97 3C 28 95 00	3	0x14	0x95283C
0057a0c8	monolith(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
0057a0d3	monolith(int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
0057a0da	monolith(int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
0057a0e8	monolith(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0057a10f	monolith(int)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
0057a11a	monolith(int)	MOV	MOV byte ptr [EDI + 0x952838],0x0	C6 87 38 28 95 00 00	2	0x10	0x952838
0057a159	monolith(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0057a171	monolith(int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
0057a25e	monolith(int)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
0057a26f	monolith(int)	MOV	MOV byte ptr [EDI + 0x952838],0x0	C6 87 38 28 95 00 00	2	0x10	0x952838
0057a285	monolith(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0057a332	monolith(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0057a352	monolith(int)	CMP	CMP byte ptr [EDI + 0x95284c],0x6	80 BF 4C 28 95 00 06	2	0x24	0x95284C
0057a35b	monolith(int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0057a382	monolith(int)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
0057a38f	monolith(int)	MOV	MOV byte ptr [EDI + 0x952838],0x0	C6 87 38 28 95 00 00	2	0x10	0x952838
0057a407	monolith(int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0057a48b	monolith(int)	MOV	MOV EDX,dword ptr [EDI + 0x95282c]	8B 97 2C 28 95 00	2	0x4	0x95282C
0057a496	monolith(int)	MOV	MOV dword ptr [EDI + 0x95282c],EDX	89 97 2C 28 95 00	2	0x4	0x95282C
0057a49c	monolith(int)	MOV	MOV AL,byte ptr [EDI + 0x95284c]	8A 87 4C 28 95 00	2	0x24	0x95284C
0057a4b3	monolith(int)	MOV	MOV byte ptr [EDI + 0x95284c],AL	88 87 4C 28 95 00	2	0x24	0x95284C
0057a686	goody_box(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
0057a68d	goody_box(int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x952828]	0F BF B3 28 28 95 00	3	0x0	0x952828
0057a697	goody_box(int,int)	MOV	MOV DL,byte ptr [EBX + 0x952836]	8A 93 36 28 95 00	2	0xE	0x952836
0057a884	goody_box(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
0057a8d5	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952828]	0F BF 83 28 28 95 00	3	0x0	0x952828
0057a8dc	goody_box(int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95282a]	0F BF B3 2A 28 95 00	3	0x2	0x95282A
0057a96c	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057a994	goody_box(int,int)	TEST	TEST byte ptr [EBX + 0x952830],0x20	F6 83 30 28 95 00 20	2	0x8	0x952830
0057aa57	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057af19	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952828]	0F BF 83 28 28 95 00	3	0x0	0x952828
0057af20	goody_box(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95282a]	0F BF 8B 2A 28 95 00	3	0x2	0x95282A
0057b506	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057b76c	goody_box(int,int)	MOV	MOV byte ptr [ESI + 0x952850],0x0	C6 86 50 28 95 00 00	2	0x28	0x952850
0057b773	goody_box(int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
0057b77a	goody_box(int,int)	MOV	MOV EDI,dword ptr [ESI + 0x95282c]	8B BE 2C 28 95 00	2	0x4	0x95282C
0057b786	goody_box(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EDI	89 BE 2C 28 95 00	2	0x4	0x95282C
0057b7a8	goody_box(int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
0057b7b7	goody_box(int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
0057b957	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0057bd2f	goody_box(int,int)	MOV	MOV word ptr [ECX*0x4 + 0x952856],0xffff	66 C7 04 8D 56 28 95 00 FF FF	4	0x2E	0x952856
0057bd45	goody_box(int,int)	MOV	MOV byte ptr [ECX + 0x95284c],0x2	C6 81 4C 28 95 00 02	2	0x24	0x95284C
0057bd4e	goody_box(int,int)	MOV	MOV byte ptr [ECX + 0x95284c],0x2	C6 81 4C 28 95 00 02	2	0x24	0x95284C
0057bd5c	goody_box(int,int)	MOV	MOV byte ptr [ECX + 0x95284c],0x4	C6 81 4C 28 95 00 04	2	0x24	0x95284C
0057bd6a	goody_box(int,int)	MOV	MOV byte ptr [ECX + 0x95284c],0x6	C6 81 4C 28 95 00 06	2	0x24	0x95284C
0057bd78	goody_box(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952832]	0F BF 89 32 28 95 00	3	0xA	0x952832
0057c6e9	goody_box(int,int)	ADD	ADD byte ptr [EAX + 0x952850],CL	00 88 50 28 95 00	2	0x28	0x952850
0057c851	goody_box(int,int)	MOV	MOV BL,byte ptr [ECX*0x4 + 0x95284f]	8A 1C 8D 4F 28 95 00	3	0x27	0x95284F
0057c86b	goody_box(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95284f],BL	88 1C 8D 4F 28 95 00	3	0x27	0x95284F
0057c93c	goody_box(int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x95284f]	8A 14 8D 4F 28 95 00	3	0x27	0x95284F
0057c945	goody_box(int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95284f],DL	88 14 8D 4F 28 95 00	3	0x27	0x95284F
0057ca78	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057ca9f	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057cb81	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057cba7	goody_box(int,int)	MOV	MOV word ptr [EAX + 0x952856],0xffff	66 C7 80 56 28 95 00 FF FF	3	0x2E	0x952856
0057cbb0	goody_box(int,int)	MOV	MOV CL,byte ptr [EBX + 0x95284c]	8A 8B 4C 28 95 00	2	0x24	0x95284C
0057cbb6	goody_box(int,int)	MOV	MOV byte ptr [EAX + 0x95284c],CL	88 88 4C 28 95 00	2	0x24	0x95284C
0057cbbc	goody_box(int,int)	MOV	MOV DL,byte ptr [EBX + 0x952838]	8A 93 38 28 95 00	2	0x10	0x952838
0057cbc2	goody_box(int,int)	MOV	MOV byte ptr [EAX + 0x952838],DL	88 90 38 28 95 00	2	0x10	0x952838
0057cbc8	goody_box(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
0057cf2b	valid_tech_leap(int,int)	CMP	CMP EAX,0x952830	3D 30 28 95 00	1	0x8	0x952830
0057cfc4	study_artifact(int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
0057cfcb	study_artifact(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
0057cfd2	study_artifact(int)	MOV	MOV BL,byte ptr [EAX + 0x952836]	8A 98 36 28 95 00	2	0xE	0x952836
00583de1	hq_list_draw(GraphicWin_*,int,int,int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x1	C6 04 95 39 28 95 00 01	3	0x11	0x952839
005878e8	read_rules(int)	CMP	CMP ESI,0x95282c	81 FE 2C 28 95 00	2	0x4	0x95282C
0058910f	alien_start(void)	ADD	ADD EDI,0x952836	81 C7 36 28 95 00	2	0xE	0x952836
005915d5	alt_set(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
005915df	alt_set(int,int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952858]	0F BF BE 58 28 95 00	3	0x30	0x952858
005915fc	alt_set(int,int,int)	TEST	TEST byte ptr [ESI + 0x952830],0x20	F6 86 30 28 95 00 20	2	0x8	0x952830
0059161b	alt_set(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
0059162c	alt_set(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
00593a52	supply_options(int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
00593adc	supply_options(int,int)	MOV	MOV AL,byte ptr [EBX + 0x952839]	8A 83 39 28 95 00	2	0x11	0x952839
00593afa	supply_options(int,int)	MOV	MOV ECX,dword ptr [EBX + 0x95282c]	8B 8B 2C 28 95 00	2	0x4	0x95282C
00593b11	supply_options(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952844]	0F BF 8B 44 28 95 00	3	0x1C	0x952844
00593b18	supply_options(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952828]	0F BF 83 28 28 95 00	3	0x0	0x952828
00593b22	supply_options(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x95283c]	0F BF 8B 3C 28 95 00	3	0x14	0x95283C
00593b29	supply_options(int,int)	MOVSX	MOVSX EDI,word ptr [EBX + 0x95282a]	0F BF BB 2A 28 95 00	3	0x2	0x95282A
00593c9f	supply_options(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00593cd1	supply_options(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952856]	0F BF 83 56 28 95 00	3	0x2E	0x952856
005941cc	supply_options(int,int)	MOV	MOV byte ptr [EBX + 0x952854],AL	88 83 54 28 95 00	2	0x2C	0x952854
005941d6	supply_options(int,int)	MOV	MOV AL,byte ptr [EBX + 0x952854]	8A 83 54 28 95 00	2	0x2C	0x952854
005942d6	supply_options(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
00594564	supply_options(int,int)	MOV	MOV byte ptr [EBX + 0x952839],0x3	C6 83 39 28 95 00 03	2	0x11	0x952839
0059456b	supply_options(int,int)	MOV	MOV byte ptr [EBX + 0x95284e],AL	88 83 4E 28 95 00	2	0x26	0x95284E
0059483a	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
00594841	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
00594848	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EAX + 0x952836]	8A 98 36 28 95 00	2	0xE	0x952836
00594929	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
005949c6	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005949d8	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00594a0b	order_veh(int,int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
00594a14	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952844]	0F BF 86 44 28 95 00	3	0x1C	0x952844
00594a1b	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95283c]	0F BF 8E 3C 28 95 00	3	0x14	0x95283C
00594a5f	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00594a7a	order_veh(int,int,int)	TEST	TEST byte ptr [ESI + 0x952830],0x20	F6 86 30 28 95 00 20	2	0x8	0x952830
00594a97	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x95284d],0x0	C6 86 4D 28 95 00 00	2	0x25	0x95284D
00594c7f	order_veh(int,int,int)	MOV	MOV byte ptr [ECX + 0x95284d],0x1	C6 81 4D 28 95 00 01	2	0x25	0x95284D
00594cd0	order_veh(int,int,int)	MOV	MOV byte ptr [ECX + 0x95284d],0x1	C6 81 4D 28 95 00 01	2	0x25	0x95284D
00594d3e	order_veh(int,int,int)	MOV	MOV byte ptr [EDX + 0x95284d],0x2	C6 82 4D 28 95 00 02	2	0x25	0x95284D
00594dd7	order_veh(int,int,int)	MOV	MOV byte ptr [EDX + 0x95284d],AL	88 82 4D 28 95 00	2	0x25	0x95284D
00594e13	order_veh(int,int,int)	OR	OR dword ptr [ESI + 0x95282c],0x4	83 8E 2C 28 95 00 04	2	0x4	0x95282C
00594e1a	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00594e54	order_veh(int,int,int)	AND	AND byte ptr [ESI + 0x952830],0xfb	80 A6 30 28 95 00 FB	2	0x8	0x952830
00594f35	order_veh(int,int,int)	OR	OR byte ptr [ESI + 0x952830],0x4	80 8E 30 28 95 00 04	2	0x8	0x952830
00594fa1	order_veh(int,int,int)	MOV	MOV CX,word ptr [ESI + 0x95283c]	66 8B 8E 3C 28 95 00	3	0x14	0x95283C
00594fbb	order_veh(int,int,int)	MOV	MOV DX,word ptr [ESI + 0x952844]	66 8B 96 44 28 95 00	3	0x1C	0x952844
00595077	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
005950dc	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00595143	order_veh(int,int,int)	MOV	MOV DX,word ptr [EBX + 0x952830]	66 8B 93 30 28 95 00	3	0x8	0x952830
00595188	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005951a3	order_veh(int,int,int)	TEST	TEST byte ptr [ESI + 0x952830],0x4	F6 86 30 28 95 00 04	2	0x8	0x952830
005951cf	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
005951e9	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x95284f]	8A 8B 4F 28 95 00	2	0x27	0x95284F
0059526c	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005952a9	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005952e8	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
0059534b	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005953ba	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00595432	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
005954ca	order_veh(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
005955d4	order_veh(int,int,int)	MOV	MOV CX,word ptr [ECX + 0x952832]	66 8B 89 32 28 95 00	3	0xA	0x952832
0059573a	order_veh(int,int,int)	MOV	MOV AX,word ptr [ESI + 0x952832]	66 8B 86 32 28 95 00	3	0xA	0x952832
00595771	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005957a6	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
005957bc	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005957d7	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00595812	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00595839	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00595900	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005959f0	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00595aa5	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDX + 0x952850]	8A 8A 50 28 95 00	2	0x28	0x952850
00595ace	order_veh(int,int,int)	MOV	MOV AX,word ptr [EAX + 0x952832]	66 8B 80 32 28 95 00	3	0xA	0x952832
00595b3e	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952850]	8A 91 50 28 95 00	2	0x28	0x952850
00595bb0	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952850]	8A 91 50 28 95 00	2	0x28	0x952850
00595c04	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
00595c2d	order_veh(int,int,int)	MOV	MOV AX,word ptr [EBX + 0x952832]	66 8B 83 32 28 95 00	3	0xA	0x952832
00595c81	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952850]	8A 91 50 28 95 00	2	0x28	0x952850
00595cb1	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
00595cef	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x95284e]	8A 8B 4E 28 95 00	2	0x26	0x95284E
00595d2d	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
00595d51	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
00595d6c	order_veh(int,int,int)	MOV	MOV AX,word ptr [EBX + 0x952830]	66 8B 83 30 28 95 00	3	0x8	0x952830
00595dc8	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00595e05	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
00595e26	order_veh(int,int,int)	MOV	MOV AX,word ptr [EBX + 0x95285a]	66 8B 83 5A 28 95 00	3	0x32	0x95285A
00595e3b	order_veh(int,int,int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
00595e5b	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x952836],BL	88 9E 36 28 95 00	2	0xE	0x952836
00595e69	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x95284c],AL	88 86 4C 28 95 00	2	0x24	0x95284C
00595e9d	order_veh(int,int,int)	MOV	MOV word ptr [ESI + 0x952856],AX	66 89 86 56 28 95 00	3	0x2E	0x952856
00595ea6	order_veh(int,int,int)	MOV	MOV word ptr [ESI + 0x952856],0xffff	66 C7 86 56 28 95 00 FF FF	3	0x2E	0x952856
00595ebc	order_veh(int,int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952858]	0F BF BE 58 28 95 00	3	0x30	0x952858
00595f29	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00595f45	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
00596077	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00596140	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00596147	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
005961c7	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDX + 0x95285a]	66 8B 82 5A 28 95 00	3	0x32	0x95285A
005961dc	order_veh(int,int,int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
005961fa	order_veh(int,int,int)	CMP	CMP byte ptr [EDI + 0x952839],0x1	80 BF 39 28 95 00 01	2	0x11	0x952839
00596207	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95283c]	0F BF 87 3C 28 95 00	3	0x14	0x95283C
00596227	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
0059623c	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00596291	order_veh(int,int,int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x952858]	0F BF B7 58 28 95 00	3	0x30	0x952858
005962cf	order_veh(int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x0	C6 04 95 39 28 95 00 00	3	0x11	0x952839
005962e5	order_veh(int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x0	C6 04 95 39 28 95 00 00	3	0x11	0x952839
005962fe	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005963a1	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDI + 0x95285a]	66 8B 87 5A 28 95 00	3	0x32	0x95285A
005963b6	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
005963c7	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005963ed	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00596427	order_veh(int,int,int)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952858]	0F BF B1 58 28 95 00	3	0x30	0x952858
0059643f	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
0059645c	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00596483	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x95284d]	8A 87 4D 28 95 00	2	0x25	0x95284D
00596499	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
0059658d	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00596598	order_veh(int,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
005967e2	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX*0x4 + 0x952832]	0F BF 14 8D 32 28 95 00	4	0xA	0x952832
00596a93	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
00596abc	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EAX + 0x95284f]	8A 98 4F 28 95 00	2	0x27	0x95284F
00596be7	order_veh(int,int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x952839],0x0	C6 04 8D 39 28 95 00 00	3	0x11	0x952839
00596c55	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
00596cb0	order_veh(int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x0	C6 04 95 39 28 95 00 00	3	0x11	0x952839
00596d16	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00596d6e	order_veh(int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x952839],0x0	C6 04 95 39 28 95 00 00	3	0x11	0x952839
00596dc4	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
00596e67	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EDX*0x4 + 0x95282c]	8B 0C 95 2C 28 95 00	3	0x4	0x95282C
00597082	order_veh(int,int,int)	MOV	MOV byte ptr [ECX*0x4 + 0x95284f],0x0	C6 04 8D 4F 28 95 00 00	3	0x27	0x95284F
005971da	order_veh(int,int,int)	OR	OR byte ptr [EAX*0x4 + 0x952831],0x20	80 0C 85 31 28 95 00 20	3	0x9	0x952831
00597394	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
00597468	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX*0x4 + 0x952832]	0F BF 14 8D 32 28 95 00	4	0xA	0x952832
005974c4	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
00597599	order_veh(int,int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x18	80 BE 39 28 95 00 18	2	0x11	0x952839
005975a6	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95283c]	0F BF 96 3C 28 95 00	3	0x14	0x95283C
005975b4	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952844]	0F BF 86 44 28 95 00	3	0x1C	0x952844
005975c0	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005975e7	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
00597623	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
0059762f	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00597657	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
0059768b	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952832]	0F BF 97 32 28 95 00	3	0xA	0x952832
0059769d	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EDI + 0x952850]	8A 9F 50 28 95 00	2	0x28	0x952850
005976e1	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EDI + 0x952850]	8A 9F 50 28 95 00	2	0x28	0x952850
00597753	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
005977ff	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EDI + 0x952850]	8A 9F 50 28 95 00	2	0x28	0x952850
0059782c	order_veh(int,int,int)	MOV	MOV EDX,dword ptr [EDI + 0x95282c]	8B 97 2C 28 95 00	2	0x4	0x95282C
0059785f	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
0059788e	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
005979b2	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
005979bc	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00597a48	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952839]	8A 87 39 28 95 00	2	0x11	0x952839
00597ac3	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00597ad8	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EDI + 0x95282c]	8B 8F 2C 28 95 00	2	0x4	0x95282C
00597aeb	order_veh(int,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],ECX	89 8F 2C 28 95 00	2	0x4	0x95282C
00597b43	order_veh(int,int,int)	MOV	MOV byte ptr [EDX + 0x952850],BL	88 9A 50 28 95 00	2	0x28	0x952850
00597b49	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EDX + 0x95282c]	8B 8A 2C 28 95 00	2	0x4	0x95282C
00597b57	order_veh(int,int,int)	MOV	MOV dword ptr [EDX + 0x95282c],ECX	89 8A 2C 28 95 00	2	0x4	0x95282C
00597cd4	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDX + 0x952836]	8A 82 36 28 95 00	2	0xE	0x952836
00597cde	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDX + 0x952830]	66 8B 82 30 28 95 00	3	0x8	0x952830
00597cf0	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EDX + 0x95284f]	8A 9A 4F 28 95 00	2	0x27	0x95284F
00597ffb	order_veh(int,int,int)	TEST	TEST byte ptr [ECX + 0x95282d],0x42	F6 81 2D 28 95 00 42	2	0x5	0x95282D
00598004	order_veh(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00598027	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
00598032	order_veh(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
00598185	order_veh(int,int,int)	MOV	MOV byte ptr [EDX + 0x952851],CL	88 8A 51 28 95 00	2	0x29	0x952851
005981ca	order_veh(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x95284f]	8A 86 4F 28 95 00	2	0x27	0x95284F
005981d2	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x95284f],AL	88 86 4F 28 95 00	2	0x27	0x95284F
005981e0	order_veh(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x95284f]	8A 86 4F 28 95 00	2	0x27	0x95284F
00598227	order_veh(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x95284f]	8A 8E 4F 28 95 00	2	0x27	0x95284F
00598231	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x95284f],CL	88 8E 4F 28 95 00	2	0x27	0x95284F
00598274	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00598457	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
00598593	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952836]	8A 91 36 28 95 00	2	0xE	0x952836
0059859d	order_veh(int,int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005985b2	order_veh(int,int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005985e4	order_veh(int,int,int)	MOVSX	MOVSX EBX,word ptr [EDX*0x4 + 0x952858]	0F BF 1C 95 58 28 95 00	4	0x30	0x952858
00598744	order_veh(int,int,int)	MOV	MOV AX,word ptr [ECX + 0x952832]	66 8B 81 32 28 95 00	3	0xA	0x952832
0059875d	order_veh(int,int,int)	MOV	MOV byte ptr [ECX + 0x952838],0x0	C6 81 38 28 95 00 00	2	0x10	0x952838
0059879a	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
00598848	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952832]	0F BF 97 32 28 95 00	3	0xA	0x952832
00598860	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00598886	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
005988ba	order_veh(int,int,int)	CMP	CMP byte ptr [EDX + 0x952836],AL	38 82 36 28 95 00	2	0xE	0x952836
005988c2	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDX + 0x952830]	66 8B 82 30 28 95 00	3	0x8	0x952830
005988d4	order_veh(int,int,int)	MOV	MOV BL,byte ptr [EDX + 0x95284f]	8A 9A 4F 28 95 00	2	0x27	0x95284F
00598907	order_veh(int,int,int)	MOVSX	MOVSX ESI,word ptr [EDI + 0x952858]	0F BF B7 58 28 95 00	3	0x30	0x952858
00598940	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ECX + 0x952850]	8A 91 50 28 95 00	2	0x28	0x952850
0059894d	order_veh(int,int,int)	MOV	MOV byte ptr [ECX + 0x952850],DL	88 91 50 28 95 00	2	0x28	0x952850
005989e5	order_veh(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
005989ee	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95283c]	0F BF 91 3C 28 95 00	3	0x14	0x95283C
005989fe	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952844]	0F BF 81 44 28 95 00	3	0x1C	0x952844
00598a10	order_veh(int,int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
00598a25	order_veh(int,int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
00598a43	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
00598a4d	order_veh(int,int,int)	CMP	CMP byte ptr [EAX + 0x952839],0x1	80 B8 39 28 95 00 01	2	0x11	0x952839
00598a56	order_veh(int,int,int)	MOV	MOV DX,word ptr [EAX + 0x95283c]	66 8B 90 3C 28 95 00	3	0x14	0x95283C
00598a69	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
00598a74	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952858]	0F BF 88 58 28 95 00	3	0x30	0x952858
00598aa5	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
00598af7	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952850]	8A 8B 50 28 95 00	2	0x28	0x952850
00598b14	order_veh(int,int,int)	CMP	CMP byte ptr [EBX + 0x952839],0x18	80 BB 39 28 95 00 18	2	0x11	0x952839
00598b1d	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x95283c]	0F BF 93 3C 28 95 00	3	0x14	0x95283C
00598b2d	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952844]	0F BF 83 44 28 95 00	3	0x1C	0x952844
00598be5	order_veh(int,int,int)	MOV	MOV AX,word ptr [EBX + 0x95285a]	66 8B 83 5A 28 95 00	3	0x32	0x95285A
00598bfa	order_veh(int,int,int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
00598c16	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00598c3c	order_veh(int,int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
00598c52	order_veh(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
00598c67	order_veh(int,int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
00598c78	order_veh(int,int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952858]	0F BF BE 58 28 95 00	3	0x30	0x952858
00598cc5	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00598d29	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
00598d35	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952838],AL	88 87 38 28 95 00	2	0x10	0x952838
00598db1	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00598e2b	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDI + 0x95285a]	66 8B 87 5A 28 95 00	3	0x32	0x95285A
00598e40	order_veh(int,int,int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
00598e63	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
00598e79	order_veh(int,int,int)	MOVSX	MOVSX ESI,word ptr [ESI + 0x952858]	0F BF B6 58 28 95 00	3	0x30	0x952858
00598e9d	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00598ed1	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
00598f03	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952850]	8A 97 50 28 95 00	2	0x28	0x952850
00598f2d	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
00598f4f	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00598f69	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x95284d]	8A 8F 4D 28 95 00	2	0x25	0x95284D
00598f9e	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00598fef	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00598ffa	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0059901c	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x95283b]	8A 97 3B 28 95 00	2	0x13	0x95283B
00599022	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x95283a]	8A 87 3A 28 95 00	2	0x12	0x95283A
00599044	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952850]	8A 8F 50 28 95 00	2	0x28	0x952850
00599061	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0059907b	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x95284d]	8A 8F 4D 28 95 00	2	0x25	0x95284D
00599098	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EDI + 0x95282c]	8B 8F 2C 28 95 00	2	0x4	0x95282C
005990a6	order_veh(int,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],ECX	89 8F 2C 28 95 00	2	0x4	0x95282C
005990ae	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005990b5	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005990cb	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
0059910e	order_veh(int,int,int)	ADD	ADD byte ptr [EDI + 0x952838],AL	00 87 38 28 95 00	2	0x10	0x952838
00599124	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284d],0x0	C6 87 4D 28 95 00 00	2	0x25	0x95284D
00599137	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95282a]	0F BF 97 2A 28 95 00	3	0x2	0x95282A
0059913e	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952828]	0F BF 87 28 28 95 00	3	0x0	0x952828
00599188	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005991ab	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
005991b5	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
005991f6	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005992a8	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
005992cc	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952838],AL	88 87 38 28 95 00	2	0x10	0x952838
005992d2	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00599319	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952838]	8A 8F 38 28 95 00	2	0x10	0x952838
0059936c	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284d],0x0	C6 87 4D 28 95 00 00	2	0x25	0x95284D
00599375	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
0059937c	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005993ed	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
005993f8	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
0059941a	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x95283b]	8A 87 3B 28 95 00	2	0x13	0x95283B
00599420	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x95283a]	8A 8F 3A 28 95 00	2	0x12	0x95283A
0059942a	order_veh(int,int,int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
0059943e	order_veh(int,int,int)	INC	INC byte ptr [EDI + 0x95284d]	FE 87 4D 28 95 00	2	0x25	0x95284D
005994c8	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EDX*0x4 + 0x952836]	8A 14 95 36 28 95 00	3	0xE	0x952836
0059955a	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
00599560	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952836],DL	88 97 36 28 95 00	2	0xE	0x952836
00599566	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00599577	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952836]	8A 8F 36 28 95 00	2	0xE	0x952836
00599598	order_veh(int,int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
00599602	order_veh(int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
0059960c	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
00599683	order_veh(int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
00599692	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005996b3	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x95284d]	8A 8F 4D 28 95 00	2	0x25	0x95284D
00599740	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005997a1	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDI + 0x95285a]	66 8B 87 5A 28 95 00	3	0x32	0x95285A
005997b6	order_veh(int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
005997ea	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EBX + 0x952850]	8A 8B 50 28 95 00	2	0x28	0x952850
005997f4	order_veh(int,int,int)	MOV	MOV byte ptr [EBX + 0x952839],0x0	C6 83 39 28 95 00 00	2	0x11	0x952839
00599805	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95283c]	0F BF 97 3C 28 95 00	3	0x14	0x95283C
0059981d	order_veh(int,int,int)	MOVSX	MOVSX ESI,word ptr [ECX*0x4 + 0x952858]	0F BF 34 8D 58 28 95 00	4	0x30	0x952858
00599837	order_veh(int,int,int)	MOV	MOV byte ptr [EAX*0x4 + 0x952839],0x0	C6 04 85 39 28 95 00 00	3	0x11	0x952839
0059986f	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005998c9	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952850]	8A 97 50 28 95 00	2	0x28	0x952850
005998e6	order_veh(int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x95282a]	0F BF 8F 2A 28 95 00	3	0x2	0x95282A
005998f0	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
0059990b	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x95284f]	8A 8F 4F 28 95 00	2	0x27	0x95284F
00599915	order_veh(int,int,int)	CMP	CMP byte ptr [EDI + 0x952853],0x75	80 BF 53 28 95 00 75	2	0x2B	0x952853
00599924	order_veh(int,int,int)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
00599939	order_veh(int,int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
00599953	order_veh(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x1	80 B9 39 28 95 00 01	2	0x11	0x952839
0059995c	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95283c]	0F BF 91 3C 28 95 00	3	0x14	0x95283C
00599967	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00599972	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
0059997d	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952839]	8A 97 39 28 95 00	2	0x11	0x952839
0059999a	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95283c]	0F BF 87 3C 28 95 00	3	0x14	0x95283C
005999ad	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952844]	0F BF 87 44 28 95 00	3	0x1C	0x952844
00599a34	order_veh(int,int,int)	CMP	CMP byte ptr [EDI + 0x952839],0x18	80 BF 39 28 95 00 18	2	0x11	0x952839
00599a3d	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00599a4c	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EDI + 0x952852]	8A 97 52 28 95 00	2	0x2A	0x952852
00599a54	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952852],DL	88 97 52 28 95 00	2	0x2A	0x952852
00599a5a	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EDI + 0x95282c]	8B 8F 2C 28 95 00	2	0x4	0x95282C
00599a6a	order_veh(int,int,int)	MOVSX	MOVSX EDX,byte ptr [EDI + 0x952851]	0F BE 97 51 28 95 00	3	0x29	0x952851
00599a7d	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952852],AL	88 87 52 28 95 00	2	0x2A	0x952852
00599a83	order_veh(int,int,int)	CMP	CMP byte ptr [EDI + 0x952852],0x20	80 BF 52 28 95 00 20	2	0x2A	0x952852
00599a8c	order_veh(int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
00599acb	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952839],0x0	C6 87 39 28 95 00 00	2	0x11	0x952839
00599ad2	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00599add	order_veh(int,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
00599ae3	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952852],0x0	C6 87 52 28 95 00 00	2	0x2A	0x952852
00599af6	order_veh(int,int,int)	MOV	MOV byte ptr [EDI + 0x952851],AL	88 87 51 28 95 00	2	0x29	0x952851
00599afc	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00599b09	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [EDI + 0x95282c]	8B 87 2C 28 95 00	2	0x4	0x95282C
00599b14	order_veh(int,int,int)	MOV	MOV dword ptr [EDI + 0x95282c],EAX	89 87 2C 28 95 00	2	0x4	0x95282C
00599fc0	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],BL	88 98 39 28 95 00	2	0x11	0x952839
00599fc8	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
00599fd3	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952852]	8A 88 52 28 95 00	2	0x2A	0x952852
00599fde	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952852],CL	88 88 52 28 95 00	2	0x2A	0x952852
00599feb	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952852],0x0	C6 80 52 28 95 00 00	2	0x2A	0x952852
0059a05e	order_veh(int,int,int)	TEST	TEST byte ptr [ESI + 0x95282c],0x8	F6 86 2C 28 95 00 08	2	0x4	0x95282C
0059a067	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
0059a075	order_veh(int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
0059a095	order_veh(int,int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0059a09d	order_veh(int,int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
0059a0cb	order_veh(int,int,int)	CMP	CMP byte ptr [EAX + 0x952839],0x18	80 B8 39 28 95 00 18	2	0x11	0x952839
0059a0d8	order_veh(int,int,int)	MOV	MOV CX,word ptr [EAX + 0x952828]	66 8B 88 28 28 95 00	3	0x0	0x952828
0059a0df	order_veh(int,int,int)	CMP	CMP CX,word ptr [EAX + 0x95283c]	66 3B 88 3C 28 95 00	3	0x14	0x95283C
0059a0ec	order_veh(int,int,int)	MOV	MOV DX,word ptr [EAX + 0x95282a]	66 8B 90 2A 28 95 00	3	0x2	0x95282A
0059a0f3	order_veh(int,int,int)	CMP	CMP DX,word ptr [EAX + 0x952844]	66 3B 90 44 28 95 00	3	0x1C	0x952844
0059a100	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
0059a107	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0059a11b	order_veh(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x95283b]	8A 88 3B 28 95 00	2	0x13	0x95283B
0059a121	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283a]	8A 90 3A 28 95 00	2	0x12	0x95283A
0059a130	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x95283b],CL	88 88 3B 28 95 00	2	0x13	0x95283B
0059a136	order_veh(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],0x18	C6 80 39 28 95 00 18	2	0x11	0x952839
0059a142	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283b]	8A 90 3B 28 95 00	2	0x13	0x95283B
0059a14c	order_veh(int,int,int)	MOV	MOV DX,word ptr [EDX*0x2 + 0x95283c]	66 8B 14 55 3C 28 95 00	4	0x14	0x95283C
0059a154	order_veh(int,int,int)	MOV	MOV word ptr [EAX + 0x95283c],DX	66 89 90 3C 28 95 00	3	0x14	0x95283C
0059a15d	order_veh(int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x95283b]	8A 90 3B 28 95 00	2	0x13	0x95283B
0059a165	order_veh(int,int,int)	MOV	MOV CX,word ptr [EDX*0x2 + 0x952844]	66 8B 0C 55 44 28 95 00	4	0x1C	0x952844
0059a16d	order_veh(int,int,int)	MOV	MOV word ptr [EAX + 0x952844],CX	66 89 88 44 28 95 00	3	0x1C	0x952844
0059a174	order_veh(int,int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
0059a180	order_veh(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
0059a4c6	zoc_path(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
0059a4d0	zoc_path(int,int,int)	MOV	MOV DX,word ptr [EAX + 0x952830]	66 8B 90 30 28 95 00	3	0x8	0x952830
0059a4e4	zoc_path(int,int,int)	TEST	TEST byte ptr [EAX + 0x95284f],BL	84 98 4F 28 95 00	2	0x27	0x95284F
0059a4ec	zoc_path(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
0059b2c7	find(int,int,int,int,int,int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
0059b2ed	find(int,int,int,int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0059b30a	find(int,int,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
0059bb38	find(int,int,int,int,int,int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
0059bb5e	find(int,int,int,int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
0059bb78	find(int,int,int,int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
0059bc3a	move(int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
0059bc50	move(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
0059bc57	move(int,int)	MOVSX	MOVSX EBX,word ptr [ESI + 0x952828]	0F BF 9E 28 28 95 00	3	0x0	0x952828
0059bc5e	move(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95283c]	0F BF 86 3C 28 95 00	3	0x14	0x95283C
0059bc6b	move(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952844]	0F BF 8E 44 28 95 00	3	0x1C	0x952844
0059bcc5	move(int,int)	MOV	MOV EDX,dword ptr [ESI + 0x95282c]	8B 96 2C 28 95 00	2	0x4	0x95282C
0059bce0	move(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0059bd06	move(int,int)	MOV	MOV CL,byte ptr [ESI + 0x952850]	8A 8E 50 28 95 00	2	0x28	0x952850
0059bd3e	move(int,int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
0059bd5a	move(int,int)	CMP	CMP word ptr [ESI + 0x952832],0x8	66 83 BE 32 28 95 00 08	3	0xA	0x952832
0059bd73	move(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
0059be2d	move(int,int)	TEST	TEST dword ptr [ESI + 0x95282c],0x10000	F7 86 2C 28 95 00 00 00 01 00	2	0x4	0x95282C
0059be39	move(int,int)	MOVSX	MOVSX EAX,byte ptr [ESI + 0x952851]	0F BE 86 51 28 95 00	3	0x29	0x952851
0059be45	move(int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
0059be73	move(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0059be85	move(int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
0059be8c	move(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
0059be98	move(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
0059bfea	move(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0059c0fd	move(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
0059c14a	move(int,int)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
0059c162	move(int,int)	MOV	MOV ECX,dword ptr [EDX + 0x95282c]	8B 8A 2C 28 95 00	2	0x4	0x95282C
0059c170	move(int,int)	MOVSX	MOVSX EAX,byte ptr [EDX + 0x952851]	0F BE 82 51 28 95 00	3	0x29	0x952851
0059c17e	move(int,int)	MOVSX	MOVSX ESI,word ptr [EDX + 0x952832]	0F BF B2 32 28 95 00	3	0xA	0x952832
0059c1b0	move(int,int)	MOV	MOV dword ptr [EDX + 0x95282c],ECX	89 8A 2C 28 95 00	2	0x4	0x95282C
0059c1bb	move(int,int)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
0059f179	probe(int,int,int,int)	MOV	MOV BL,byte ptr [EAX + 0x952836]	8A 98 36 28 95 00	2	0xE	0x952836
0059f19e	probe(int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
0059f1e2	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0059f1e9	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0059f239	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0059f240	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0059f26d	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
0059f29d	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
0059f377	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0059f37e	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0059f3af	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
0059f49b	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
0059f4a2	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
0059f4c8	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952832]	0F BF 91 32 28 95 00	3	0xA	0x952832
0059fb2e	probe(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952854],DL	88 90 54 28 95 00	2	0x2C	0x952854
0059fb4f	probe(int,int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952854]	8A 81 54 28 95 00	2	0x2C	0x952854
005a01dd	probe(int,int,int,int)	OR	OR byte ptr [ESI*0x4 + 0x952854],CL	08 0C B5 54 28 95 00	3	0x2C	0x952854
005a01ec	probe(int,int,int,int)	MOV	MOV AL,byte ptr [EAX*0x4 + 0x952854]	8A 04 85 54 28 95 00	3	0x2C	0x952854
005a084a	probe(int,int,int,int)	OR	OR byte ptr [EDI + 0x952854],DL	08 97 54 28 95 00	2	0x2C	0x952854
005a085e	probe(int,int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952854]	8A 87 54 28 95 00	2	0x2C	0x952854
005a0aed	probe(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x952855],CL	88 88 55 28 95 00	2	0x2D	0x952855
005a0af5	probe(int,int,int,int)	MOVSX	MOVSX EDX,byte ptr [EDI + 0x952855]	0F BE 97 55 28 95 00	3	0x2D	0x952855
005a12ed	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a1321	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005a1426	probe(int,int,int,int)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
005a1460	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005a1467	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005a14c4	probe(int,int,int,int)	MOV	MOV AX,word ptr [EDI + 0x952856]	66 8B 87 56 28 95 00	3	0x2E	0x952856
005a152a	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
005a17b9	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a17d7	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a182e	probe(int,int,int,int)	MOV	MOV EDX,dword ptr [ECX*0x4 + 0x95282c]	8B 14 8D 2C 28 95 00	3	0x4	0x95282C
005a1883	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a18a4	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a18c6	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a18de	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95282a]	0F BF 97 2A 28 95 00	3	0x2	0x95282A
005a18f8	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952828]	0F BF 87 28 28 95 00	3	0x0	0x952828
005a1a76	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005a1a7d	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005a1c1a	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005a1c28	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005a1c70	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005a1fb5	probe(int,int,int,int)	OR	OR byte ptr [ESI*0x4 + 0x952854],DL	08 14 B5 54 28 95 00	3	0x2C	0x952854
005a1fc7	probe(int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952854]	8A 04 95 54 28 95 00	3	0x2C	0x952854
005a2786	probe(int,int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
005a2d2a	probe(int,int,int,int)	OR	OR byte ptr [ECX*0x4 + 0x952854],DL	08 14 8D 54 28 95 00	3	0x2C	0x952854
005a2d3c	probe(int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952854]	8A 04 95 54 28 95 00	3	0x2C	0x952854
005a30c7	probe(int,int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952854]	8A 0C 85 54 28 95 00	3	0x2C	0x952854
005a30d0	probe(int,int,int,int)	MOV	MOV byte ptr [EAX*0x4 + 0x952854],CL	88 0C 85 54 28 95 00	3	0x2C	0x952854
005a30e7	probe(int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952854]	8A 04 95 54 28 95 00	3	0x2C	0x952854
005a34e6	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005a3521	probe(int,int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
005a3537	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005a3592	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005a35b6	probe(int,int,int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
005a3c67	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952856]	0F BF 04 85 56 28 95 00	4	0x2E	0x952856
005a4006	probe(int,int,int,int)	ADD	ADD byte ptr [EAX*0x4 + 0x952838],DL	00 14 85 38 28 95 00	3	0x10	0x952838
005a4119	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005a417f	probe(int,int,int,int)	MOV	MOV word ptr [ESI + 0x952832],AX	66 89 86 32 28 95 00	3	0xA	0x952832
005a4194	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
005a419e	probe(int,int,int,int)	MOV	MOV byte ptr [ESI + 0x952836],BL	88 9E 36 28 95 00	2	0xE	0x952836
005a41dc	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
005a41ea	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
005a41f8	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005a41ff	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005a4211	probe(int,int,int,int)	MOV	MOV word ptr [ESI + 0x952856],AX	66 89 86 56 28 95 00	3	0x2E	0x952856
005a4218	probe(int,int,int,int)	MOV	MOV byte ptr [ESI + 0x952850],0x0	C6 86 50 28 95 00 00	2	0x28	0x952850
005a421f	probe(int,int,int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
005a4226	probe(int,int,int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005a4233	probe(int,int,int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005a423e	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005a4245	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005a4261	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
005a4268	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
005a431c	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005a4323	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
005a433c	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005a43b8	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005a43bf	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
005a43d7	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
005a43de	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005a447f	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005a4486	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
005a449f	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005a451b	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005a4522	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952828]	0F BF 80 28 28 95 00	3	0x0	0x952828
005a453a	probe(int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
005a4541	probe(int,int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005a45a5	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005a4604	probe(int,int,int,int)	MOV	MOV byte ptr [EAX + 0x95284d],0x0	C6 80 4D 28 95 00 00	2	0x25	0x95284D
005a466d	probe(int,int,int,int)	MOV	MOV DL,byte ptr [ESI + 0x95284c]	8A 96 4C 28 95 00	2	0x24	0x95284C
005a467e	probe(int,int,int,int)	MOV	MOV byte ptr [ESI + 0x95284c],AL	88 86 4C 28 95 00	2	0x24	0x95284C
005a46a3	probe(int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005a59ef	veh_health(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005a5a36	veh_health(int)	MOV	MOV DL,byte ptr [ECX + 0x952838]	8A 91 38 28 95 00	2	0x10	0x952838
005a7d20	game_data(FILE_*,int)	PUSH	PUSH 0x952828	68 28 28 95 00	1	0x0	0x952828
005a7d3b	game_data(FILE_*,int)	PUSH	PUSH 0x952828	68 28 28 95 00	1	0x0	0x952828
005a7de1	game_data(FILE_*,int)	MOV	MOV EAX,0x95282a	B8 2A 28 95 00	1	0x2	0x95282A
005a818a	game_data(FILE_*,int)	MOV	MOV ESI,0x952832	BE 32 28 95 00	1	0xA	0x952832
005a9990	load_daemon(char_*,int)	MOV	MOV EDX,0x952832	BA 32 28 95 00	1	0xA	0x952832
005ac167	num_objectives(int,int)	MOV	MOV EAX,0x95282a	B8 2A 28 95 00	1	0x2	0x95282A
005ae1ef	crash_landing(int)	MOV	MOV ECX,0x952836	B9 36 28 95 00	1	0xE	0x952836
005ae35c	crash_landing(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
005ae363	crash_landing(int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x952828]	0F BF 98 28 28 95 00	3	0x0	0x952828
005af299	time_warp(void)	MOV	MOV byte ptr [EAX + 0x952839],0x2	C6 80 39 28 95 00 02	2	0x11	0x952839
005af2a0	time_warp(void)	MOV	MOV DL,byte ptr [EAX + 0x95284c]	8A 90 4C 28 95 00	2	0x24	0x95284C
005af2a8	time_warp(void)	MOV	MOV byte ptr [EAX + 0x95284c],DL	88 90 4C 28 95 00	2	0x24	0x95284C
005af2c4	time_warp(void)	MOV	MOV byte ptr [EAX + 0x952839],0x2	C6 80 39 28 95 00 02	2	0x11	0x952839
005af3b1	time_warp(void)	MOV	MOV DL,byte ptr [EAX + 0x95284c]	8A 90 4C 28 95 00	2	0x24	0x95284C
005af3b7	time_warp(void)	LEA	LEA EAX,[EAX + 0x95284c]	8D 80 4C 28 95 00	2	0x24	0x95284C
005af507	time_warp(void)	MOV	MOV byte ptr [EAX + 0x95284c],0x2	C6 80 4C 28 95 00 02	2	0x24	0x95284C
005af530	time_warp(void)	MOV	MOV CL,byte ptr [EAX + 0x95284c]	8A 88 4C 28 95 00	2	0x24	0x95284C
005af539	time_warp(void)	LEA	LEA EAX,[EAX + 0x95284c]	8D 80 4C 28 95 00	2	0x24	0x95284C
005afa8d	time_warp(void)	MOV	MOV byte ptr [ECX + 0x95284c],0x2	C6 81 4C 28 95 00 02	2	0x24	0x95284C
005afa9a	time_warp(void)	MOV	MOV byte ptr [EAX + 0x952839],0x2	C6 80 39 28 95 00 02	2	0x11	0x952839
005afac6	time_warp(void)	MOV	MOV byte ptr [ECX + 0x95284c],0x2	C6 81 4C 28 95 00 02	2	0x24	0x95284C
005afad0	time_warp(void)	MOV	MOV byte ptr [EAX + 0x952839],0x2	C6 80 39 28 95 00 02	2	0x11	0x952839
005afc26	time_warp(void)	MOV	MOV CL,byte ptr [EAX + 0x95284c]	8A 88 4C 28 95 00	2	0x24	0x95284C
005afc2f	time_warp(void)	LEA	LEA EAX,[EAX + 0x95284c]	8D 80 4C 28 95 00	2	0x24	0x95284C
005afdc5	time_warp(void)	MOV	MOV byte ptr [ECX + 0x95284c],0x2	C6 81 4C 28 95 00 02	2	0x24	0x95284C
005b0208	time_warp(void)	MOV	MOV dword ptr [EBP + -0x10],0x952832	C7 45 F0 32 28 95 00	3	0xA	0x952832
005b0455	balance(void)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
005b045c	balance(void)	MOVSX	MOVSX ESI,word ptr [ECX + 0x952828]	0F BF B1 28 28 95 00	3	0x0	0x952828
005b04d7	balance(void)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005b04de	balance(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
005b053c	balance(void)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
005b0543	balance(void)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
005b07ed	balance(void)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005b07f4	balance(void)	MOVSX	MOVSX EAX,word ptr [EAX + 0x95282a]	0F BF 80 2A 28 95 00	3	0x2	0x95282A
005b08c6	balance(void)	MOV	MOV word ptr [EDX*0x4 + 0x952856],0xffff	66 C7 04 95 56 28 95 00 FF FF	4	0x2E	0x952856
005b0c10	scenario_setup(void)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b0c61	scenario_setup(void)	MOV	MOV EDI,0x952828	BF 28 28 95 00	1	0x0	0x952828
005b1016	setup_player(int,int,int)	ADD	ADD EBX,0x952832	81 C3 32 28 95 00	2	0xA	0x952832
005b1a09	setup_player(int,int,int)	MOV	MOV EBX,0x95282a	BB 2A 28 95 00	1	0x2	0x95282A
005b2048	setup_player(int,int,int)	MOV	MOV EBX,0x952828	BB 28 28 95 00	1	0x0	0x952828
005b2c61	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],DI	66 89 B9 56 28 95 00	3	0x2E	0x952856
005b2c9f	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],DI	66 89 B9 56 28 95 00	3	0x2E	0x952856
005b2cc1	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],DI	66 89 B9 56 28 95 00	3	0x2E	0x952856
005b2dc3	setup_player(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284c],0x2	C6 87 4C 28 95 00 02	2	0x24	0x95284C
005b2dcf	setup_player(int,int,int)	MOV	MOV word ptr [EDI + 0x952856],0xffff	66 C7 87 56 28 95 00 FF FF	3	0x2E	0x952856
005b2e4e	setup_player(int,int,int)	MOV	MOV byte ptr [EDI + 0x95284c],0x2	C6 87 4C 28 95 00 02	2	0x24	0x95284C
005b2e5d	setup_player(int,int,int)	MOV	MOV word ptr [EDI + 0x952856],0xffff	66 C7 87 56 28 95 00 FF FF	3	0x2E	0x952856
005b2f00	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],0xffff	66 C7 81 56 28 95 00 FF FF	3	0x2E	0x952856
005b2f66	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],SI	66 89 B1 56 28 95 00	3	0x2E	0x952856
005b2f88	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],SI	66 89 B1 56 28 95 00	3	0x2E	0x952856
005b3060	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],SI	66 89 B1 56 28 95 00	3	0x2E	0x952856
005b3082	setup_player(int,int,int)	MOV	MOV word ptr [ECX + 0x952856],SI	66 89 B1 56 28 95 00	3	0x2E	0x952856
005b371e	eliminate_player(int,int)	MOVSX	MOVSX EDI,word ptr [EDX + 0x952828]	0F BF BA 28 28 95 00	3	0x0	0x952828
005b374c	eliminate_player(int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x95282a]	0F BF 82 2A 28 95 00	3	0x2	0x95282A
005b3793	eliminate_player(int,int)	MOV	MOV DX,word ptr [EDX + 0x95285a]	66 8B 92 5A 28 95 00	3	0x32	0x95285A
005b37b2	eliminate_player(int,int)	MOV	MOV DX,word ptr [EDX*0x4 + 0x95285a]	66 8B 14 95 5A 28 95 00	4	0x32	0x95285A
005b37cc	eliminate_player(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],0x0	C6 80 4F 28 95 00 00	2	0x27	0x95284F
005b37d3	eliminate_player(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
005b37fe	eliminate_player(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],DL	88 90 4F 28 95 00	2	0x27	0x95284F
005b3804	eliminate_player(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b58fd	spot_stack(int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
005b5904	spot_stack(int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005b5a05	spot_stack(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b5a1b	spot_stack(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b5a40	spot_stack(int,int)	OR	OR byte ptr [EAX + 0x95284f],DL	08 90 4F 28 95 00	2	0x27	0x95284F
005b5a4a	spot_stack(int,int)	AND	AND word ptr [EAX + 0x952830],CX	66 21 88 30 28 95 00	3	0x8	0x952830
005b5a51	spot_stack(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b5a82	unspot_stack(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b5a98	unspot_stack(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b5ab2	unspot_stack(int)	MOV	MOV byte ptr [EAX + 0x95284f],DL	88 90 4F 28 95 00	2	0x27	0x95284F
005b5ab8	unspot_stack(int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b5cb7	spot_loc(int,int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
005b5cbe	spot_loc(int,int,int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005b5daa	spot_loc(int,int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005b5dbe	spot_loc(int,int,int)	MOV	MOV CX,word ptr [EDX + 0x95285a]	66 8B 8A 5A 28 95 00	3	0x32	0x95285A
005b5ddc	spot_loc(int,int,int)	MOV	MOV BL,byte ptr [EAX + 0x95284f]	8A 98 4F 28 95 00	2	0x27	0x95284F
005b5de6	spot_loc(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284f],BL	88 98 4F 28 95 00	2	0x27	0x95284F
005b5dee	spot_loc(int,int,int)	AND	AND word ptr [EAX + 0x952830],CX	66 21 88 30 28 95 00	3	0x8	0x952830
005b5df5	spot_loc(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b5e1f	FUN_005b5e10	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
005b5e35	FUN_005b5e10	MOV	MOV DL,byte ptr [EAX + 0x95283b]	8A 90 3B 28 95 00	2	0x13	0x95283B
005b5e3c	FUN_005b5e10	MOV	MOV BL,byte ptr [EAX + 0x95283a]	8A 98 3A 28 95 00	2	0x12	0x95283A
005b5e4d	FUN_005b5e10	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
005b5e53	FUN_005b5e10	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
005b5e6f	FUN_005b5e10	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
005b5e75	FUN_005b5e10	MOV	MOV EDX,dword ptr [EAX + 0x95282c]	8B 90 2C 28 95 00	2	0x4	0x95282C
005b5e7e	FUN_005b5e10	MOV	MOV dword ptr [EAX + 0x95282c],EDX	89 90 2C 28 95 00	2	0x4	0x95282C
005b5e84	FUN_005b5e10	MOV	MOV CL,byte ptr [EAX + 0x952839]	8A 88 39 28 95 00	2	0x11	0x952839
005b5e8f	FUN_005b5e10	MOV	MOV byte ptr [EAX + 0x952839],0x0	C6 80 39 28 95 00 00	2	0x11	0x952839
005b5eb1	want_to_wake(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005b5edc	want_to_wake(int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x95284d]	8A 81 4D 28 95 00	2	0x25	0x95284D
005b5ee6	want_to_wake(int,int,int)	CMP	CMP byte ptr [ECX + 0x952839],0x18	80 B9 39 28 95 00 18	2	0x11	0x952839
005b5eef	want_to_wake(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952844]	0F BF 81 44 28 95 00	3	0x1C	0x952844
005b5efd	want_to_wake(int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95283c]	0F BF 91 3C 28 95 00	3	0x14	0x95283C
005b5f2e	want_to_wake(int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
005b5f5f	want_to_wake(int,int,int)	MOV	MOV AL,byte ptr [ECX + 0x952836]	8A 81 36 28 95 00	2	0xE	0x952836
005b6014	want_to_wake(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005b6040	want_to_wake(int,int,int)	MOV	MOV ECX,dword ptr [ECX + 0x95282c]	8B 89 2C 28 95 00	2	0x4	0x95282C
005b6074	wake_stack(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b608a	wake_stack(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b60b7	wake_stack(int)	CMP	CMP byte ptr [ECX + 0x952839],0x1	80 B9 39 28 95 00 01	2	0x11	0x952839
005b60c4	wake_stack(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005b60f0	wake_stack(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
005b60f7	wake_stack(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
005b6119	wake_stack(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95283c]	0F BF 81 3C 28 95 00	3	0x14	0x95283C
005b612a	wake_stack(int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005b6170	wake_stack(int)	MOV	MOV byte ptr [ECX + 0x952839],0x0	C6 81 39 28 95 00 00	2	0x11	0x952839
005b6177	wake_stack(int)	MOV	MOV EAX,dword ptr [ECX + 0x95282c]	8B 81 2C 28 95 00	2	0x4	0x95282C
005b6180	wake_stack(int)	MOV	MOV dword ptr [ECX + 0x95282c],EAX	89 81 2C 28 95 00	2	0x4	0x95282C
005b6186	wake_stack(int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952858]	0F BF 81 58 28 95 00	3	0x30	0x952858
005b61b2	FUN_005b61a0	MOVSX	MOVSX EDX,word ptr [ESI + 0x952832]	0F BF 96 32 28 95 00	3	0xA	0x952832
005b61ce	FUN_005b61a0	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005b61ec	FUN_005b61a0	MOV	MOV CX,word ptr [ESI + 0x952830]	66 8B 8E 30 28 95 00	3	0x8	0x952830
005b6206	FUN_005b61a0	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005b6214	FUN_005b61a0	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
005b6242	FUN_005b61a0	CMP	CMP word ptr [ESI + 0x952832],0x13	66 83 BE 32 28 95 00 13	3	0xA	0x952832
005b6297	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005b629e	spot_all(int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x95282a]	0F BF 97 2A 28 95 00	3	0x2	0x95282A
005b62ab	spot_all(int,int)	MOVSX	MOVSX EBX,word ptr [EDI + 0x952828]	0F BF 9F 28 28 95 00	3	0x0	0x952828
005b62e7	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005b6302	spot_all(int,int)	MOV	MOV CX,word ptr [EDI + 0x952830]	66 8B 8F 30 28 95 00	3	0x8	0x952830
005b6319	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005b6327	spot_all(int,int)	MOVSX	MOVSX EDX,word ptr [EDI + 0x952828]	0F BF 97 28 28 95 00	3	0x0	0x952828
005b6355	spot_all(int,int)	CMP	CMP word ptr [EDI + 0x952832],0x13	66 83 BF 32 28 95 00 13	3	0xA	0x952832
005b6374	spot_all(int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
005b6388	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005b6411	spot_all(int,int)	MOV	MOV BL,byte ptr [EDI + 0x95284f]	8A 9F 4F 28 95 00	2	0x27	0x95284F
005b6419	spot_all(int,int)	MOV	MOV byte ptr [EDI + 0x95284f],BL	88 9F 4F 28 95 00	2	0x27	0x95284F
005b65e3	spot_all(int,int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
005b65f1	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b67b3	spot_all(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b67c9	spot_all(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b67ef	spot_all(int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
005b67f9	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005b680f	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005b686f	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952858]	0F BF 86 58 28 95 00	3	0x30	0x952858
005b6dfb	spot_all(int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005b6e10	spot_all(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b6e32	spot_all(int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
005b6e45	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
005b6e4c	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
005b6e76	spot_all(int,int)	MOV	MOV CX,word ptr [EBX + 0x95285a]	66 8B 8B 5A 28 95 00	3	0x32	0x95285A
005b6e8d	spot_all(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b6ead	spot_all(int,int)	MOV	MOV CL,byte ptr [EAX + 0x95284f]	8A 88 4F 28 95 00	2	0x27	0x95284F
005b6eb7	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
005b6ebf	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],0xfbbf	66 81 A0 30 28 95 00 BF FB	3	0x8	0x952830
005b6ec8	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b6ed3	spot_all(int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x952858]	0F BF B3 58 28 95 00	3	0x30	0x952858
005b6fcc	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005b6fd3	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005b7004	spot_all(int,int)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
005b7019	spot_all(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b703e	spot_all(int,int)	OR	OR byte ptr [EAX + 0x95284f],DL	08 90 4F 28 95 00	2	0x27	0x95284F
005b7044	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],CX	66 21 88 30 28 95 00	3	0x8	0x952830
005b704b	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b710e	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
005b72e3	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005b72ea	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005b731d	spot_all(int,int)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
005b7332	spot_all(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b735b	spot_all(int,int)	MOV	MOV BL,byte ptr [EAX + 0x95284f]	8A 98 4F 28 95 00	2	0x27	0x95284F
005b7365	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],BL	88 98 4F 28 95 00	2	0x27	0x95284F
005b736d	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],CX	66 21 88 30 28 95 00	3	0x8	0x952830
005b7374	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b7413	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952832]	0F BF 88 32 28 95 00	3	0xA	0x952832
005b7460	spot_all(int,int)	MOV	MOV AL,byte ptr [EBX + 0x952836]	8A 83 36 28 95 00	2	0xE	0x952836
005b7478	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005b749a	spot_all(int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
005b74d2	spot_all(int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
005b74d9	spot_all(int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
005b75d0	spot_all(int,int)	MOV	MOV CL,byte ptr [EAX + 0x95284f]	8A 88 4F 28 95 00	2	0x27	0x95284F
005b75d8	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
005b75e5	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],0xfbbf	66 81 A0 30 28 95 00 BF FB	3	0x8	0x952830
005b75ee	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b7679	spot_all(int,int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
005b768f	spot_all(int,int)	MOV	MOV DL,byte ptr [EBX + 0x95283b]	8A 93 3B 28 95 00	2	0x13	0x95283B
005b7695	spot_all(int,int)	MOV	MOV CL,byte ptr [EBX + 0x95283a]	8A 8B 3A 28 95 00	2	0x12	0x95283A
005b76a4	spot_all(int,int)	MOV	MOV dword ptr [EBX + 0x95282c],EAX	89 83 2C 28 95 00	2	0x4	0x95282C
005b76aa	spot_all(int,int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
005b76c5	spot_all(int,int)	MOV	MOV dword ptr [EBX + 0x95282c],EAX	89 83 2C 28 95 00	2	0x4	0x95282C
005b76cb	spot_all(int,int)	MOV	MOV ECX,dword ptr [EBX + 0x95282c]	8B 8B 2C 28 95 00	2	0x4	0x95282C
005b76d4	spot_all(int,int)	MOV	MOV dword ptr [EBX + 0x95282c],ECX	89 8B 2C 28 95 00	2	0x4	0x95282C
005b76da	spot_all(int,int)	MOV	MOV AL,byte ptr [EBX + 0x952839]	8A 83 39 28 95 00	2	0x11	0x952839
005b7709	spot_all(int,int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
005b771f	spot_all(int,int)	MOV	MOV CL,byte ptr [EBX + 0x95283b]	8A 8B 3B 28 95 00	2	0x13	0x95283B
005b7725	spot_all(int,int)	MOV	MOV DL,byte ptr [EBX + 0x95283a]	8A 93 3A 28 95 00	2	0x12	0x95283A
005b7734	spot_all(int,int)	MOV	MOV dword ptr [EBX + 0x95282c],EAX	89 83 2C 28 95 00	2	0x4	0x95282C
005b773a	spot_all(int,int)	MOV	MOV EAX,dword ptr [EBX + 0x95282c]	8B 83 2C 28 95 00	2	0x4	0x95282C
005b7755	spot_all(int,int)	MOV	MOV dword ptr [EBX + 0x95282c],EAX	89 83 2C 28 95 00	2	0x4	0x95282C
005b775b	spot_all(int,int)	MOV	MOV ECX,dword ptr [EBX + 0x95282c]	8B 8B 2C 28 95 00	2	0x4	0x95282C
005b7764	spot_all(int,int)	MOV	MOV dword ptr [EBX + 0x95282c],ECX	89 8B 2C 28 95 00	2	0x4	0x95282C
005b776a	spot_all(int,int)	MOV	MOV AL,byte ptr [EBX + 0x952839]	8A 83 39 28 95 00	2	0x11	0x952839
005b7774	spot_all(int,int)	MOV	MOV byte ptr [EBX + 0x952839],0x0	C6 83 39 28 95 00 00	2	0x11	0x952839
005b777b	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005b7791	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952832]	0F BF 8B 32 28 95 00	3	0xA	0x952832
005b77a7	spot_all(int,int)	MOV	MOV DX,word ptr [EBX + 0x952830]	66 8B 93 30 28 95 00	3	0x8	0x952830
005b77b9	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x95282a]	0F BF 83 2A 28 95 00	3	0x2	0x95282A
005b77c7	spot_all(int,int)	MOVSX	MOVSX ECX,word ptr [EBX + 0x952828]	0F BF 8B 28 28 95 00	3	0x0	0x952828
005b77f3	spot_all(int,int)	CMP	CMP word ptr [EBX + 0x952832],0x13	66 83 BB 32 28 95 00 13	3	0xA	0x952832
005b7822	spot_all(int,int)	MOV	MOV CL,byte ptr [EBX + 0x952836]	8A 8B 36 28 95 00	2	0xE	0x952836
005b785b	spot_all(int,int)	MOV	MOV CL,byte ptr [EBX + 0x95284f]	8A 8B 4F 28 95 00	2	0x27	0x95284F
005b7874	spot_all(int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95282a]	0F BF B3 2A 28 95 00	3	0x2	0x95282A
005b787b	spot_all(int,int)	MOVSX	MOVSX EDI,word ptr [EBX + 0x952828]	0F BF BB 28 28 95 00	3	0x0	0x952828
005b796c	spot_all(int,int)	MOV	MOV CL,byte ptr [EAX + 0x95284f]	8A 88 4F 28 95 00	2	0x27	0x95284F
005b7974	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
005b7981	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],0xfbbf	66 81 A0 30 28 95 00 BF FB	3	0x8	0x952830
005b798a	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b79d8	spot_all(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b79ee	spot_all(int,int)	MOV	MOV DL,byte ptr [ESI + 0x95283b]	8A 96 3B 28 95 00	2	0x13	0x95283B
005b79f4	spot_all(int,int)	MOV	MOV CL,byte ptr [ESI + 0x95283a]	8A 8E 3A 28 95 00	2	0x12	0x95283A
005b7a03	spot_all(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005b7a09	spot_all(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b7a24	spot_all(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005b7a2a	spot_all(int,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
005b7a33	spot_all(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],ECX	89 8E 2C 28 95 00	2	0x4	0x95282C
005b7a39	spot_all(int,int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
005b7a47	spot_all(int,int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
005b7a80	spot_all(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b7a96	spot_all(int,int)	MOV	MOV DL,byte ptr [ESI + 0x95283b]	8A 96 3B 28 95 00	2	0x13	0x95283B
005b7a9c	spot_all(int,int)	MOV	MOV CL,byte ptr [ESI + 0x95283a]	8A 8E 3A 28 95 00	2	0x12	0x95283A
005b7aab	spot_all(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005b7ab1	spot_all(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b7acc	spot_all(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005b7ad2	spot_all(int,int)	MOV	MOV ECX,dword ptr [ESI + 0x95282c]	8B 8E 2C 28 95 00	2	0x4	0x95282C
005b7adb	spot_all(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],ECX	89 8E 2C 28 95 00	2	0x4	0x95282C
005b7ae1	spot_all(int,int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
005b7aee	spot_all(int,int)	MOV	MOV byte ptr [EDX + 0x952839],0x0	C6 82 39 28 95 00 00	2	0x11	0x952839
005b7b18	spot_all(int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
005b7b84	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005b7bc1	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005b7c17	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x952832]	0F BF 81 32 28 95 00	3	0xA	0x952832
005b7c43	spot_all(int,int)	MOV	MOV DX,word ptr [EBX + 0x952832]	66 8B 93 32 28 95 00	3	0xA	0x952832
005b7dd4	spot_all(int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x95282a]	0F BF B8 2A 28 95 00	3	0x2	0x95282A
005b7ddb	spot_all(int,int)	MOVSX	MOVSX EBX,word ptr [EAX + 0x952828]	0F BF 98 28 28 95 00	3	0x0	0x952828
005b7eb4	spot_all(int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005b7ec9	spot_all(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b7eee	spot_all(int,int)	MOV	MOV BL,byte ptr [EAX + 0x95284f]	8A 98 4F 28 95 00	2	0x27	0x95284F
005b7ef6	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],BL	88 98 4F 28 95 00	2	0x27	0x95284F
005b7efc	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],CX	66 21 88 30 28 95 00	3	0x8	0x952830
005b7f03	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b81a3	spot_all(int,int)	MOVSX	MOVSX EDX,word ptr [EBX + 0x952832]	0F BF 93 32 28 95 00	3	0xA	0x952832
005b81bb	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EBX + 0x952832]	0F BF 83 32 28 95 00	3	0xA	0x952832
005b81d5	spot_all(int,int)	MOV	MOV CX,word ptr [EBX + 0x952830]	66 8B 8B 30 28 95 00	3	0x8	0x952830
005b81eb	spot_all(int,int)	MOVSX	MOVSX ESI,word ptr [EBX + 0x95282a]	0F BF B3 2A 28 95 00	3	0x2	0x95282A
005b81f2	spot_all(int,int)	MOVSX	MOVSX EDI,word ptr [EBX + 0x952828]	0F BF BB 28 28 95 00	3	0x0	0x952828
005b822b	spot_all(int,int)	CMP	CMP word ptr [EBX + 0x952832],0x13	66 83 BB 32 28 95 00 13	3	0xA	0x952832
005b8254	spot_all(int,int)	TEST	TEST byte ptr [ECX + 0x95284f],AL	84 81 4F 28 95 00	2	0x27	0x95284F
005b8334	spot_all(int,int)	MOV	MOV CX,word ptr [EBX + 0x95285a]	66 8B 8B 5A 28 95 00	3	0x32	0x95285A
005b834c	spot_all(int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b8370	spot_all(int,int)	MOV	MOV BL,byte ptr [EAX + 0x95284f]	8A 98 4F 28 95 00	2	0x27	0x95284F
005b837a	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],BL	88 98 4F 28 95 00	2	0x27	0x95284F
005b8382	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],0xfbbf	66 81 A0 30 28 95 00 BF FB	3	0x8	0x952830
005b838b	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b8424	spot_all(int,int)	MOVSX	MOVSX EDX,word ptr [ESI*0x4 + 0x952832]	0F BF 14 B5 32 28 95 00	4	0xA	0x952832
005b843d	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [ESI*0x4 + 0x952832]	0F BF 04 B5 32 28 95 00	4	0xA	0x952832
005b84ec	spot_all(int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
005b84f3	spot_all(int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
005b85e0	spot_all(int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005b85f5	spot_all(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8619	spot_all(int,int)	MOV	MOV BL,byte ptr [EAX + 0x95284f]	8A 98 4F 28 95 00	2	0x27	0x95284F
005b8623	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],BL	88 98 4F 28 95 00	2	0x27	0x95284F
005b862b	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],0xfbbf	66 81 A0 30 28 95 00 BF FB	3	0x8	0x952830
005b8634	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b8772	spot_all(int,int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x95282a]	0F BF B0 2A 28 95 00	3	0x2	0x95282A
005b8779	spot_all(int,int)	MOVSX	MOVSX EDI,word ptr [EAX + 0x952828]	0F BF B8 28 28 95 00	3	0x0	0x952828
005b885a	spot_all(int,int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005b886f	spot_all(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8892	spot_all(int,int)	MOV	MOV CL,byte ptr [EAX + 0x95284f]	8A 88 4F 28 95 00	2	0x27	0x95284F
005b889c	spot_all(int,int)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
005b88a4	spot_all(int,int)	AND	AND word ptr [EAX + 0x952830],0xfbbf	66 81 A0 30 28 95 00 BF FB	3	0x8	0x952830
005b88ad	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b88c0	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005b895e	spot_all(int,int)	MOV	MOV ECX,dword ptr [EAX + 0x95282c]	8B 88 2C 28 95 00	2	0x4	0x95282C
005b8972	spot_all(int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
005b8978	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b8986	spot_all(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952832]	0F BF 80 32 28 95 00	3	0xA	0x952832
005b8b00	stack_put(int,int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b8b16	stack_put(int,int,int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b8b39	stack_put(int,int,int)	MOVSX	MOVSX ESI,word ptr [EDX*0x4 + 0x952858]	0F BF 34 95 58 28 95 00	4	0x30	0x952858
005b8b77	stack_sort(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x952828]	0F BF 88 28 28 95 00	3	0x0	0x952828
005b8b7e	stack_sort(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005b8b91	stack_sort(int)	MOV	MOV AX,word ptr [EAX + 0x95285a]	66 8B 80 5A 28 95 00	3	0x32	0x95285A
005b8ba6	stack_sort(int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
005b8bca	stack_sort(int)	MOVSX	MOVSX EDI,word ptr [EAX*0x4 + 0x952858]	0F BF 3C 85 58 28 95 00	4	0x30	0x952858
005b8bea	stack_sort(int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005b8c2a	stack_sort(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b8c40	stack_sort(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b8c5f	stack_sort(int)	MOVSX	MOVSX ESI,word ptr [EDX*0x4 + 0x952858]	0F BF 34 95 58 28 95 00	4	0x30	0x952858
005b8ca7	stack_sort_2(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x952828]	0F BF 91 28 28 95 00	3	0x0	0x952828
005b8cb1	stack_sort_2(int)	MOVSX	MOVSX EDX,word ptr [ECX + 0x95282a]	0F BF 91 2A 28 95 00	3	0x2	0x95282A
005b8cbd	stack_sort_2(int)	MOV	MOV CX,word ptr [ECX + 0x95285a]	66 8B 89 5A 28 95 00	3	0x32	0x95285A
005b8cd2	stack_sort_2(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005b8cf1	stack_sort_2(int)	MOVSX	MOVSX ESI,word ptr [EDX*0x4 + 0x952858]	0F BF 34 95 58 28 95 00	4	0x30	0x952858
005b8cff	stack_sort_2(int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
005b8d57	stack_sort_2(int)	MOVSX	MOVSX ESI,word ptr [EDX*0x4 + 0x952858]	0F BF 34 95 58 28 95 00	4	0x30	0x952858
005b8d65	stack_sort_2(int)	MOVSX	MOVSX ECX,word ptr [EDX*0x4 + 0x952832]	0F BF 0C 95 32 28 95 00	4	0xA	0x952832
005b8da7	stack_sort_2(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8dbd	stack_sort_2(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8ddc	stack_sort_2(int)	MOVSX	MOVSX ESI,word ptr [ECX*0x4 + 0x952858]	0F BF 34 8D 58 28 95 00	4	0x30	0x952858
005b8e3f	stack_fix(int)	CMP	CMP word ptr [ESI + 0x952858],0x0	66 83 BE 58 28 95 00 00	3	0x30	0x952858
005b8e49	stack_fix(int)	CMP	CMP word ptr [ESI + 0x95285a],0x0	66 83 BE 5A 28 95 00 00	3	0x32	0x95285A
005b8e5b	stack_fix(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005b8e62	stack_fix(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
005b8e7b	stack_fix(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952828]	0F BF 86 28 28 95 00	3	0x0	0x952828
005b8e87	stack_fix(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
005b8eac	stack_fix(int)	MOV	MOV SI,word ptr [ESI + 0x95285a]	66 8B B6 5A 28 95 00	3	0x32	0x95285A
005b8ec6	stack_fix(int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8f1a	stack_veh(int,int)	MOVSX	MOVSX EDX,word ptr [ECX*0x4 + 0x952832]	0F BF 14 8D 32 28 95 00	4	0xA	0x952832
005b8f6c	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
005b8f7a	stack_veh(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
005b8fc0	stack_veh(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8fd6	stack_veh(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b8ff0	stack_veh(int,int)	AND	AND dword ptr [EAX + 0x95282c],EDX	21 90 2C 28 95 00	2	0x4	0x95282C
005b8ff6	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
005b900d	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x95282a]	0F BF 87 2A 28 95 00	3	0x2	0x95282A
005b9014	stack_veh(int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952828]	0F BF 8F 28 28 95 00	3	0x0	0x952828
005b907a	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005b9088	stack_veh(int,int)	MOV	MOV BL,byte ptr [EDI + 0x952836]	8A 9F 36 28 95 00	2	0xE	0x952836
005b90b8	stack_veh(int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
005b9132	stack_veh(int,int)	MOV	MOV CX,word ptr [EDI + 0x95285a]	66 8B 8F 5A 28 95 00	3	0x32	0x95285A
005b9147	stack_veh(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005b9188	stack_veh(int,int)	MOVSX	MOVSX EDX,word ptr [ECX*0x4 + 0x952858]	0F BF 14 8D 58 28 95 00	4	0x30	0x952858
005b91a1	stack_veh(int,int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
005b91b6	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005b91f7	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005b9261	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ECX + 0x95282a]	0F BF 81 2A 28 95 00	3	0x2	0x95282A
005b9268	stack_veh(int,int)	MOVSX	MOVSX ECX,word ptr [ECX + 0x952828]	0F BF 89 28 28 95 00	3	0x0	0x952828
005b92ac	stack_veh(int,int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
005b92c9	stack_veh(int,int)	TEST	TEST dword ptr [EBX + 0x95282c],EAX	85 83 2C 28 95 00	2	0x4	0x95282C
005b92d1	stack_veh(int,int)	TEST	TEST dword ptr [ESI + 0x95282c],EAX	85 86 2C 28 95 00	2	0x4	0x95282C
005b92d9	stack_veh(int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
005b92e8	stack_veh(int,int)	CMP	CMP word ptr [ESI + 0x95283c],AX	66 39 86 3C 28 95 00	3	0x14	0x95283C
005b9301	stack_veh(int,int)	TEST	TEST byte ptr [ESI + 0x95282c],0x1	F6 86 2C 28 95 00 01	2	0x4	0x95282C
005b931e	stack_veh(int,int)	MOV	MOV word ptr [ESI + 0x95283c],AX	66 89 86 3C 28 95 00	3	0x14	0x95283C
005b9343	stack_veh(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b9356	stack_veh(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b936e	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005b9378	stack_veh(int,int)	MOVSX	MOVSX EDI,word ptr [ESI + 0x952828]	0F BF BE 28 28 95 00	3	0x0	0x952828
005b93b3	stack_veh(int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x2	80 BE 39 28 95 00 02	2	0x11	0x952839
005b93bc	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005b93f5	stack_veh(int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005b93fc	stack_veh(int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x952828]	0F BF 96 28 28 95 00	3	0x0	0x952828
005b946c	stack_veh(int,int)	CMP	CMP byte ptr [ESI + 0x952839],0x1	80 BE 39 28 95 00 01	2	0x11	0x952839
005b9475	stack_veh(int,int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95283c]	0F BF 96 3C 28 95 00	3	0x14	0x95283C
005b9487	stack_veh(int,int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005b948f	stack_veh(int,int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005b9521	stack_kill(int)	MOV	MOV AX,word ptr [ECX*0x4 + 0x95285a]	66 8B 04 8D 5A 28 95 00	4	0x32	0x95285A
005b9537	stack_kill(int)	MOV	MOV AX,word ptr [EAX*0x4 + 0x95285a]	66 8B 04 85 5A 28 95 00	4	0x32	0x95285A
005b9557	stack_kill(int)	MOVSX	MOVSX EDI,word ptr [EDX*0x4 + 0x952858]	0F BF 3C 95 58 28 95 00	4	0x30	0x952858
005b959b	stack_check(int,int,int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
005b95b1	stack_check(int,int,int,int,int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x95285a]	66 8B 04 95 5A 28 95 00	4	0x32	0x95285A
005b95ed	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
005b9602	stack_check(int,int,int,int,int)	MOVSX	MOVSX ECX,word ptr [EAX*0x4 + 0x952832]	0F BF 0C 85 32 28 95 00	4	0xA	0x952832
005b9627	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
005b964a	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b965f	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005b9692	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b96a7	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005b96e7	stack_check(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
005b96fc	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005b9733	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
005b9748	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005b9782	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b9798	stack_check(int,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX*0x4 + 0x952832]	0F BF 14 8D 32 28 95 00	4	0xA	0x952832
005b97c2	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b97d7	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005b9804	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
005b9819	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005b987a	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b988f	stack_check(int,int,int,int,int)	MOVSX	MOVSX EDX,byte ptr [ECX*0x4 + 0x952839]	0F BE 14 8D 39 28 95 00	4	0x11	0x952839
005b98ac	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b98cf	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
005b98e4	stack_check(int,int,int,int,int)	MOV	MOV ECX,dword ptr [EAX*0x4 + 0x95282c]	8B 0C 85 2C 28 95 00	3	0x4	0x95282C
005b9909	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EAX*0x4 + 0x952836]	8A 0C 85 36 28 95 00	3	0xE	0x952836
005b9923	stack_check(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDI + 0x952836]	8A 87 36 28 95 00	2	0xE	0x952836
005b992a	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005b994a	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005b9951	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDI + 0x952836]	8A 8F 36 28 95 00	2	0xE	0x952836
005b998f	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b99a4	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005b99e2	stack_check(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
005b99f7	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005b9a33	stack_check(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
005b9a48	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005b9a7e	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b9a95	stack_check(int,int,int,int,int)	MOVSX	MOVSX EDX,word ptr [ECX*0x4 + 0x952832]	0F BF 14 8D 32 28 95 00	4	0xA	0x952832
005b9ac2	stack_check(int,int,int,int,int)	MOV	MOV CL,byte ptr [EDX*0x4 + 0x952836]	8A 0C 95 36 28 95 00	3	0xE	0x952836
005b9ad7	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX*0x4 + 0x952832]	0F BF 04 85 32 28 95 00	4	0xA	0x952832
005b9b07	stack_check(int,int,int,int,int)	MOV	MOV AL,byte ptr [EDX*0x4 + 0x952836]	8A 04 95 36 28 95 00	3	0xE	0x952836
005b9b18	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [EDX*0x4 + 0x952832]	0F BF 04 95 32 28 95 00	4	0xA	0x952832
005b9b55	stack_check(int,int,int,int,int)	MOV	MOV DL,byte ptr [ECX*0x4 + 0x952836]	8A 14 8D 36 28 95 00	3	0xE	0x952836
005b9b66	stack_check(int,int,int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005b9b97	stack_check(int,int,int,int,int)	MOVSX	MOVSX ESI,word ptr [EAX*0x4 + 0x952858]	0F BF 34 85 58 28 95 00	4	0x30	0x952858
005bee0b	do_unity_crash(int,int,int)	MOV	MOV byte ptr [EDX*0x4 + 0x95284c],0x2	C6 04 95 4C 28 95 00 02	3	0x24	0x95284C
005bfee5	veh_at(int,int)	MOV	MOV ECX,0x952828	B9 28 28 95 00	1	0x0	0x952828
005bff76	veh_at(int,int)	MOV	MOV CX,word ptr [ECX*0x4 + 0x95285a]	66 8B 0C 8D 5A 28 95 00	4	0x32	0x95285A
005bffb3	veh_lift(int)	MOV	MOV AX,word ptr [ESI + 0x95285a]	66 8B 86 5A 28 95 00	3	0x32	0x95285A
005bffcd	veh_lift(int)	MOV	MOV DX,word ptr [ESI + 0x952858]	66 8B 96 58 28 95 00	3	0x30	0x952858
005bffd4	veh_lift(int)	MOV	MOV word ptr [EAX*0x4 + 0x952858],DX	66 89 14 85 58 28 95 00	4	0x30	0x952858
005bffdc	veh_lift(int)	MOV	MOV AX,word ptr [ESI + 0x952858]	66 8B 86 58 28 95 00	3	0x30	0x952858
005bfff1	veh_lift(int)	MOV	MOV AX,word ptr [ESI + 0x95285a]	66 8B 86 5A 28 95 00	3	0x32	0x95285A
005bfff8	veh_lift(int)	MOV	MOV word ptr [EDX*0x4 + 0x95285a],AX	66 89 04 95 5A 28 95 00	4	0x32	0x95285A
005c0006	veh_lift(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005c000d	veh_lift(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005c003a	veh_lift(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005c0041	veh_lift(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
005c0051	veh_lift(int)	MOV	MOV word ptr [ESI + 0x952828],AX	66 89 86 28 28 95 00	3	0x0	0x952828
005c0058	veh_lift(int)	MOV	MOV word ptr [ESI + 0x95282a],AX	66 89 86 2A 28 95 00	3	0x2	0x95282A
005c005f	veh_lift(int)	MOV	MOV word ptr [ESI + 0x952858],AX	66 89 86 58 28 95 00	3	0x30	0x952858
005c0066	veh_lift(int)	MOV	MOV word ptr [ESI + 0x95285a],AX	66 89 86 5A 28 95 00	3	0x32	0x95285A
005c00a7	veh_drop(int,int,int)	MOV	MOV word ptr [ESI + 0x952858],AX	66 89 86 58 28 95 00	3	0x30	0x952858
005c00ae	veh_drop(int,int,int)	MOV	MOV word ptr [ESI + 0x95285a],DX	66 89 96 5A 28 95 00	3	0x32	0x95285A
005c00b5	veh_drop(int,int,int)	MOV	MOV word ptr [ESI + 0x952828],BX	66 89 9E 28 28 95 00	3	0x0	0x952828
005c00bc	veh_drop(int,int,int)	MOV	MOV word ptr [ESI + 0x95282a],DI	66 89 BE 2A 28 95 00	3	0x2	0x95282A
005c00d1	veh_drop(int,int,int)	MOV	MOV word ptr [EAX*0x4 + 0x95285a],CX	66 89 0C 85 5A 28 95 00	4	0x32	0x95285A
005c011a	veh_drop(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
005c0146	veh_drop(int,int,int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
005c0150	veh_drop(int,int,int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005c01af	sleep(int)	MOV	MOV byte ptr [EAX + 0x952839],0x1	C6 80 39 28 95 00 01	2	0x11	0x952839
005c01b6	sleep(int)	MOV	MOV word ptr [EAX + 0x95283c],0xffff	66 C7 80 3C 28 95 00 FF FF	3	0x14	0x95283C
005c01bf	sleep(int)	MOV	MOV word ptr [EAX + 0x952844],0x0	66 C7 80 44 28 95 00 00 00	3	0x1C	0x952844
005c01e6	veh_demote(int)	MOV	MOV AX,word ptr [EDI + 0x952858]	66 8B 87 58 28 95 00	3	0x30	0x952858
005c01fb	veh_demote(int)	MOV	MOV AX,word ptr [EDX*0x4 + 0x952858]	66 8B 04 95 58 28 95 00	4	0x30	0x952858
005c021e	veh_demote(int)	MOV	MOV word ptr [EAX + 0x952858],BX	66 89 98 58 28 95 00	3	0x30	0x952858
005c0225	veh_demote(int)	MOV	MOV word ptr [EDI + 0x95285a],SI	66 89 B7 5A 28 95 00	3	0x32	0x95285A
005c022c	veh_demote(int)	MOV	MOV word ptr [EDI + 0x952858],0xffff	66 C7 87 58 28 95 00 FF FF	3	0x30	0x952858
005c0235	veh_demote(int)	MOV	MOV CX,word ptr [EAX + 0x952828]	66 8B 88 28 28 95 00	3	0x0	0x952828
005c023c	veh_demote(int)	MOV	MOV word ptr [EDI + 0x952828],CX	66 89 8F 28 28 95 00	3	0x0	0x952828
005c0243	veh_demote(int)	MOV	MOV DX,word ptr [EAX + 0x95282a]	66 8B 90 2A 28 95 00	3	0x2	0x95282A
005c024a	veh_demote(int)	MOV	MOV word ptr [EDI + 0x95282a],DX	66 89 97 2A 28 95 00	3	0x2	0x95282A
005c0279	veh_promote(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005c028f	veh_promote(int)	MOV	MOV CX,word ptr [EDX*0x4 + 0x95285a]	66 8B 0C 95 5A 28 95 00	4	0x32	0x95285A
005c02b1	veh_promote(int)	MOVSX	MOVSX ECX,word ptr [EAX + 0x95282a]	0F BF 88 2A 28 95 00	3	0x2	0x95282A
005c02b8	veh_promote(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x952828]	0F BF 90 28 28 95 00	3	0x0	0x952828
005c02f3	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x952828],CX	66 89 88 28 28 95 00	3	0x0	0x952828
005c02fa	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x95282a],CX	66 89 88 2A 28 95 00	3	0x2	0x95282A
005c0306	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952837],CL	88 88 37 28 95 00	2	0xF	0x952837
005c030c	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x952834],CX	66 89 88 34 28 95 00	3	0xC	0x952834
005c0313	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x952830],CX	66 89 88 30 28 95 00	3	0x8	0x952830
005c031a	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952836],BL	88 98 36 28 95 00	2	0xE	0x952836
005c0320	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x952832],DX	66 89 90 32 28 95 00	3	0xA	0x952832
005c0327	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x952858],DI	66 89 B8 58 28 95 00	3	0x30	0x952858
005c032e	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x95285a],DI	66 89 B8 5A 28 95 00	3	0x32	0x95285A
005c0335	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x95283a],CL	88 88 3A 28 95 00	2	0x12	0x95283A
005c033b	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x95283b],CL	88 88 3B 28 95 00	2	0x13	0x95283B
005c0341	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952839],CL	88 88 39 28 95 00	2	0x11	0x952839
005c0347	veh_clear(int,int,int)	LEA	LEA EDX,[EAX + 0x952844]	8D 90 44 28 95 00	2	0x1C	0x952844
005c035d	veh_clear(int,int,int)	MOV	MOV dword ptr [EAX + 0x95282c],ECX	89 88 2C 28 95 00	2	0x4	0x95282C
005c0363	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952850],CL	88 88 50 28 95 00	2	0x28	0x952850
005c0369	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952838],CL	88 88 38 28 95 00	2	0x10	0x952838
005c0372	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284e],CL	88 88 4E 28 95 00	2	0x26	0x95284E
005c037d	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284d],CL	88 88 4D 28 95 00	2	0x25	0x95284D
005c0383	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952852],CL	88 88 52 28 95 00	2	0x2A	0x952852
005c0389	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952853],CL	88 88 53 28 95 00	2	0x2B	0x952853
005c0396	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284f],CL	88 88 4F 28 95 00	2	0x27	0x95284F
005c039e	veh_clear(int,int,int)	MOV	MOV word ptr [EAX + 0x952856],DI	66 89 B8 56 28 95 00	3	0x2E	0x952856
005c03a5	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x95284c],DL	88 90 4C 28 95 00	2	0x24	0x95284C
005c03ab	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952851],0x2	C6 80 51 28 95 00 02	2	0x29	0x952851
005c03b3	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952854],CL	88 88 54 28 95 00	2	0x2C	0x952854
005c03ba	veh_clear(int,int,int)	MOV	MOV byte ptr [EAX + 0x952855],CL	88 88 55 28 95 00	2	0x2D	0x952855
005c08f3	veh_kill(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005c08fa	veh_kill(int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
005c090d	veh_kill(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005c0914	veh_kill(int)	LEA	LEA EBX,[ESI + 0x952828]	8D 9E 28 28 95 00	2	0x0	0x952828
005c091d	veh_kill(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952856]	0F BF 8E 56 28 95 00	3	0x2E	0x952856
005c0924	veh_kill(int)	MOVSX	MOVSX EDX,word ptr [ESI + 0x95282a]	0F BF 96 2A 28 95 00	3	0x2	0x95282A
005c0931	veh_kill(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952832]	0F BF 8E 32 28 95 00	3	0xA	0x952832
005c093d	veh_kill(int)	MOV	MOV AL,byte ptr [ESI + 0x952836]	8A 86 36 28 95 00	2	0xE	0x952836
005c09af	veh_kill(int)	LEA	LEA EDX,[ESI + 0x95285c]	8D 96 5C 28 95 00	2	0x34	0x95285C
005c09d9	veh_kill(int)	MOV	MOV EAX,0x952858	B8 58 28 95 00	1	0x30	0x952858
005c0b19	kill(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x952832]	0F BF 86 32 28 95 00	3	0xA	0x952832
005c0b20	kill(int)	MOVSX	MOVSX EBX,word ptr [ESI + 0x952828]	0F BF 9E 28 28 95 00	3	0x0	0x952828
005c0b27	kill(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x95282a]	0F BF 8E 2A 28 95 00	3	0x2	0x95282A
005c0b2e	kill(int)	MOV	MOV DL,byte ptr [ESI + 0x952836]	8A 96 36 28 95 00	2	0xE	0x952836
005c0b43	kill(int)	MOV	MOV DX,word ptr [ESI + 0x952832]	66 8B 96 32 28 95 00	3	0xA	0x952832
005c0b4d	kill(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952856]	0F BF 8E 56 28 95 00	3	0x2E	0x952856
005c0b96	kill(int)	MOV	MOV CL,byte ptr [ESI + 0x95284c]	8A 8E 4C 28 95 00	2	0x24	0x95284C
005c0ce0	veh_find(int,int,int,int)	MOV	MOV EBX,0x95282a	BB 2A 28 95 00	1	0x2	0x95282A
005c0e5c	morale_veh(int,int,int)	MOV	MOV CL,byte ptr [EDX + 0x952836]	8A 8A 36 28 95 00	2	0xE	0x952836
005c0e7c	morale_veh(int,int,int)	MOV	MOV CX,word ptr [EDX + 0x952832]	66 8B 8A 32 28 95 00	3	0xA	0x952832
005c0f2e	morale_veh(int,int,int)	MOV	MOV AL,byte ptr [EDX + 0x95284c]	8A 82 4C 28 95 00	2	0x24	0x95284C
005c0f7c	morale_veh(int,int,int)	MOV	MOV AL,byte ptr [EDX + 0x95284c]	8A 82 4C 28 95 00	2	0x24	0x95284C
005c0ff4	morale_veh(int,int,int)	MOVSX	MOVSX ESI,word ptr [EDX + 0x952856]	0F BF B2 56 28 95 00	3	0x2E	0x952856
005c107d	morale_veh(int,int,int)	MOV	MOV CX,word ptr [EDX + 0x952832]	66 8B 8A 32 28 95 00	3	0xA	0x952832
005c1116	morale_veh(int,int,int)	MOV	MOV CL,byte ptr [EDX + 0x95284c]	8A 8A 4C 28 95 00	2	0x24	0x95284C
005c1185	offense_proto(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDX*0x4 + 0x952832]	0F BF 14 95 32 28 95 00	4	0xA	0x952832
005c11c6	offense_proto(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDX*0x4 + 0x952832]	0F BF 14 95 32 28 95 00	4	0xA	0x952832
005c11f0	offense_proto(int,int,int)	CMP	CMP word ptr [EDX*0x4 + 0x952832],0xf	66 83 3C 95 32 28 95 00 0F	4	0xA	0x952832
005c125c	offense_proto(int,int,int)	MOVSX	MOVSX EAX,word ptr [ECX*0x4 + 0x952832]	0F BF 04 8D 32 28 95 00	4	0xA	0x952832
005c12c4	armor_proto(int,int,int)	MOVSX	MOVSX ESI,word ptr [ESI*0x4 + 0x952832]	0F BF 34 B5 32 28 95 00	4	0xA	0x952832
005c12f2	armor_proto(int,int,int)	CMP	CMP word ptr [ESI*0x4 + 0x952832],0xf	66 83 3C B5 32 28 95 00 0F	4	0xA	0x952832
005c1323	armor_proto(int,int,int)	MOVSX	MOVSX EDX,word ptr [EDX*0x4 + 0x952832]	0F BF 14 95 32 28 95 00	4	0xA	0x952832
005c1552	speed(int,int)	MOVSX	MOVSX ECX,word ptr [EDI + 0x952832]	0F BF 8F 32 28 95 00	3	0xA	0x952832
005c1563	speed(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005c15a0	speed(int,int)	MOV	MOV DL,byte ptr [EDI + 0x952836]	8A 97 36 28 95 00	2	0xE	0x952836
005c15df	speed(int,int)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
005c1614	speed(int,int)	MOV	MOV AL,byte ptr [EDI + 0x952838]	8A 87 38 28 95 00	2	0x10	0x952838
005c1625	speed(int,int)	MOVSX	MOVSX EAX,word ptr [EDI + 0x952832]	0F BF 87 32 28 95 00	3	0xA	0x952832
005c173b	speed(int,int)	MOV	MOV AX,word ptr [EDI + 0x952832]	66 8B 87 32 28 95 00	3	0xA	0x952832
005c1770	veh_cargo(int)	MOV	MOV SI,word ptr [EDX + 0x952832]	66 8B B2 32 28 95 00	3	0xA	0x952832
005c17b3	veh_cargo(int)	MOV	MOV AL,byte ptr [EDX + 0x95284c]	8A 82 4C 28 95 00	2	0x24	0x95284C
005c1a39	veh_selectable(int)	MOVSX	MOVSX EDX,word ptr [EAX + 0x95282a]	0F BF 90 2A 28 95 00	3	0x2	0x95282A
005c1a40	veh_selectable(int)	MOVSX	MOVSX ESI,word ptr [EAX + 0x952828]	0F BF B0 28 28 95 00	3	0x0	0x952828
005c1a70	veh_selectable(int)	MOV	MOV DL,byte ptr [EAX + 0x952836]	8A 90 36 28 95 00	2	0xE	0x952836
005c1a7f	veh_selectable(int)	MOV	MOV AX,word ptr [EAX + 0x952830]	66 8B 80 30 28 95 00	3	0x8	0x952830
005c1ac5	veh_unmoved(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005c1acc	veh_unmoved(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005c1af2	veh_unmoved(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
005c1afc	veh_unmoved(int)	MOV	MOV AX,word ptr [ESI + 0x952830]	66 8B 86 30 28 95 00	3	0x8	0x952830
005c1b24	veh_unmoved(int)	TEST	TEST dword ptr [ESI + 0x95282c],0x4000000	F7 86 2C 28 95 00 00 00 00 04	2	0x4	0x95282C
005c1b30	veh_unmoved(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
005c1b4b	veh_unmoved(int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
005c1b85	veh_ready(int)	MOVSX	MOVSX EAX,word ptr [ESI + 0x95282a]	0F BF 86 2A 28 95 00	3	0x2	0x95282A
005c1b8c	veh_ready(int)	MOVSX	MOVSX ECX,word ptr [ESI + 0x952828]	0F BF 8E 28 28 95 00	3	0x0	0x952828
005c1bb2	veh_ready(int)	MOV	MOV CL,byte ptr [ESI + 0x952836]	8A 8E 36 28 95 00	2	0xE	0x952836
005c1bbc	veh_ready(int)	MOV	MOV AX,word ptr [ESI + 0x952830]	66 8B 86 30 28 95 00	3	0x8	0x952830
005c1be4	veh_ready(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005c1bef	veh_ready(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
005c1c14	veh_ready(int)	MOV	MOV DL,byte ptr [ESI + 0x952850]	8A 96 50 28 95 00	2	0x28	0x952850
005c1c4f	veh_jail(int)	MOVSX	MOVSX EAX,word ptr [EDX + 0x952832]	0F BF 82 32 28 95 00	3	0xA	0x952832
005c1c7b	veh_jail(int)	MOV	MOV CL,byte ptr [EDX + 0x952839]	8A 8A 39 28 95 00	2	0x11	0x952839
005c1c8e	veh_jail(int)	MOVSX	MOVSX ECX,word ptr [EDX + 0x95283c]	0F BF 8A 3C 28 95 00	3	0x14	0x95283C
005c1ca3	veh_jail(int)	MOVSX	MOVSX ECX,word ptr [ECX*0x4 + 0x952832]	0F BF 0C 8D 32 28 95 00	4	0xA	0x952832
005c1ccd	veh_jail(int)	MOVSX	MOVSX ECX,word ptr [EDX + 0x95282a]	0F BF 8A 2A 28 95 00	3	0x2	0x95282A
005c1cdb	veh_jail(int)	MOVSX	MOVSX EDX,word ptr [EDX + 0x952828]	0F BF 92 28 28 95 00	3	0x0	0x952828
005c1d39	veh_skip(int)	MOV	MOV byte ptr [EDX*0x4 + 0x952850],AL	88 04 95 50 28 95 00	3	0x28	0x952850
005c1d82	veh_wake(int)	MOV	MOV AL,byte ptr [ESI + 0x952839]	8A 86 39 28 95 00	2	0x11	0x952839
005c1d90	veh_wake(int)	TEST	TEST dword ptr [ESI + 0x95282c],0x4000000	F7 86 2C 28 95 00 00 00 00 04	2	0x4	0x95282C
005c1db1	veh_wake(int)	MOV	MOV byte ptr [ESI + 0x952850],AL	88 86 50 28 95 00	2	0x28	0x952850
005c1db7	veh_wake(int)	MOV	MOV BL,byte ptr [ESI + 0x95284d]	8A 9E 4D 28 95 00	2	0x25	0x95284D
005c1dc1	veh_wake(int)	MOVSX	MOVSX ECX,byte ptr [ESI + 0x952839]	0F BE 8E 39 28 95 00	3	0x11	0x952839
005c1ddb	veh_wake(int)	MOV	MOV byte ptr [ESI + 0x95284d],BL	88 9E 4D 28 95 00	2	0x25	0x95284D
005c1de1	veh_wake(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005c1dec	veh_wake(int)	CMP	CMP byte ptr [ESI + 0x95284e],0xb	80 BE 4E 28 95 00 0B	2	0x26	0x95284E
005c1df9	veh_wake(int)	MOV	MOV byte ptr [ESI + 0x952850],0x0	C6 86 50 28 95 00 00	2	0x28	0x952850
005c1e00	veh_wake(int)	MOV	MOV byte ptr [ESI + 0x952839],0x0	C6 86 39 28 95 00 00	2	0x11	0x952839
005c1e07	veh_wake(int)	MOV	MOV EAX,dword ptr [ESI + 0x95282c]	8B 86 2C 28 95 00	2	0x4	0x95282C
005c1e12	veh_wake(int)	MOV	MOV dword ptr [ESI + 0x95282c],EAX	89 86 2C 28 95 00	2	0x4	0x95282C
005c8ccf	zoc_sea(int,int,int)	MOV	MOV CL,byte ptr [EAX + 0x952836]	8A 88 36 28 95 00	2	0xE	0x952836
005c8ce2	zoc_sea(int,int,int)	TEST	TEST byte ptr [EAX + 0x95284f],DL	84 90 4F 28 95 00	2	0x27	0x95284F
005c8cee	zoc_sea(int,int,int)	MOV	MOV CX,word ptr [EAX + 0x952830]	66 8B 88 30 28 95 00	3	0x8	0x952830
005c8d00	zoc_sea(int,int,int)	MOVSX	MOVSX EAX,word ptr [EAX + 0x952858]	0F BF 80 58 28 95 00	3	0x30	0x952858
